# ポートフォリオマネージャー セットアップガイド

**バージョン:** 1.1  
**最終更新日:** 2025/03/18

このガイドでは、ポートフォリオマネージャーアプリケーションの環境構築から実行までの手順を解説します。

## 1. 前提条件

- Node.js v16.x以上
- npm v8.x以上
- Git（コード管理用）

## 2. プロジェクトのセットアップ

### 2.1 リポジトリのクローン（または新規作成）

```bash
# リポジトリが存在する場合
git clone <repository-url> portfolio-manager
cd portfolio-manager

# または新規プロジェクトの場合
mkdir portfolio-manager
cd portfolio-manager
```

### 2.2 必要なファイルの作成

#### package.json
```json
{
  "name": "portfolio-manager",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@headlessui/react": "1.7.15",
    "@react-oauth/google": "0.11.0",
    "@testing-library/jest-dom": "5.16.5",
    "@testing-library/react": "13.4.0",
    "@testing-library/user-event": "13.5.0",
    "axios": "1.3.5",
    "dayjs": "1.11.7",
    "jwt-decode": "3.1.2",
    "lodash": "4.17.21",
    "papaparse": "5.4.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-router-dom": "6.10.0",
    "react-scripts": "5.0.1",
    "recharts": "2.5.0",
    "tailwindcss": "3.3.1",
    "web-vitals": "2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ],
    "rules": {
      "no-console": [
        "warn",
        {
          "allow": [
            "warn",
            "error",
            "log"
          ]
        }
      ],
      "no-unused-vars": "warn",
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "jsx-a11y/label-has-associated-control": "off"
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "10.4.14",
    "http-proxy-middleware": "2.0.6",
    "postcss": "8.4.21",
    "tailwindcss": "3.3.1"
  },
  "proxy": "http://localhost:9000"
}
```

#### .env.local
```
REACT_APP_GOOGLE_CLIENT_ID=あなたのGoogleクライアントID
REACT_APP_ALPHA_VANTAGE_API_KEY=GC4EBI5YHFKOJEXY
```

#### tailwind.config.js
```javascript
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        primary: "#0088FE",
        secondary: "#00C49F",
        warning: "#FF0000",
      },
    },
  },
  plugins: [],
};
```

#### postcss.config.js
```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
```

#### Netlify Functions用の設定ファイル（netlify.toml）
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/.netlify/functions/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# Functions への直接アクセス用リダイレクト
[[redirects]]
  from = "/.netlify/functions/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

#### src/setupProxy.js
```javascript
const { createProxyMiddleware } = require("http-proxy-middleware");

module.exports = function (app) {
  app.use(
    "/.netlify/functions/",
    createProxyMiddleware({
      target: "http://localhost:9000",
      pathRewrite: {
        "^/\\.netlify/functions": "",
      },
      changeOrigin: true,
    })
  );
};
```

## 3. Netlify Functions のセットアップ

### 3.1 Alpha Vantage API プロキシ関数

Yahoo Finance APIが利用できない場合のフォールバックとして、Alpha Vantage APIを使用します。

#### functions/alpha-vantage-proxy.js
```javascript
// functions/alpha-vantage-proxy.js

/**
 * Alpha Vantage APIへのプロキシ関数
 * CORSの問題を回避し、APIキーを安全に管理するためのサーバーレス関数
 */
const axios = require('axios');

exports.handler = async function(event, context) {
    // CORS ヘッダーを設定
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
    };
    
    // プリフライトリクエストをハンドリング
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ message: 'CORS preflight response' })
        };
    }
    
    // クエリパラメータを取得
    const queryParams = event.queryStringParameters || {};
    
    // APIキーを環境変数から取得（または提供されたものを使用）
    // 環境変数名を統一
    const apiKey = process.env.ALPHA_VANTAGE_API_KEY || 'GC4EBI5YHFKOJEXY';
    
    // 必須パラメータ
    const functionType = queryParams.function;
    
    if (!functionType) {
        return {
            statusCode: 400,
            headers,
            body: JSON.stringify({ error: 'function parameter is required' })
        };
    }
    
    try {
        // パラメータからAPIキーを除外して新しいパラメータオブジェクトを作成
        const params = { ...queryParams };
        if (params.apikey) delete params.apikey;
        
        // APIキーを追加
        params.apikey = apiKey;
        
        console.log(`Requesting Alpha Vantage API with function: ${functionType}`);
        
        // Alpha Vantage APIにリクエスト
        const response = await axios.get('https://www.alphavantage.co/query', {
            params,
            headers: {
                'User-Agent': 'PortfolioManager/1.0'
            }
        });
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify(response.data)
        };
    } catch (error) {
        console.error('Alpha Vantage API error:', error);
        
        // エラーレスポンス
        return {
            statusCode: error.response?.status || 500,
            headers,
            body: JSON.stringify({
                error: 'Failed to fetch data from Alpha Vantage API',
                details: error.response?.data || error.message
            })
        };
    }
};
```

### 3.2 Yahoo Finance API プロキシ関数

#### functions/yahoo-finance-proxy.js
```javascript
// functions/yahoo-finance-proxy.js

/**
 * Yahoo Finance APIへのプロキシ関数
 * CORSの問題を回避し、リクエスト制限やIPブロックを軽減するためのサーバーレス関数
 */
const axios = require('axios');

exports.handler = async function(event, context) {
  // CORS ヘッダーを設定
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
  };
  
  // プリフライトリクエストをハンドリング
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ message: 'CORS preflight response' })
    };
  }
  
  try {
    // リクエストからクエリパラメータを取得
    const params = event.queryStringParameters || {};
    
    // シンボルは必須
    if (!params.symbols) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'symbols parameter is required' })
      };
    }
    
    console.log(`Requesting Yahoo Finance API for symbols: ${params.symbols}`);
    
    // UA文字列の設定
    const userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
    
    // Yahoo Finance APIにリクエスト
    const response = await axios.get(`https://query1.finance.yahoo.com/v7/finance/quote`, {
      params,
      headers: {
        'User-Agent': userAgent
      },
      timeout: 10000 // 10秒タイムアウト
    });
    
    return {
      statusCode: 200,
      headers: {
        ...headers,
        'Cache-Control': 'public, max-age=300' // 5分間キャッシュ
      },
      body: JSON.stringify(response.data)
    };
  } catch (error) {
    console.error('Yahoo Finance API error:', error);
    
    // エラーレスポンス
    return {
      statusCode: error.response?.status || 500,
      headers,
      body: JSON.stringify({
        error: 'Failed to fetch data from Yahoo Finance API',
        details: error.response?.data || error.message
      })
    };
  }
};
```

### 3.3 為替レート取得用プロキシ関数

#### functions/mof-exchange-rate-proxy.js
```javascript
// functions/mof-exchange-rate-proxy.js

/**
 * 日本の財務省為替レートAPIへのプロキシ関数
 * 公式の為替レートを代替データソースとして使用
 */
const axios = require('axios');

exports.handler = async function(event, context) {
    // CORS ヘッダーを設定
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS'
    };
    
    // プリフライトリクエストをハンドリング
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ message: 'CORS preflight response' })
        };
    }
    
    try {
        // 財務省の為替レートデータを取得
        // このエンドポイントは実際のAPIではなく、HTMLページなのでスクレイピングが必要
        const response = await axios.get('https://www.mof.go.jp/english/policy/international_policy/reference/feio/index.htm', {
            headers: {
                'User-Agent': 'PortfolioManager/1.0'
            }
        });
        
        // HTMLからデータを抽出
        const html = response.data;
        const ratesData = extractExchangeRatesFromHTML(html);
        
        return {
            statusCode: 200,
            headers: {
                ...headers,
                'Cache-Control': 'public, max-age=86400' // 24時間キャッシュ
            },
            body: JSON.stringify(ratesData)
        };
    } catch (error) {
        console.error('MOF exchange rate fetch error:', error);
        
        // エラーレスポンス
        return {
            statusCode: error.response?.status || 500,
            headers,
            body: JSON.stringify({
                error: 'Failed to fetch exchange rate data from MOF',
                details: error.message
            })
        };
    }
};

/**
 * 財務省ページからの為替レートデータ抽出（簡易版）
 * 実際の実装ではより堅牢なHTMLパーサーを使用すべき
 */
function extractExchangeRatesFromHTML(html) {
    // 為替レートのデフォルト値（財務省データの抽出に失敗した場合のフォールバック）
    const defaultRates = {
        'USD/JPY': 150.0,
        'EUR/JPY': 160.0,
        'GBP/JPY': 190.0,
        'AUD/JPY': 95.0,
        'CAD/JPY': 105.0,
        'CHF/JPY': 145.0,
        'CNY/JPY': 20.0,
        'KRW/JPY': 0.1
    };
    
    try {
        // HTMLからテーブルデータを抽出する実装
        // ...実際の抽出ロジック...
        
        // 簡易版では財務省データの抽出は省略し、デフォルト値を返す
        return {
            rates: defaultRates,
            source: 'MOF Fallback',
            lastUpdated: new Date().toISOString(),
            note: 'これはデフォルト値です。実際のデータ抽出に失敗しました。'
        };
    } catch (error) {
        console.error('Exchange rate extraction error:', error);
        return {
            rates: defaultRates,
            source: 'Default Values',
            lastUpdated: new Date().toISOString(),
            error: true,
            note: 'データ抽出中にエラーが発生しました。デフォルト値を使用しています。'
        };
    }
}
```

## 4. 市場データサービスの実装

Yahoo Finance API -> Alpha Vantage API -> フォールバック値という順序でデータ取得を試みるサービスを実装します。

### 4.1 marketDataService.js
```javascript
// src/services/marketDataService.js

import axios from 'axios';

// 環境に応じたYahoo Finance APIエンドポイント
const YAHOO_API_URL = process.env.NODE_ENV === 'development' 
  ? '/v7/finance/quote'  // プロキシ経由
  : '/.netlify/functions/yahoo-finance-proxy'; // 本番環境

// Alpha Vantage APIエンドポイント（代替データソース）
const ALPHA_VANTAGE_URL = '/.netlify/functions/alpha-vantage-proxy';
// 環境変数名を統一（Reactフロントエンドなので REACT_APP_ プレフィックスは必要）
const ALPHA_VANTAGE_KEY = process.env.REACT_APP_ALPHA_VANTAGE_API_KEY || 'GC4EBI5YHFKOJEXY';

// 為替レートのデフォルト値（最終手段）
const DEFAULT_EXCHANGE_RATES = {
  'USD/JPY': 150.0,
  'JPY/USD': 1/150.0,
  'EUR/JPY': 160.0,
  'EUR/USD': 1.1,
};

/**
 * Yahoo Financeから銘柄データを取得
 * @param {string} ticker - ティッカーシンボル
 * @returns {Promise<Object>} - 銘柄データとステータス
 */
export async function fetchTickerData(ticker) {
  try {
    // Yahoo Finance APIからデータ取得を試みる
    console.log(`Attempting to fetch data for ${ticker} from Yahoo Finance`);
    const response = await axios.get(YAHOO_API_URL, {
      params: { symbols: ticker },
      timeout: 5000 // 5秒タイムアウト設定
    });
    
    // レスポンスの検証
    if (response.data && 
        response.data.quoteResponse && 
        response.data.quoteResponse.result && 
        response.data.quoteResponse.result.length > 0) {
      
      const data = response.data.quoteResponse.result[0];
      
      return {
        success: true,
        data: {
          id: data.symbol,
          name: data.shortName || data.longName || ticker,
          ticker: data.symbol,
          exchangeMarket: data.fullExchangeName?.includes('Tokyo') ? 'Japan' : 'US',
          price: data.regularMarketPrice,
          currency: data.currency,
          holdings: 0,
          annualFee: 0.3,
          lastUpdated: new Date().toISOString(),
          source: 'Yahoo Finance'
        },
        message: '正常に取得しました'
      };
    }
    
    console.log(`No valid data found for ${ticker} from Yahoo Finance, trying Alpha Vantage`);
    // データが見つからない場合は代替ソースを試す
    return await fetchTickerDataFromAlternative(ticker);
    
  } catch (error) {
    console.error('Yahoo Finance API error:', error);
    console.log(`Error fetching ${ticker} from Yahoo Finance, trying Alpha Vantage`);
    
    // エラーが発生した場合は代替ソースを試す
    return await fetchTickerDataFromAlternative(ticker);
  }
}

/**
 * Alpha Vantageから銘柄データを取得（代替ソース）
 * @param {string} ticker - ティッカーシンボル
 * @returns {Promise<Object>} - 銘柄データとステータス
 */
async function fetchTickerDataFromAlternative(ticker) {
  try {
    // Alpha Vantage APIからデータ取得を試みる
    console.log(`Attempting to fetch data for ${ticker} from Alpha Vantage`);
    const response = await axios.get(ALPHA_VANTAGE_URL, {
      params: {
        function: 'GLOBAL_QUOTE',
        symbol: ticker,
        apikey: ALPHA_VANTAGE_KEY
      },
      timeout: 8000 // 8秒タイムアウト設定
    });
    
    // レスポンスの検証
    if (response.data && response.data['Global Quote'] && response.data['Global Quote']['05. price']) {
      const quoteData = response.data['Global Quote'];
      const price = parseFloat(quoteData['05. price']);
      
      console.log(`Successfully fetched data for ${ticker} from Alpha Vantage`);
      
      // 通貨判定（簡易的な判定、実際にはより詳細な判定が必要）
      const currency = ticker.includes('.T') ? 'JPY' : 'USD';
      
      return {
        success: true,
        data: {
          id: ticker,
          name: ticker, // Alpha Vantageからは銘柄名が取得できないため、ティッカーを使用
          ticker: ticker,
          exchangeMarket: ticker.includes('.T') ? 'Japan' : 'US',
          price: price,
          currency: currency,
          holdings: 0,
          annualFee: 0.3,
          lastUpdated: new Date().toISOString(),
          source: 'Alpha Vantage'
        },
        message: '代替ソースから取得しました'
      };
    }
    
    console.log(`No valid data found for ${ticker} from Alpha Vantage, using fallback`);
    // 全ての取得方法が失敗した場合はフォールバック値を使用
    return generateFallbackTickerData(ticker);
    
  } catch (error) {
    console.error('Alternative API error:', error);
    console.log(`Error fetching ${ticker} from Alpha Vantage, using fallback`);
    
    // フォールバック値を返す
    return generateFallbackTickerData(ticker);
  }
}

/**
 * 全ての取得方法が失敗した場合のフォールバックデータ生成
 * @param {string} ticker - ティッカーシンボル
 * @returns {Object} - フォールバック銘柄データとステータス
 */
function generateFallbackTickerData(ticker) {
  // 市場とティッカーから推測されるデフォルト値を使用
  const isJapanese = ticker.includes('.T');
  const defaultPrice = isJapanese ? 2500 : 150;
  
  return {
    success: false,
    data: {
      id: ticker,
      name: ticker,
      ticker: ticker,
      exchangeMarket: isJapanese ? 'Japan' : 'US',
      price: defaultPrice,
      currency: isJapanese ? 'JPY' : 'USD',
      holdings: 0,
      annualFee: 0.3,
      lastUpdated: new Date().toISOString(),
      source: 'Fallback'
    },
    message: '最新の価格データを取得できませんでした。前回の価格または推定値を使用しています。',
    error: true
  };
}

// ... 他のメソッド（fetchExchangeRate, fetchMultipleTickerData など）も同様に実装 ...
```

## 5. 開発環境の起動

```bash
# 依存パッケージのインストール
npm install

# 開発サーバーの起動
npm start
```

## 6. Netlify へのデプロイ

### 6.1 Netlify CLIを使用する方法

```bash
# Netlify CLIのインストール
npm install -g netlify-cli

# Netlifyにログイン
netlify login

# プロジェクトの初期化
netlify init

# デプロイ
netlify deploy --prod
```

### 6.2 Netlify管理画面からデプロイする方法

1. Netlifyのアカウントにログイン
2. 「New site from Git」をクリック
3. GitHubなどからリポジトリを選択（または手動でビルドしたファイルをアップロード）
4. ビルド設定を行う:
   - Build command: `CI= npm run build`
   - Publish directory: `build`
   - Functions directory: `functions`
5. 環境変数を設定:
   - `REACT_APP_GOOGLE_CLIENT_ID`: Google OAuthクライアントID
   - `REACT_APP_ALPHA_VANTAGE_API_KEY`: Alpha Vantage API用キー
   - `ALPHA_VANTAGE_API_KEY`: サーバーレス関数用API Key
6. デプロイボタンをクリック

## 7. トラブルシューティング

### 7.1 Yahoo Finance APIが動作しない

Yahoo Finance APIは公式のAPIではなく、非公式のエンドポイントを使用しているため、変更や制限が入る可能性があります。対処方法:

1. コンソールログで詳細なエラーを確認
2. 401 Unauthorized エラーの場合:
   - netlify.toml の設定を確認（CORSヘッダー、リダイレクト設定）
   - yahoo-finance-proxy.js にRefererとOriginヘッダーが追加されているか確認
3. Alpha Vantage APIが自動的に使用されていることを確認（ログやデータソース表示で確認可能）
4. タイムアウト値を調整（現在は15秒に設定）

### 7.2 Alpha Vantage APIのレート制限

Alpha Vantage APIには呼び出し回数の制限があります:
- 無料プランでは1日当たり25回まで
- リクエスト間隔に制限あり（約12秒）

対処方法:
1. コードのフォールバック機構を活用
2. キャッシュを活用して呼び出し回数を減らす
3. 必要に応じて有料プランの利用を検討

### 7.3 環境変数の設定確認

環境変数が正しく設定されていない場合の確認方法:

1. ローカル開発環境: `.env.local` ファイルの内容を確認
2. Netlify: 管理画面から「Site settings」→「Build & deploy」→「Environment」を確認

## 8. 更新履歴と継続開発

### 8.1 最新アップデート

- Alpha Vantage API連携強化
- 環境変数名の統一 (`REACT_APP_ALPHA_VANTAGE_API_KEY` と `ALPHA_VANTAGE_API_KEY`)
- マルチソースデータ取得フローの実装
- ログ出力の拡充とエラーハンドリングの改善

### 8.2 今後の開発計画

- ローカルストレージによるデータ永続化
- Googleドライブ連携の強化
- 複数ポートフォリオの管理機能
- モバイル対応の改善

---

**注意**: このセットアップガイドは、プロジェクトの最新状態に基づいて作成されています。最新の更新情報は、コード規約書やインターフェース仕様書も併せてご確認ください。

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/17 | 初版作成 |  |
| 1.1 | 2025/03/18 | Alpha Vantage API連携強化・環境変数名統一・トラブルシューティング追加 |  |

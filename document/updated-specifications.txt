# 株価取得システム仕様書（スクレイピング対応版）

**バージョン:** 5.0  
**最終更新日時:** 2025/03/25

## 1. 概要

本仕様書は、ポートフォリオマネージャーアプリケーションで使用する株価取得システムの設計と実装について定義します。このシステムは複数のデータソースを組み合わせて株価情報を効率的かつ信頼性高く取得します。銘柄タイプに応じて最適なデータ取得方法を選択し、主要ソースが失敗した場合は代替ソースを試行する堅牢な仕組みを採用しています。

## 2. データソース構成

### 2.1 プライマリソース
- **米国株**: Alpaca API
- **日本株**: スクレイピング（複数サイト）
- **投資信託**: スクレイピング（複数サイト）

### 2.2 バックアップソース
- **全銘柄共通**: Yahoo Finance API

### 2.3 為替レート取得
- **主要ソース**: exchangerate.host API
- **バックアップ**: デフォルト値（環境変数）

## 3. 銘柄タイプの自動判別

### 3.1 判別ロジック
```javascript
// 投資信託かどうかを判定
function isMutualFund(ticker) {
  return /^\d{7,8}C(\.T)?$/.test(ticker);
}

// 日本株かどうかを判定
function isJapaneseStock(ticker) {
  return /^\d{4}(\.T)?$/.test(ticker) || ticker.endsWith('.T');
}

// 米国株はそれ以外の銘柄と判断
```

### 3.2 判別の優先順位
1. 投資信託（7-8桁の数字+C）
2. 日本株（4桁の数字または.T付き）
3. その他（米国株と判断）

## 4. スクレイピングによる日本株取得

### 4.1 対象サイト（優先順）
1. Yahoo Finance Japan
2. Minkabu
3. Kabutan

### 4.2 実装方法
- Netlify Functionsを使用したサーバーレス関数
- 各サイトから株価データをスクレイピング
- ランダム化されたUser-Agentを使用してブロックを回避
- タイムアウト設定と再試行メカニズム

### 4.3 エンドポイント
- **Base URL**: `/api/jp-stock-scraping-proxy`
- **パラメータ**: `code` (証券コード)

### 4.4 レスポンス例
```json
{
  "success": true,
  "data": {
    "ticker": "7203",
    "price": 2500,
    "name": "トヨタ自動車(株)",
    "currency": "JPY",
    "lastUpdated": "2025-03-25T03:24:15.456Z",
    "source": "Yahoo Finance Japan",
    "isStock": true,
    "isMutualFund": false
  }
}
```

## 5. スクレイピングによる投資信託取得

### 5.1 対象サイト（優先順）
1. Yahoo Finance Japan
2. 投資信託協会
3. Morningstar Japan
4. Minkabu

### 5.2 実装方法
- Netlify Functionsを使用したサーバーレス関数
- 各サイトから基準価額データをスクレイピング
- ランダム化されたUser-Agentを使用してブロックを回避
- タイムアウト設定と再試行メカニズム

### 5.3 エンドポイント
- **Base URL**: `/api/mutual-fund-scraping-proxy`
- **パラメータ**: `code` (ファンドコード)

### 5.4 レスポンス例
```json
{
  "success": true,
  "data": {
    "ticker": "8630042C",
    "price": 12500,
    "name": "ニッセイ 外国株式インデックスファンド",
    "currency": "JPY",
    "lastUpdated": "2025-03-25T03:24:15.456Z",
    "source": "投資信託協会",
    "isStock": false,
    "isMutualFund": true,
    "priceLabel": "基準価額"
  }
}
```

## 6. 米国株の取得（Alpaca API）

### 6.1 エンドポイント
- **Base URL**: `/api/alpaca-api-proxy`
- **パラメータ**: `symbol` (ティッカーシンボル)

### 6.2 認証
- **API Key**: `ALPACA_API_KEY` 環境変数
- **API Secret**: `ALPACA_API_SECRET` 環境変数

### 6.3 実装方法
- Netlify Functionsを使用したサーバーレス関数
- Alpaca APIへのプロキシとして機能
- タイムアウト設定と再試行メカニズム

### 6.4 レスポンス例
```json
{
  "success": true,
  "data": {
    "ticker": "AAPL",
    "price": 174.79,
    "name": "Apple Inc.",
    "currency": "USD",
    "lastUpdated": "2025-03-25T03:24:15.456Z",
    "source": "Alpaca",
    "isStock": true,
    "isMutualFund": false
  }
}
```

## 7. バックアップソース（Yahoo Finance API）

### 7.1 エンドポイント
- **Base URL**: `/api/yahoo-finance-proxy`
- **パラメータ**: `symbols` (カンマ区切りのティッカーシンボル)

### 7.2 認証
- 認証不要（パブリックAPI）

### 7.3 実装方法
- Netlify Functionsを使用したサーバーレス関数
- Yahoo Finance非公式APIへのプロキシとして機能
- タイムアウト設定と再試行メカニズム

### 7.4 ティッカー変換
```javascript
// Yahoo Finance用のティッカー変換
function formatTickerForYahoo(ticker) {
  // 投資信託の場合
  if (isMutualFund(ticker)) {
    // Cと.Tの処理
    if (ticker.endsWith('.T')) {
      if (!ticker.includes('C')) {
        return ticker.replace(/\.T$/, 'C.T');
      }
      return ticker;
    }
    
    if (!ticker.includes('C')) {
      return `${ticker}C.T`;
    }
    
    return `${ticker}.T`;
  }
  
  // 日本株の場合
  if (/^\d{4}$/.test(ticker) && !ticker.includes('.T')) {
    return `${ticker}.T`;
  }
  
  return ticker;
}
```

## 8. フォールバックメカニズム

### 8.1 フォールバック条件
1. プライマリソースとバックアップソースが共に失敗した場合
2. タイムアウトが発生した場合
3. データが無効な場合

### 8.2 フォールバック値の生成
```javascript
function generateFallbackTickerData(ticker) {
  // 投資信託の場合
  if (isMutualFund(ticker)) {
    return {
      ticker: ticker,
      price: 10000, // デフォルト基準価額
      name: `投資信託 ${ticker}`,
      currency: 'JPY',
      source: 'Fallback',
      isStock: false,
      isMutualFund: true,
      priceLabel: '基準価額'
    };
  }
  
  // 日本株の場合
  if (isJapaneseStock(ticker)) {
    return {
      ticker: ticker,
      price: 2500, // デフォルト株価
      name: `日本株 ${ticker.replace(/\.T$/, '')}`,
      currency: 'JPY',
      source: 'Fallback',
      isStock: true,
      isMutualFund: false
    };
  }
  
  // 米国株の場合
  return {
    ticker: ticker,
    price: 150, // デフォルト株価
    name: ticker,
    currency: 'USD',
    source: 'Fallback',
    isStock: true,
    isMutualFund: false
  };
}
```

## 9. タイムアウト設定

### 9.1 各データソースのタイムアウト
- **Alpaca API**: 10秒
- **日本株スクレイピング**: 20秒
- **投資信託スクレイピング**: 20秒
- **Yahoo Finance API**: 15秒
- **exchangerate.host**: 10秒

### 9.2 再試行メカニズム
- 最大3回の試行（初回 + 2回のリトライ）
- リトライごとにタイムアウト時間を延長
- リトライ間に短いウェイト（1〜2秒）を挿入

## 10. エラーハンドリング

### 10.1 エラータイプ
- **ネットワークエラー**: 接続問題
- **タイムアウト**: 応答待ち時間超過
- **認証エラー**: API認証失敗
- **レスポンス解析エラー**: 無効なデータ形式
- **スクレイピングエラー**: データ抽出失敗

### 10.2 エラー通知
```javascript
// データソースの統計を計算
const stats = {
  Scraping: { 
    japaneseStocks: { tried: 0, succeeded: 0 },
    mutualFunds: { tried: 0, succeeded: 0 }
  },
  Alpaca: { tried: 0, succeeded: 0 },
  Yahoo: { tried: 0, succeeded: 0 },
  Fallback: 0
};

// 結果を集計

// 通知メッセージを生成
let message = '市場データを更新しました: ';

if (stats.Scraping.japaneseStocks.succeeded > 0) {
  message += `日本株スクレイピング: ${stats.Scraping.japaneseStocks.succeeded}件, `;
}

if (stats.Scraping.mutualFunds.succeeded > 0) {
  message += `投資信託スクレイピング: ${stats.Scraping.mutualFunds.succeeded}件, `;
}

if (stats.Alpaca.succeeded > 0) {
  message += `Alpaca: ${stats.Alpaca.succeeded}件, `;
}

if (stats.Yahoo.succeeded > 0) {
  message += `Yahoo Finance: ${stats.Yahoo.succeeded}件, `;
}

if (stats.Fallback > 0) {
  message += `フォールバック: ${stats.Fallback}件, `;
}
```

## 11. クライアントサイド対応

### 11.1 データソース表示バッジ
```jsx
function DataSourceBadge({ source }) {
  let badgeClass = "text-xs px-1.5 py-0.5 rounded ";
  let badgeText = source;

  switch (source) {
    case 'Alpaca':
      badgeClass += "bg-blue-100 text-blue-800";
      break;
    case 'Yahoo Finance Japan':
    case 'Minkabu':
    case 'Kabutan':
    case '投資信託協会':
    case 'Morningstar Japan':
      badgeClass += "bg-green-100 text-green-800";
      badgeText = source === 'Yahoo Finance Japan' ? 'Yahoo JP' : 
                 source === 'Morningstar Japan' ? 'Morningstar' : 
                 source === '投資信託協会' ? '投信協会' : source;
      break;
    case 'Yahoo Finance':
      badgeClass += "bg-purple-100 text-purple-800";
      badgeText = "YFinance";
      break;
    case 'Fallback':
    default:
      badgeClass += "bg-yellow-100 text-yellow-800";
      break;
  }

  return (
    <span className={badgeClass}>
      {badgeText}
    </span>
  );
}
```

### 11.2 価格表示コンポーネント
```jsx
function PriceDisplay({ asset }) {
  const { price, currency, isMutualFund } = asset;
  const label = isMutualFund ? '基準価額' : '株価';
  
  return (
    <div className="flex flex-col">
      <span className="text-xs text-gray-500">{label}</span>
      <span className="font-medium">{formatCurrency(price, currency)}</span>
    </div>
  );
}
```

## 12. クライアント側実装

### 12.1 fetchTickerData 関数
```javascript
export async function fetchTickerData(ticker) {
  // 銘柄タイプを判定
  const isJapanese = isJapaneseStock(ticker);
  const isMutualFundTicker = isMutualFund(ticker);
  
  // 投資信託の場合
  if (isMutualFundTicker) {
    try {
      // 投資信託スクレイピングからデータ取得を試みる
      const mutualFundResult = await fetchFromMutualFundScraping(ticker);
      
      if (mutualFundResult && mutualFundResult.success) {
        return mutualFundResult;
      }
      
      // 投資信託スクレイピングが失敗した場合は、Yahoo Financeを試行
      const yahooResult = await fetchFromYahoo(ticker);
      
      if (yahooResult && yahooResult.success) {
        return yahooResult;
      }
      
      // フォールバック値を使用
      return generateFallbackTickerData(ticker);
    } catch (error) {
      return generateFallbackTickerData(ticker);
    }
  }
  
  // 日本株の場合
  if (isJapanese) {
    try {
      // 日本株スクレイピングからデータ取得を試みる
      const jpStockResult = await fetchFromJPStockScraping(ticker);
      
      if (jpStockResult && jpStockResult.success) {
        return jpStockResult;
      }
      
      // 日本株スクレイピングが失敗した場合は、Yahoo Financeを試行
      const yahooResult = await fetchFromYahoo(ticker);
      
      if (yahooResult && yahooResult.success) {
        return yahooResult;
      }
      
      // フォールバック値を使用
      return generateFallbackTickerData(ticker);
    } catch (error) {
      return generateFallbackTickerData(ticker);
    }
  }
  
  // 米国株の場合はAlpaca APIを優先
  try {
    // Alpaca APIからデータ取得を試みる
    const alpacaResult = await fetchFromAlpaca(ticker);
    
    if (alpacaResult && alpacaResult.success) {
      return alpacaResult;
    }
    
    // Alpaca APIが失敗した場合は、Yahoo Financeを試行
    const yahooResult = await fetchFromYahoo(ticker);
    
    if (yahooResult && yahooResult.success) {
      return yahooResult;
    }
    
    // フォールバック値を使用
    return generateFallbackTickerData(ticker);
  } catch (error) {
    return generateFallbackTickerData(ticker);
  }
}
```

## 13. 留意事項

### 13.1 スクレイピングの制約
- ウェブサイトの構造変更に脆弱
- サイト側の防止機構（CAPTCHA等）に対応不能
- 過度な使用によるIPブロック可能性あり
- ランダムなユーザーエージェントと適切な間隔が必要

### 13.2 倫理的・法的考慮事項
- 対象サイトの利用規約を尊重
- 商用利用に関する制限を確認
- 過度な負荷をかけない配慮
- データの正確性に関する免責事項を明記

### 13.3 代替手段
- 公式APIの登場に備え適宜実装を見直し
- データプロバイダ契約の検討
- ユーザー手動入力機能の提供

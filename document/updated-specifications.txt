# ポートフォリオマネージャー 仕様書（更新版2.0）

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。GoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。また、ブラウザのローカルストレージを活用したデータ永続化により、アプリ利用時の利便性を向上させています。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンド、アクティブファンドなど）
- 年間手数料率の自動推定と計算（個別株は0%固定）
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ保持（URIエンコード+Base64による安全な暗号化）
- Google認証・Googleドライブ連携（Google Identity Services API対応）
- 市場データの自動取得（Alpha Vantageをプライマリソース、フォールバック値をバックアップとして使用）
- iOS風タブバーによるナビゲーション
- エラーバウンダリによるアプリケーション耐障害性向上

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x, Fetch API
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（URIエンコード+Base64暗号化）
- **クラウド連携**: Google Drive API v3

## 2. 環境設定

### 2.1 必要なファイル
- **package.json**: 依存関係とスクリプト定義
- **tailwind.config.js**: Tailwind CSSの設定
- **postcss.config.js**: PostCSSの設定
- **netlify.toml**: Netlifyデプロイとサーバーレス関数の設定
- **.env.local**: 環境変数設定（ローカル開発用）
- **src/setupProxy.js**: プロキシ設定（API連携用）
- **src/utils/fundUtils.js**: ファンドタイプと手数料情報のユーティリティ関数
- **public/index.html**: 基本HTMLとGoogle APIスクリプトの読み込み

### 2.2 環境変数
```
# Google OAuth認証用クライアントID
REACT_APP_GOOGLE_CLIENT_ID=<YOUR_GOOGLE_CLIENT_ID>

# Google API Key
REACT_APP_GOOGLE_API_KEY=<YOUR_GOOGLE_API_KEY>

# Alpha Vantage API（フロントエンド用）
REACT_APP_ALPHA_VANTAGE_API_KEY=<YOUR_API_KEY>

# Netlify Functions用環境変数
ALPHA_VANTAGE_API_KEY=<YOUR_API_KEY>
```

### 2.3 Netlify Functions設定
netlify.toml（最新版）:
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/api/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# API経由でFunctionsにアクセス
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

# SPAのためのリダイレクト
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

## 3. アプリケーションの構造

### 3.1 ディレクトリ構造（更新版）
```
portfolio-manager/
├── public/
│   ├── index.html      # Google API Client Libraryスクリプト追加
│   └── favicon.ico
├── src/
│   ├── components/
│   │   ├── layout/
│   │   │   ├── Header.jsx
│   │   │   ├── TabNavigation.jsx
│   │   │   └── DataStatusBar.jsx
│   │   ├── auth/
│   │   │   ├── LoginButton.jsx
│   │   │   └── UserProfile.jsx
│   │   ├── dashboard/
│   │   │   ├── PortfolioSummary.jsx
│   │   │   ├── PortfolioCharts.jsx
│   │   │   ├── DifferenceChart.jsx
│   │   │   └── AssetsTable.jsx
│   │   ├── settings/
│   │   │   ├── TickerSearch.jsx
│   │   │   ├── PopularTickers.jsx
│   │   │   ├── HoldingsEditor.jsx
│   │   │   └── AllocationEditor.jsx
│   │   ├── simulation/
│   │   │   ├── BudgetInput.jsx
│   │   │   └── SimulationResult.jsx
│   │   ├── data/
│   │   │   ├── ExportOptions.jsx
│   │   │   ├── ImportOptions.jsx
│   │   │   ├── GoogleDriveIntegration.jsx
│   │   │   └── DataErrorRecovery.jsx      # 新規: データ修復コンポーネント
│   │   └── common/
│   │       ├── CurrencyFormat.jsx
│   │       ├── NumberInput.jsx
│   │       ├── Modal.jsx
│   │       ├── ToastNotification.jsx
│   │       ├── DataSourceBadge.jsx
│   │       └── ErrorBoundary.jsx          # 新規: エラーバウンダリコンポーネント
│   ├── context/
│   │   ├── AuthContext.js                 # 修正: 認証フロー改善
│   │   └── PortfolioContext.js            # 修正: 暗号化/復号化処理強化
│   ├── hooks/
│   │   ├── useAuth.js
│   │   └── usePortfolioContext.js
│   ├── pages/
│   │   ├── Dashboard.jsx
│   │   ├── Settings.jsx
│   │   ├── Simulation.jsx
│   │   └── DataIntegration.jsx
│   ├── services/
│   │   ├── api.js                         # 修正: Google Drive API連携実装
│   │   └── marketDataService.js
│   ├── utils/
│   │   ├── formatters.js
│   │   └── fundUtils.js
│   ├── App.jsx                            # 修正: エラーバウンダリ追加
│   ├── index.js
│   ├── setupProxy.js
│   └── index.css
├── functions/
│   ├── alpha-vantage-proxy.js
│   └── mof-exchange-rate-proxy.js
├── package.json
├── tailwind.config.js
├── postcss.config.js
├── netlify.toml
└── .env.local
```

### 3.2 主要ファイルの役割（更新版）

- **App.jsx**: アプリケーションのルートコンポーネント、認証プロバイダー、ルーティング設定、エラーバウンダリ
- **context/AuthContext.js**: Google認証管理、PortfolioContextとの連携、認証フロー改善
- **context/PortfolioContext.js**: ポートフォリオ状態・ロジック管理、暗号化/復号化処理強化
- **hooks/useAuth.js**: 認証状態管理フック
- **hooks/usePortfolioContext.js**: ポートフォリオコンテキスト使用フック
- **utils/fundUtils.js**: ファンドタイプ判定と手数料率推定のユーティリティ関数
- **setupProxy.js**: 開発環境用APIプロキシ設定
- **services/api.js**: 市場データ取得とGoogle Drive API連携（Fetch API使用）
- **components/common/ErrorBoundary.jsx**: アプリケーションエラーのキャッチと表示
- **public/index.html**: Google API Client Libraryを読み込み

## 4. データモデル（更新版）

### 4.1 Asset（保有資産）
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', 'ティッカー固有の情報', 'ファンドタイプからの推定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string; // 最終更新日時
  source?: string; // データソース ('Alpha Vantage', 'Fallback')
}
```

### 4.2 TargetAllocation（目標配分）
```typescript
interface TargetAllocation {
  id: string;
  name: string;
  ticker: string;
  targetPercentage: number;
}
```

### 4.3 SimulationResult（シミュレーション結果）
```typescript
interface SimulationResult {
  id: string;
  name: string;
  ticker: string;
  price: number;
  currency: string;
  targetPercentage: number;
  currentAmount: number;
  targetAmount: number;
  additionalAmount: number;
  additionalUnits: number; // 小数点以下4桁対応
  purchaseAmount: number;
  remark?: string;
}
```

### 4.4 FundTypes（ファンドタイプ）
```typescript
enum FundTypes {
  INDEX_JP = 'インデックス（日本）',
  INDEX_US = 'インデックス（米国）',
  INDEX_GLOBAL = 'インデックス（グローバル）',
  ACTIVE_JP = 'アクティブ（日本）',
  ACTIVE_US = 'アクティブ（米国）',
  ACTIVE_GLOBAL = 'アクティブ（グローバル）',
  ETF_JP = 'ETF（日本）',
  ETF_US = 'ETF（米国）',
  REIT_JP = 'REIT（日本）',
  REIT_US = 'REIT（米国）',
  CRYPTO = '暗号資産関連',
  BOND = '債券',
  STOCK = '個別株',
  UNKNOWN = '不明'
}
```

### 4.5 ローカルストレージデータ形式（更新版）
```typescript
interface PortfolioData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: number;
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

### 4.6 エラーバウンダリ状態（新規）
```typescript
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}
```

## 5. データ永続化と認証連携（更新版）

### 5.1 ローカルストレージによるデータ保持（更新版）
- **データ暗号化**: URIエンコード + Base64エンコーディングによる安全な暗号化
- **保存タイミング**: 
  - ユーザーアクションによるデータ変更時（自動保存）
  - 明示的な保存操作時
  - Google Driveとの同期時
- **読み込みタイミング**:
  - アプリケーション初期化時
  - ユーザーによる明示的な読み込み操作時
- **フォールバック処理**: 新形式で復号化に失敗した場合、古い形式での復号化を試行

```javascript
// 改良版データ暗号化関数
const encryptData = (data) => {
  try {
    const jsonString = JSON.stringify(data);
    return btoa(encodeURIComponent(jsonString)); // URI化してからBase64エンコード
  } catch (error) {
    console.error('データの暗号化に失敗しました', error);
    return null;
  }
};

// 改良版データ復号化関数
const decryptData = (encryptedData) => {
  try {
    const jsonString = decodeURIComponent(atob(encryptedData)); // Base64デコードしてからURI復号
    return JSON.parse(jsonString);
  } catch (error) {
    console.error('データの復号化に失敗しました', error);
    // フォールバック処理 - 古い形式を試行
    try {
      const jsonString = atob(encryptedData);
      return JSON.parse(jsonString);
    } catch (fallbackError) {
      console.error('フォールバック復号化も失敗しました', fallbackError);
      return null;
    }
  }
};
```

### 5.2 Google認証とデータ同期（更新版）
- **認証フロー**: Google Identity Services APIを使用した最新のOAuth 2.0認証
- **認証情報の保存**: ローカルストレージにJWTトークンを保存
- **有効期限チェック**: トークン有効期限の確認と自動ログアウト
- **コンテキスト連携**: AuthContextとPortfolioContextの相互参照
- **アクセストークン管理**: Drive API用のアクセストークンを別途管理
- **データソース管理**:
  - ログイン時: クラウドデータを優先
  - ログアウト時: ローカルデータを使用
  - データ競合時: 最新のタイムスタンプを持つデータを優先

```javascript
// Google Identity Services APIによるアクセストークン取得
async function getGoogleAccessToken() {
  return new Promise((resolve, reject) => {
    try {
      if (window.google && window.google.accounts && window.google.accounts.oauth2) {
        const tokenClient = window.google.accounts.oauth2.initTokenClient({
          client_id: GOOGLE_CLIENT_ID,
          scope: 'https://www.googleapis.com/auth/drive.file',
          callback: (tokenResponse) => {
            if (tokenResponse && tokenResponse.access_token) {
              console.log('[API] New access token acquired');
              resolve(tokenResponse.access_token);
            } else {
              console.warn('[API] No access token in response');
              resolve(null);
            }
          },
          error_callback: (error) => {
            console.error('[API] Error getting token:', error);
            reject(error);
          }
        });
        
        // トークンをリクエスト
        tokenClient.requestAccessToken({ prompt: '' });
      } else {
        console.warn('[API] Google OAuth API not available');
        resolve(null);
      }
    } catch (error) {
      console.error('[API] Error in getGoogleAccessToken:', error);
      reject(error);
    }
  });
}
```

## 6. 手数料計算と銘柄判定（更新なし）

### 6.1 銘柄タイプ判定ロジック
銘柄のティッカーシンボルや名前からファンドタイプを判定する機能を実装しています：

- **個別株の判定**:
  - 日本株: 4桁+.T形式でないもの
  - 米国株: 1-5文字のティッカーで、既知のETFやファンドに該当しないもの
  - ETF、インデックスファンド、REIT、債券ファンド、暗号資産などに該当しないもの

- **ETFの判定**:
  - 日本ETF: 1から始まる4桁の数字 + .T形式（例: 1306.T）
  - 米国ETF: 既知のETFリストに含まれる、または名前にETFを含む

- **インデックスファンドの判定**:
  - 名前に「index」「インデックス」「日経」「topix」「S&P」などを含む

- **REITの判定**:
  - 名前に「REIT」「リート」「不動産投資」などを含む

### 6.2 手数料率推定ロジック
銘柄タイプに基づいて年間手数料率を推定します：

- 個別株: 常に0%（ユーザーによる変更不可）
- インデックスファンド（日本）: 0.3%
- インデックスファンド（米国）: 0.15%
- インデックスファンド（グローバル）: 0.25%
- アクティブファンド（日本）: 1.5%
- アクティブファンド（米国）: 0.75%
- アクティブファンド（グローバル）: 1.0%
- ETF（日本）: 0.22%
- ETF（米国）: 0.12%
- REIT: 0.5-0.6%
- その他: 0.5%（デフォルト値）

### 6.3 特定銘柄の手数料情報データベース
人気のETFやファンドについては、より正確な手数料情報をアプリケーション内のデータベースから取得します：

```javascript
// 主要ETFの例
'SPY': 0.09,  // SPDR S&P 500 ETF
'VOO': 0.03,  // Vanguard S&P 500 ETF
'VTI': 0.03,  // Vanguard Total Stock Market ETF
'1306.T': 0.11, // TOPIX ETF
'1320.T': 0.16, // 日経225 ETF
```

### 6.4 年間手数料の計算
保有資産ごとの年間手数料を計算し、合計します：

```javascript
// 年間手数料の計算
const annualFees = currentAssets.reduce((sum, asset) => {
  // 個別株は手数料を0にする
  if (asset.fundType === FUND_TYPES.STOCK || asset.isStock) {
    return sum;
  }
  
  let assetValue = asset.price * asset.holdings;
  
  // 通貨換算
  if (asset.currency !== baseCurrency) {
    if (baseCurrency === 'JPY' && asset.currency === 'USD') {
      assetValue *= exchangeRate.rate;
    } else if (baseCurrency === 'USD' && asset.currency === 'JPY') {
      assetValue /= exchangeRate.rate;
    }
  }
  
  return sum + (assetValue * (asset.annualFee || 0) / 100);
}, 0);
```

## 7. 主要コンポーネントの実装詳細（更新版）

### 7.1 新しい人気銘柄リスト
```javascript
// インデックスファンド・ETF
const POPULAR_FUNDS = [
  { ticker: '2533106', name: 'eMAXIS Slim 全世界株式（オール・カントリー）' },
  { ticker: '2531108', name: 'eMAXIS Slim 米国株式（S&P500）' },
  { ticker: 'VOO', name: 'Vanguard S&P 500 ETF' },
  { ticker: 'VXUS', name: 'Vanguard Total International Stock ETF' },
  { ticker: 'GLD', name: 'SPDR Gold Shares' },
  { ticker: 'LQD', name: 'iShares iBoxx $ Investment Grade Corporate Bond ETF' }
];

// 個別株
const POPULAR_STOCKS = [
  { ticker: 'AAPL', name: 'アップル' },
  { ticker: 'NVDA', name: 'エヌビディア' },
  { ticker: 'MSFT', name: 'マイクロソフト' }
];
```

### 7.2 HoldingsEditor（保有資産編集）
- 保有資産の編集UIを提供
- 保有数量の編集（小数点以下4桁対応）
- 手数料編集は不可（読み取り専用で表示）
- 銘柄タイプの表示
- 手数料情報の出所を表示（個別株、推定値、固有情報）
- 銘柄タイプに応じたUIの切り替え（個別株は灰色背景）

### 7.3 DataSyncStatus（更新版）
- データ同期状況の表示
- データソース（ローカル/クラウド）の表示
- 最終同期時刻の表示
- 同期ボタンの提供
- クラウド保存/読み込みボタンの提供
- エラー発生時の回復オプション表示

### 7.4 GoogleDriveIntegration（更新版）
- Googleアカウント連携UI
- Google Identity Services APIによる最新の認証フロー
- クラウドへのデータ保存機能（Fetch API使用）
- クラウドからのデータ読み込み機能
- データ同期機能（ローカルとクラウドの統合）
- 認証状態に応じたUI切り替え
- エラーハンドリングの強化

### 7.5 ErrorBoundary（新規）
- アプリケーション全体を保護するエラーバウンダリ
- 予期しないエラーをキャッチしてUIに表示
- リロードボタンによる回復オプション提供
- エラー詳細情報のログ出力
- ユーザーフレンドリーなエラー表示画面

## 8. APIとデータ取得（更新版）

### 8.1 市場データ取得
- Alpha Vantage APIを使用して最新価格を取得
- 銘柄データ取得時に銘柄タイプと手数料情報も自動推定
- 個別株は手数料率0%として扱う

```javascript
// 銘柄データの取得と手数料情報の推定
export async function fetchTickerData(ticker) {
  // Alpha Vantageから価格データを取得
  
  // ファンド情報の取得（種類と手数料率の推定）
  const fundInfo = extractFundInfo(ticker, name);
  const fundType = guessFundType(ticker, name);
  const feeInfo = estimateAnnualFee(ticker, name);
  
  // 個別株かどうかを判定
  const isStock = fundType === FUND_TYPES.STOCK;
  
  // 個別株の場合は手数料を必ず0に設定
  const annualFee = isStock ? 0 : feeInfo.fee;
  
  return {
    // 銘柄データと手数料情報
  };
}
```

### 8.2 Google Drive API連携（新規）
- Google Identity Services APIを使用した最新の認証フロー
- ドライブAPIへの直接アクセス（Fetch API使用）
- 適切なスコープを持つアクセストークン取得
- エラーハンドリングの強化

```javascript
// Googleドライブにデータを保存
export async function saveToGoogleDrive(data, userData, filename = 'portfolio_data.json') {
  try {
    // 新しいアクセストークンを取得
    const newToken = await getGoogleAccessToken();
    if (!newToken) {
      return { success: false, message: 'アクセストークンの取得に失敗しました' };
    }
    
    // メタデータとファイル内容の準備
    const metadata = {
      name: filename,
      mimeType: 'application/json'
    };
    
    // JSONデータを文字列に変換
    const jsonContent = JSON.stringify(data);
    const blob = new Blob([jsonContent], { type: 'application/json' });
    
    // FormDataオブジェクトを作成
    const formData = new FormData();
    formData.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    formData.append('file', blob);
    
    // APIリクエストを実行
    const response = await fetch(
      'https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${newToken}`
        },
        body: formData
      }
    );
    
    // 結果の処理
    const result = await response.json();
    
    return {
      success: true,
      message: 'データを保存しました',
      fileId: result.id,
      fileName: result.name
    };
  } catch (error) {
    return { 
      success: false, 
      message: `Googleドライブへの保存に失敗しました: ${error.message}` 
    };
  }
}
```

### 8.3 手数料情報の自動更新
- 銘柄追加時に手数料情報を自動取得・推定
- 市場データ更新時に手数料情報も更新
- 手数料情報に変更があった場合は通知で表示

## 9. UI操作フロー（更新版）

### 9.1 初期化フロー（更新版）
1. アプリケーション起動
2. `PortfolioProvider` と `AuthProvider` の初期化
3. ContextConnectorによるコンテキスト間連携の確立
4. ローカルストレージからのデータ読み込み（エラーハンドリング強化）
5. トークンストレージからの認証情報読み込み
6. データがあれば状態を更新し、UIに反映
7. エラー発生時はエラーバウンダリでキャッチ

```javascript
// 初期化処理（エラーハンドリング強化版）
useEffect(() => {
  try {
    console.log('データの初期化を開始...');
    const localData = loadFromLocalStorage();
    
    if (localData) {
      // 各状態を更新
      setBaseCurrency(localData.baseCurrency);
      setExchangeRate(localData.exchangeRate);
      // その他のデータ適用
      
      addNotification('前回のデータを読み込みました', 'info');
    } else {
      console.log('ローカルストレージにデータがありませんでした。初期状態を使用します。');
    }
  } catch (error) {
    console.error('データの初期化中にエラーが発生しました:', error);
    addNotification(`データの初期化中にエラーが発生しました: ${error.message}`, 'error');
  } finally {
    setInitialized(true); // エラーが発生しても初期化完了とマークする
  }
}, [loadFromLocalStorage, addNotification]);
```

### 9.2 銘柄追加フロー
1. ユーザーが銘柄シンボルを入力
2. addTicker関数を呼び出し
3. Alpha Vantage APIからデータ取得
4. 銘柄タイプを判定し、手数料情報を推定
5. 個別株の場合は手数料を0%に設定
6. 保有資産と目標配分リストに追加
7. データをローカルストレージに自動保存
8. 手数料情報の通知を表示

### 9.3 保有数量編集フロー
1. ユーザーが保有数量の編集を選択
2. 直接入力の場合：任意の数値（小数点以下4桁まで）を入力可能
3. スピンボタン操作の場合：整数単位（1以上）での増減のみ可能
4. updateHoldings関数を呼び出し
5. データをローカルストレージに自動保存
6. UI更新と結果通知

### 9.4 データ同期フロー（更新版）
1. ユーザーが同期ボタンをクリック
2. Google Identity Services APIから新しいアクセストークンを取得
3. ローカルデータとクラウドデータを比較
4. タイムスタンプに基づいて最新データを特定
5. 最新データを状態に適用
6. ローカルストレージとクラウド両方にデータを保存
7. 同期状態表示の更新
8. 結果通知の表示

### 9.5 エラー回復フロー（新規）
1. エラーが発生するとエラーバウンダリがキャッチ
2. ユーザーにエラー内容と回復オプションを提示
3. ユーザーがリロードボタンをクリック
4. アプリケーションを再読み込み
5. または、データ修復機能を使用してローカルストレージをクリア

```javascript
// エラーバウンダリコンポーネント内のレンダリング部分
render() {
  if (this.state.hasError) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-6 rounded-lg shadow-md max-w-md">
          <h2 className="text-red-600 text-xl mb-4">エラーが発生しました</h2>
          <p className="mb-2">申し訳ありませんが、アプリケーションにエラーが発生しました。</p>
          <p className="text-gray-700 mb-4">詳細: {this.state.error?.message || '不明なエラー'}</p>
          <button
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            onClick={() => window.location.reload()}
          >
            リロードする
          </button>
        </div>
      </div>
    );
  }
  
  return this.props.children;
}
```

## 10. エラー処理と制約（更新版）

### 10.1 個別株の手数料制約
- 個別株の年間手数料率は常に0%
- 手数料率はすべてのファンドタイプで編集不可（読み取り専用）
- 手数料情報は市場データ更新時に自動的に確認・更新

### 10.2 データインポート時の処理
- インポートしたデータ内の個別株の手数料率を0%に修正
- 銘柄タイプと手数料情報が欠けている場合は自動推定
- インポート後にローカルストレージに自動保存

### 10.3 データ同期時の処理（更新版）
- 認証失敗時にエラー通知と適切なフォールバック
- データ競合時にタイムスタンプベースの解決
- アクセストークン取得失敗時の再認証プロセス
- 同期失敗時にエラー情報の詳細表示

### 10.4 アプリケーションエラー対応（新規）
- エラーバウンダリによる予期しないエラーのキャッチ
- エラー発生時のユーザーフレンドリーな表示
- リロードによる簡単な回復オプション
- データ修復機能によるデータ関連エラーの解消

### 10.5 データ暗号化/復号化エラー対応（新規）
- 暗号化プロセスでのエラーハンドリング強化
- 復号化失敗時のフォールバック処理
- 古い形式のデータにも対応する互換性処理
- データ構造検証による無効データの検出

## 改訂履歴
| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/12 | 初版作成 |  |
| 2.0 | 2025/03/16 | 環境設定と依存関係の更新 |  |
| 3.0 | 2025/03/17 | jwt-decode対応・プロキシ設定・ESLint設定の改訂 |  |
| 4.0 | 2025/03/18 | Alpha Vantage API連携強化・環境変数名統一・データフォールバック機構拡充 |  |
| 5.0 | 2025/03/19 | 銘柄タイプ自動判定と年間手数料の自動推定機能追加 |  |
| 6.0 | 2025/03/20 | 個別株の手数料固定（0%）とファンド手数料計算ロジックの修正 |  |
| 7.0 | 2025/03/21 | 人気銘柄リストの更新 |  |
| 8.0 | 2025/03/25 | ローカルストレージによるデータ保持機能とGoogle認証連携強化 |  |
| 9.0 | 2025/03/31 | データ暗号化/復号化処理の強化、Google Drive API連携改善、エラーバウンダリ導入、認証フロー更新 |  |

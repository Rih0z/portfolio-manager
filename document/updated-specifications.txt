# ポートフォリオマネージャー 仕様書（更新版3.1）

**最終更新日時:** 2025/03/19 15:15

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。GoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。また、ブラウザのローカルストレージを活用したデータ永続化により、アプリ利用時の利便性を向上させています。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンドなど）
- 年間手数料率の自動推定と計算（個別株は0%固定）
- 年間配当金の計算と配当情報の管理
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ保持（URIエンコード+Base64による安全な暗号化）
- Google認証・Googleドライブ連携（Google Identity Services API対応）
- 市場データの自動取得（Alpha Vantageをプライマリソース、フォールバック値をバックアップとして使用）
- iOS風タブバーによるナビゲーション
- 自動消去機能付き通知システム
- エラーバウンダリによるアプリケーション耐障害性向上

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x, Fetch API
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（URIエンコード+Base64暗号化）
- **クラウド連携**: Google Drive API v3

## 2. 環境設定

### 2.1 必要なファイル
- **package.json**: 依存関係とスクリプト定義
- **tailwind.config.js**: Tailwind CSSの設定
- **postcss.config.js**: PostCSSの設定
- **netlify.toml**: Netlifyデプロイとサーバーレス関数の設定
- **.env.local**: 環境変数設定（ローカル開発用）
- **src/setupProxy.js**: プロキシ設定（API連携用）
- **src/utils/fundUtils.js**: ファンドタイプと手数料情報、配当情報のユーティリティ関数
- **public/index.html**: 基本HTMLとGoogle APIスクリプトの読み込み

### 2.2 環境変数
```
# Google OAuth認証用クライアントID
REACT_APP_GOOGLE_CLIENT_ID=<YOUR_GOOGLE_CLIENT_ID>

# Google API Key
REACT_APP_GOOGLE_API_KEY=<YOUR_GOOGLE_API_KEY>

# Alpha Vantage API
ALPHA_VANTAGE_API_KEY=<YOUR_API_KEY>
```

### 2.3 Netlify Functions設定
netlify.toml（最新版）:
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/api/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# API経由でFunctionsにアクセス
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

# SPAのためのリダイレクト
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

## 3. アプリケーションの構造

### 3.1 ディレクトリ構造（更新版）
```
portfolio-manager/
├── public/
│   ├── index.html      # Google API Client Libraryスクリプト追加
│   └── favicon.ico
├── src/
│   ├── components/
│   │   ├── layout/
│   │   │   ├── Header.jsx
│   │   │   ├── TabNavigation.jsx
│   │   │   └── DataStatusBar.jsx
│   │   ├── auth/
│   │   │   ├── LoginButton.jsx
│   │   │   └── UserProfile.jsx
│   │   ├── dashboard/
│   │   │   ├── PortfolioSummary.jsx      # 配当情報の表示を追加
│   │   │   ├── PortfolioCharts.jsx
│   │   │   ├── DifferenceChart.jsx
│   │   │   └── AssetsTable.jsx           # 配当情報の列を追加
│   │   ├── settings/
│   │   │   ├── TickerSearch.jsx
│   │   │   ├── PopularTickers.jsx
│   │   │   ├── HoldingsEditor.jsx        # 配当情報の表示と編集機能を追加
│   │   │   └── AllocationEditor.jsx
│   │   ├── simulation/
│   │   │   ├── BudgetInput.jsx
│   │   │   └── SimulationResult.jsx
│   │   ├── data/
│   │   │   ├── ExportOptions.jsx
│   │   │   ├── ImportOptions.jsx
│   │   │   ├── GoogleDriveIntegration.jsx # 認証フロー改善
│   │   │   └── DataErrorRecovery.jsx      # データ修復コンポーネント
│   │   └── common/
│   │       ├── CurrencyFormat.jsx
│   │       ├── NumberInput.jsx
│   │       ├── Modal.jsx
│   │       ├── ToastNotification.jsx       # 自動消去機能を追加
│   │       ├── DataSourceBadge.jsx
│   │       └── ErrorBoundary.jsx          
│   ├── context/
│   │   ├── AuthContext.js                 # 認証フロー改善
│   │   └── PortfolioContext.js            # 配当情報処理、通知自動消去、初期化最適化
│   ├── hooks/
│   │   ├── useAuth.js
│   │   └── usePortfolioContext.js
│   ├── pages/
│   │   ├── Dashboard.jsx
│   │   ├── Settings.jsx
│   │   ├── Simulation.jsx
│   │   └── DataIntegration.jsx
│   ├── services/
│   │   ├── api.js                         # Google Drive API連携と配当データ取得
│   │   └── marketDataService.js           # 配当情報取得機能追加
│   ├── utils/
│   │   ├── formatters.js
│   │   └── fundUtils.js                   # 配当情報推定機能追加
│   ├── App.jsx                            
│   ├── index.js
│   ├── setupProxy.js
│   └── index.css
├── functions/
│   ├── alpha-vantage-proxy.js
│   └── mof-exchange-rate-proxy.js
├── package.json
├── tailwind.config.js
├── postcss.config.js
├── netlify.toml
└── .env.local
```

### 3.2 主要ファイルの役割（更新版）

- **App.jsx**: アプリケーションのルートコンポーネント、認証プロバイダー、ルーティング設定、エラーバウンダリ
- **context/AuthContext.js**: Google認証管理、PortfolioContextとの連携、認証フロー改善
- **context/PortfolioContext.js**: ポートフォリオ状態・ロジック管理、配当情報処理、通知自動消去機能、初期化の最適化
- **hooks/useAuth.js**: 認証状態管理フック
- **hooks/usePortfolioContext.js**: ポートフォリオコンテキスト使用フック
- **utils/fundUtils.js**: ファンドタイプ判定、手数料率推定、配当情報推定のユーティリティ関数
- **setupProxy.js**: 開発環境用APIプロキシ設定
- **services/api.js**: 市場データ取得とGoogle Drive API連携、配当データ取得
- **services/marketDataService.js**: 銘柄データと配当情報の取得、ファンドタイプ判定
- **components/common/ErrorBoundary.jsx**: アプリケーションエラーのキャッチと表示
- **components/common/ToastNotification.jsx**: 通知メッセージ表示システム（自動消去機能付き）
- **components/dashboard/PortfolioSummary.jsx**: 資産概要と配当情報サマリーの表示
- **components/dashboard/AssetsTable.jsx**: 資産詳細と配当情報の表示
- **components/settings/HoldingsEditor.jsx**: 保有資産の編集と配当情報表示
- **public/index.html**: Google API Client Libraryを読み込み

## 4. データモデル（更新版）

### 4.1 Asset（保有資産）
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', 'ティッカー固有の情報', 'ファンドタイプからの推定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string; // 最終更新日時
  source?: string; // データソース ('Alpha Vantage', 'Fallback')
  // 配当情報の追加
  dividendYield: number; // 配当利回り（%）
  hasDividend: boolean; // 配当があるかどうか
  dividendFrequency: string; // 配当頻度 ('monthly', 'quarterly', 'semi-annual', 'annual')
  dividendIsEstimated: boolean; // 配当情報が推定値かどうか
}
```

### 4.2 TargetAllocation（目標配分）
```typescript
interface TargetAllocation {
  id: string;
  name: string;
  ticker: string;
  targetPercentage: number;
}
```

### 4.3 SimulationResult（シミュレーション結果）
```typescript
interface SimulationResult {
  id: string;
  name: string;
  ticker: string;
  price: number;
  currency: string;
  targetPercentage: number;
  currentAmount: number;
  targetAmount: number;
  additionalAmount: number;
  additionalUnits: number; // 小数点以下4桁対応
  purchaseAmount: number;
  remark?: string;
}
```

### 4.4 通知メッセージ（新規）
```typescript
interface Notification {
  id: number; // タイムスタンプをIDとして使用
  message: string; // 表示メッセージ
  type: 'info' | 'success' | 'warning' | 'error'; // 通知タイプ
}
```

### 4.5 FundTypes（ファンドタイプ）
```typescript
enum FundTypes {
  INDEX_JP = 'インデックス（日本）',
  INDEX_US = 'インデックス（米国）',
  INDEX_GLOBAL = 'インデックス（グローバル）',
  ACTIVE_JP = 'アクティブ（日本）',
  ACTIVE_US = 'アクティブ（米国）',
  ACTIVE_GLOBAL = 'アクティブ（グローバル）',
  ETF_JP = 'ETF（日本）',
  ETF_US = 'ETF（米国）',
  REIT_JP = 'REIT（日本）',
  REIT_US = 'REIT（米国）',
  CRYPTO = '暗号資産関連',
  BOND = '債券',
  STOCK = '個別株',
  UNKNOWN = '不明'
}
```

### 4.6 DividendFrequency（配当頻度）
```typescript
enum DividendFrequency {
  MONTHLY = 'monthly', // 毎月
  QUARTERLY = 'quarterly', // 四半期
  SEMI_ANNUAL = 'semi-annual', // 半年
  ANNUAL = 'annual', // 年1回
  UNKNOWN = 'unknown' // 不明
}
```

### 4.7 ローカルストレージデータ形式（更新版）
```typescript
interface PortfolioData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: number;
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

## 5. データ永続化と認証連携（更新版）

### 5.1 ローカルストレージによるデータ保持（更新版）
- **データ暗号化**: URIエンコード + Base64エンコーディングによる安全な暗号化
- **保存タイミング**: 
  - ユーザーアクションによるデータ変更時（自動保存）
  - 明示的な保存操作時
  - Google Driveとの同期時
- **読み込みタイミング**:
  - アプリケーション初期化時
  - ユーザーによる明示的な読み込み操作時
- **フォールバック処理**: 新形式で復号化に失敗した場合、古い形式での復号化を試行
- **データ構造検証**: 復号化後のデータ構造を検証し、有効性を確認
- **重複初期化防止**: 初期化済みフラグによる重複実行の回避

```javascript
// 初期化処理の最適化（重複実行防止）
const initializeData = useCallback(() => {
  // 既に初期化済みなら処理をスキップ
  if (initialized) return;
  
  try {
    console.log('データの初期化を開始...');
    const localData = loadFromLocalStorage();
    
    // データ処理...
    
    // 初期化完了をマーク
    setInitialized(true);
  } catch (error) {
    console.error('データの初期化中にエラーが発生しました:', error);
    setInitialized(true); // エラーが発生しても初期化完了とマークする
  }
}, [loadFromLocalStorage, addNotification, validateAssetTypes, saveToLocalStorage, initialized]);
```

### 5.2 Google認証とデータ同期（更新版）
- **認証フロー**: Google Identity Services APIを使用した最新のOAuth 2.0認証
- **認証情報の保存**: ローカルストレージにJWTトークンを保存
- **有効期限チェック**: トークン有効期限の確認と自動ログアウト
- **コンテキスト連携**: AuthContextとPortfolioContextの相互参照
- **アクセストークン管理**: Drive API用のアクセストークンを別途管理
- **データソース管理**:
  - ログイン時: クラウドデータを優先
  - ログアウト時: ローカルデータを使用
  - データ競合時: 最新のタイムスタンプを持つデータを優先

### 5.3 通知システムの実装（新規）
- **通知メッセージの構造**: ID、メッセージ内容、タイプ（情報、成功、警告、エラー）
- **表示位置**: 画面右下に固定表示（z-index: 50）
- **スタイリング**: タイプごとに異なる背景色とテキスト色
- **自動消去機能**: エラー以外の通知は5秒後に自動的に消去
- **手動消去ボタン**: すべての通知に×ボタンを表示
- **通知スタック**: 新しい通知が下に追加されるスタック表示

```javascript
// 通知を追加する関数（タイムアウト付き）
const addNotification = useCallback((message, type = 'info') => {
  const id = Date.now();
  setNotifications(prev => [...prev, { id, message, type }]);
  
  // 情報・成功・警告通知は自動消去（5秒後）
  if (type !== 'error') {
    setTimeout(() => {
      removeNotification(id);
    }, 5000);
  }
  
  return id;
}, []);

// 通知を削除する関数
const removeNotification = useCallback((id) => {
  setNotifications(prev => prev.filter(notification => notification.id !== id));
}, []);
```

## 6. 手数料計算と配当情報管理（更新版）

### 6.1 銘柄タイプ判定ロジック
銘柄のティッカーシンボルや名前からファンドタイプを判定する機能を実装しています：

- **個別株の判定**:
  - 日本株: 4桁+.T形式でないもの
  - 米国株: 1-5文字のティッカーで、既知のETFやファンドに該当しないもの
  - ETF、インデックスファンド、REIT、債券ファンド、暗号資産などに該当しないもの

- **ETFの判定**:
  - 日本ETF: 1から始まる4桁の数字 + .T形式（例: 1306.T）
  - 米国ETF: 既知のETFリストに含まれる、または名前にETFを含む

- **インデックスファンドの判定**:
  - 名前に「index」「インデックス」「日経」「topix」「S&P」などを含む

- **REITの判定**:
  - 名前に「REIT」「リート」「不動産投資」などを含む

### 6.2 手数料率推定ロジック
銘柄タイプに基づいて年間手数料率を推定します：

- 個別株: 常に0%（ユーザーによる変更不可）
- インデックスファンド（日本）: 0.3%
- インデックスファンド（米国）: 0.15%
- インデックスファンド（グローバル）: 0.25%
- アクティブファンド（日本）: 1.5%
- アクティブファンド（米国）: 0.75%
- アクティブファンド（グローバル）: 1.0%
- ETF（日本）: 0.22%
- ETF（米国）: 0.12%
- REIT: 0.5-0.6%
- その他: 0.5%（デフォルト値）

### 6.3 配当情報推定ロジック（更新）
銘柄タイプや名前から配当情報を推定します：

- **配当利回り推定**:
  - 既知の銘柄: データベースから正確な値を取得
  - 高配当ETF: 3.0-4.0%
  - 米国ETF: 1.5%（平均）
  - 日本ETF: 1.8%（平均）
  - 米国REITs: 4.0%（平均）
  - 日本REITs: 3.5%（平均）
  - 債券ファンド: 2.5%（平均）
  - 個別株: 0%（情報不足のため）

- **配当の有無判定**:
  - 金ETF（GLD）など一部の銘柄: 配当なし
  - 暗号資産関連: 配当なし
  - ETF、インデックスファンド、REIT、債券: 通常配当あり
  - 名前に「dividend」「配当」「yield」「income」を含む: 配当あり
  - その他: 個別判断

- **配当頻度推定**:
  - 名前に基づいて推定（「monthly」「quarterly」など）
  - デフォルト: 四半期（quarterly）

### 6.4 特定銘柄の配当情報データベース
人気のETFやファンドについては、より正確な配当情報をアプリケーション内のデータベースから取得します。

### 6.5 年間配当金の計算
保有資産ごとの年間配当金を計算し、合計します：

```javascript
// 年間配当金の計算
const annualDividends = currentAssets.reduce((sum, asset) => {
  // 配当がない場合はスキップ
  if (!asset.hasDividend) {
    return sum;
  }
  
  let assetValue = asset.price * asset.holdings;
  
  // 通貨換算
  if (asset.currency !== baseCurrency) {
    if (baseCurrency === 'JPY' && asset.currency === 'USD') {
      assetValue *= exchangeRate.rate;
    } else if (baseCurrency === 'USD' && asset.currency === 'JPY') {
      assetValue /= exchangeRate.rate;
    }
  }
  
  return sum + (assetValue * (asset.dividendYield || 0) / 100);
}, 0);
```

## 7. 主要コンポーネントの実装詳細（更新版）

### 7.1 PortfolioSummary（更新版）
- 総資産、銘柄数、年間手数料の表示
- 年間配当金とポートフォリオ全体の配当利回りの表示
- 最高手数料率と最低手数料率の銘柄を表示
- 最高配当利回りの銘柄を表示
- ファンドタイプ別の手数料統計を表示
- ファンドタイプ別の配当金統計を表示
- 手数料と配当に関する説明を表示

### 7.2 AssetsTable（更新版）
- 保有資産の詳細テーブル表示
- 配当関連の列を追加（配当利回り、年間配当金）
- 配当頻度と配当情報源のバッジ表示
- データソースと銘柄タイプの表示
- 年間手数料の表示（個別株は0%）

### 7.3 ToastNotification（更新版）
- 通知メッセージの表示UI
- 通知タイプに応じた色分け
- 各通知に手動消去ボタン（×）を表示
- エラー以外の通知は5秒後に自動消去
- 画面右下に固定表示（z-index: 50）
- スタック表示（新しい通知が下に追加）

```jsx
<div className="fixed bottom-0 right-0 p-4 space-y-2 z-50">
  {notifications.map((notification) => (
    <div 
      key={notification.id}
      className={`p-3 rounded-md shadow-md text-sm ${
        notification.type === 'error' ? 'bg-red-100 text-red-700' :
        notification.type === 'warning' ? 'bg-yellow-100 text-yellow-700' :
        notification.type === 'success' ? 'bg-green-100 text-green-700' :
        'bg-blue-100 text-blue-700'
      }`}
    >
      <div className="flex justify-between items-start">
        <span>{notification.message}</span>
        <button 
          onClick={() => removeNotification(notification.id)}
          className="ml-2 text-gray-500 hover:text-gray-700"
        >
          &times;
        </button>
      </div>
    </div>
  ))}
</div>
```

### 7.4 DataSyncStatus（更新版）
- データ同期状況の表示
- データソース（ローカル/クラウド）の表示
- 最終同期時刻の表示
- 同期ボタンの提供
- クラウド保存/読み込みボタンの提供
- エラー発生時の回復オプション表示
- 同期操作に関する通知表示（自動消去機能付き）

### 7.5 GoogleDriveIntegration（更新版）
- Googleアカウント連携UI
- Google Identity Services APIによる最新の認証フロー
- クラウドへのデータ保存機能（Fetch API使用）
- クラウドからのデータ読み込み機能
- データ同期機能（ローカルとクラウドの統合）
- 認証状態に応じたUI切り替え
- エラーハンドリングの強化
- データ同期結果の通知表示（自動消去機能付き）

## 8. APIとデータ取得（更新版）

### 8.1 市場データ取得（更新版）
- Alpha Vantage APIを使用して最新価格を取得
- 銘柄データ取得時に銘柄タイプと手数料情報も自動推定
- 配当情報の自動推定と取得
- 個別株は手数料率0%として扱う
- データ取得結果の通知（5秒後に自動消去）

### 8.2 配当データの取得
- 銘柄情報から配当データを自動推定
- 特定銘柄のデータベースから正確な情報を取得
- 名前とティッカーパターンに基づいて判定
- 配当データ更新時の通知（自動消去機能付き）

### 8.3 Google Drive API連携（更新版）
- Google Identity Services APIを使用した最新の認証フロー
- ドライブAPIへの直接アクセス（Fetch API使用）
- 適切なスコープを持つアクセストークン取得
- エラーハンドリングの強化
- API操作結果の通知表示（自動消去機能付き）

### 8.4 手数料・配当情報の自動更新
- 銘柄追加時に手数料情報と配当情報を自動取得・推定
- 市場データ更新時に手数料情報と配当情報も更新
- 手数料情報に変更があった場合は通知で表示
- 配当情報に変更があった場合は通知で表示
- 変更通知は5秒後に自動消去

## 9. UI操作フロー（更新版）

### 9.1 初期化フロー（更新版）
1. アプリケーション起動
2. `PortfolioProvider` と `AuthProvider` の初期化
3. ContextConnectorによるコンテキスト間連携の確立
4. 初期化済みフラグをチェック（重複実行防止）
5. ローカルストレージからのデータ読み込み（エラーハンドリング強化）
6. トークンストレージからの認証情報読み込み
7. データがあれば状態を更新し、UIに反映
8. 配当情報が欠けている場合は初期値を設定
9. データ読み込み通知の表示（5秒後に自動消去）
10. 初期化完了のフラグを設定
11. エラー発生時はエラーバウンダリでキャッチ

### 9.2 通知表示フロー（新規）
1. 通知を表示する関数（`addNotification`）が呼び出される
2. 通知のタイプ（info, success, warning, error）とメッセージを受け取る
3. タイムスタンプをIDとして新しい通知オブジェクトを作成
4. 通知を表示用配列に追加
5. エラータイプ以外の通知は5秒後に自動消去するタイマーを設定
6. 通知が画面右下に表示される
7. 自動消去タイマーの期限が切れるか、手動で×ボタンがクリックされると通知が消去される
8. 通知を表示配列から削除

### 9.3 銘柄追加フロー（更新版）
1. ユーザーが銘柄シンボルを入力
2. addTicker関数を呼び出し
3. Alpha Vantage APIからデータ取得
4. 銘柄タイプを判定し、手数料情報を推定
5. 配当情報を推定
6. 個別株の場合は手数料を0%に設定
7. 保有資産と目標配分リストに追加
8. データをローカルストレージに自動保存
9. 手数料・配当情報の通知を表示（5秒後に自動消去）

### 9.4 市場データ更新フロー（更新版）
1. ユーザーが更新ボタンをクリック
2. Alpha Vantage APIから最新価格データを取得
3. 銘柄タイプの確認と手数料情報の更新
4. 配当情報の更新
5. 手数料情報に変更があった場合は通知（5秒後に自動消去）
6. 配当情報に変更があった場合は通知（5秒後に自動消去）
7. データをローカルストレージに自動保存

### 9.5 データ同期フロー（更新版）
1. ユーザーが同期ボタンをクリック
2. Google Identity Services APIから新しいアクセストークンを取得
3. ローカルデータとクラウドデータを比較
4. タイムスタンプに基づいて最新データを特定
5. 最新データを状態に適用
6. 配当情報が欠けている場合は初期値を設定
7. ローカルストレージとクラウド両方にデータを保存
8. 同期状態表示の更新
9. 結果通知の表示（5秒後に自動消去）

## 10. エラー処理と制約（更新版）

### 10.1 個別株と配当の制約（更新版）
- 個別株の年間手数料率は常に0%
- 手数料率はすべてのファンドタイプで編集不可（読み取り専用）
- 配当情報は推定値として表示（特定銘柄を除く）
- 配当データが不明な場合は「なし」として表示

### 10.2 データインポート時の処理（更新版）
- インポートしたデータ内の個別株の手数料率を0%に修正
- 銘柄タイプと手数料情報が欠けている場合は自動推定
- 配当情報が欠けている場合は初期値を設定
- インポート後にローカルストレージに自動保存
- インポート結果の通知表示（5秒後に自動消去）

### 10.3 データ暗号化/復号化エラー対応（更新版）
- 暗号化プロセスでのエラーハンドリング強化
- 復号化失敗時のフォールバック処理
- 古い形式のデータにも対応する互換性処理
- データ構造検証による無効データの検出
- エラー詳細のログ出力と通知（エラー通知は手動消去まで表示）

### 10.4 通知システムの管理（新規）
- 通知の種類に応じた表示期間制御
  - エラー通知: 手動消去まで表示
  - 情報/成功/警告通知: 5秒後に自動消去
- 通知スタックの管理（古い通知を残しつつ新しい通知を追加）
- 通知の重複表示の防止（必要に応じてID管理）
- 初期化時の重複通知防止（初期化済みフラグによる制御）

## 改訂履歴
| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/6 | 初版作成 |  |
| 2.0 | 2025/03/7 | 環境設定と依存関係の更新 |  |
| 3.0 | 2025/03/8 | jwt-decode対応・プロキシ設定・ESLint設定の改訂 |  |
| 4.0 | 2025/03/08 14:25 | Alpha Vantage API連携強化・環境変数名統一・データフォールバック機構拡充 |  |
| 5.0 | 2025/03/10 11:20 | 銘柄タイプ自動判定と年間手数料の自動推定機能追加 |  |
| 6.0 | 2025/03/11 13:35 | 個別株の手数料固定（0%）とファンド手数料計算ロジックの修正 |  |
| 7.0 | 2025/03/12 16:50 | 人気銘柄リストの更新 |  |
| 8.0 | 2025/03/14 09:30 | ローカルストレージによるデータ保持機能とGoogle認証連携強化 |  |
| 9.0 | 2025/03/17 14:45 | データ暗号化/復号化処理の強化、Google Drive API連携改善、エラーバウンダリ導入、認証フロー更新 |  |
| 10.0 | 2025/03/18 15:30 | 配当情報の管理機能追加、銘柄タイプ判定ロジック強化、PortfolioSummaryとAssetsTableの配当情報表示追加、Google Drive API連携の安定性向上 |  |
| 3.1 | 2025/03/19 15:15 | 通知システムの自動消去機能追加（タイプ別）、初期化処理の重複実行防止機能追加、通知表示フローの詳細定義追加 |  |

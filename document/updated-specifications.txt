# ポートフォリオマネージャー 仕様書（更新版3.4）

**最終更新日時:** 2025/03/23 10:15

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。GoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。また、ブラウザのローカルストレージを活用したデータ永続化により、アプリ利用時の利便性を向上させています。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンドなど）
- 年間手数料率の自動推定と計算（個別株は0%固定）
- 年間配当金の計算と配当情報の管理
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ保持（URIエンコード+Base64による安全な暗号化）
- Google認証・Googleドライブ連携（Google Identity Services API対応）
- 市場データの自動取得（マルチソース対応：Alpha Vantage → Yahoo Finance → フォールバック値の順で試行）
- iOS風タブバーによるナビゲーション
- 自動消去機能付き通知システム
- エラーバウンダリによるアプリケーション耐障害性の向上

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x, Fetch API
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（URIエンコード+Base64暗号化）
- **クラウド連携**: Google Drive API v3
- **市場データ取得**: Alpha Vantage API, Yahoo Finance API（フォールバック）

## 2. 環境設定

### 2.1 必要なファイル
- **package.json**: 依存関係とスクリプト定義
- **tailwind.config.js**: Tailwind CSSの設定
- **postcss.config.js**: PostCSSの設定
- **netlify.toml**: Netlifyデプロイとサーバーレス関数の設定
- **.env.local**: 環境変数設定（ローカル開発用）
- **src/setupProxy.js**: プロキシ設定（API連携用）
- **src/utils/fundUtils.js**: ファンドタイプと手数料情報、配当情報のユーティリティ関数
- **public/index.html**: 基本HTMLとGoogle APIスクリプトの読み込み
- **functions/alpha-vantage-proxy.js**: Alpha Vantage APIプロキシ
- **functions/yahoo-finance-proxy.js**: Yahoo Finance APIプロキシ（JavaScript実装・新規）

### 2.2 環境変数
```
# Google OAuth認証用クライアントID
REACT_APP_GOOGLE_CLIENT_ID=<YOUR_GOOGLE_CLIENT_ID>

# Google API Key
REACT_APP_GOOGLE_API_KEY=<YOUR_GOOGLE_API_KEY>

# Alpha Vantage API
ALPHA_VANTAGE_API_KEY=<YOUR_API_KEY>
```

### 2.3 Netlify Functions設定
netlify.toml（最新版）:
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/api/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# API経由でFunctionsにアクセス
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

# Yahoo Financeプロキシ向けのリダイレクト（更新）
[[redirects]]
  from = "/api/yahoo-finance-proxy"
  to = "/.netlify/functions/yahoo-finance-proxy"
  status = 200
  force = true

# SPAのためのリダイレクト
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

## 3. アプリケーションの構造

### 3.1 ディレクトリ構造（更新版）
```
portfolio-manager/
├── public/
│   ├── index.html      # Google API Client Libraryスクリプト追加
│   └── favicon.ico
├── src/
│   ├── components/
│   │   ├── layout/
│   │   │   ├── Header.jsx
│   │   │   ├── TabNavigation.jsx
│   │   │   └── DataStatusBar.jsx
│   │   ├── auth/
│   │   │   ├── LoginButton.jsx
│   │   │   └── UserProfile.jsx
│   │   ├── dashboard/
│   │   │   ├── PortfolioSummary.jsx      # 配当情報の表示を追加
│   │   │   ├── PortfolioCharts.jsx
│   │   │   ├── DifferenceChart.jsx
│   │   │   └── AssetsTable.jsx           # 配当情報の列を追加
│   │   ├── settings/
│   │   │   ├── TickerSearch.jsx
│   │   │   ├── PopularTickers.jsx
│   │   │   ├── HoldingsEditor.jsx        # 配当情報の表示と編集機能を追加
│   │   │   └── AllocationEditor.jsx
│   │   ├── simulation/
│   │   │   ├── BudgetInput.jsx
│   │   │   └── SimulationResult.jsx
│   │   ├── data/
│   │   │   ├── ExportOptions.jsx
│   │   │   ├── ImportOptions.jsx
│   │   │   ├── GoogleDriveIntegration.jsx # 認証フロー改善
│   │   │   └── DataErrorRecovery.jsx      # データ修復コンポーネント
│   │   └── common/
│   │       ├── CurrencyFormat.jsx
│   │       ├── NumberInput.jsx
│   │       ├── Modal.jsx
│   │       ├── ToastNotification.jsx       # 自動消去機能を追加
│   │       ├── DataSourceBadge.jsx
│   │       └── ErrorBoundary.jsx          
│   ├── context/
│   │   ├── AuthContext.js                 # 認証フロー改善
│   │   └── PortfolioContext.js            # 配当情報処理、通知自動消去、初期化最適化
│   ├── hooks/
│   │   ├── useAuth.js
│   │   └── usePortfolioContext.js
│   ├── pages/
│   │   ├── Dashboard.jsx
│   │   ├── Settings.jsx
│   │   ├── Simulation.jsx
│   │   └── DataIntegration.jsx
│   ├── services/
│   │   ├── api.js                         # Google Drive API連携と配当データ取得
│   │   └── marketDataService.js           # 複数データソース対応、フォールバック機能追加
│   ├── utils/
│   │   ├── formatters.js
│   │   └── fundUtils.js                   # 配当情報推定機能追加
│   ├── App.jsx                            
│   ├── index.js
│   ├── setupProxy.js
│   └── index.css
├── functions/
│   ├── alpha-vantage-proxy.js            # Alpha Vantage APIプロキシ
│   ├── yahoo-finance-proxy.js            # Yahoo Finance APIプロキシ（新規）
│   ├── mof-exchange-rate-proxy.js        # 為替レートプロキシ
│   ├── yfinance-proxy.js                 # Python yfinance実行プロキシ（廃止予定）
│   └── python/                           # Pythonスクリプト（廃止予定）
│       ├── requirements.txt              # Python依存関係
│       └── yfinance_fetcher.py           # yfinanceデータ取得スクリプト
├── package.json
├── tailwind.config.js
├── postcss.config.js
├── netlify.toml
└── .env.local
```

### 3.2 主要ファイルの役割（更新版）

- **App.jsx**: アプリケーションのルートコンポーネント、認証プロバイダー、ルーティング設定、エラーバウンダリ
- **context/AuthContext.js**: Google認証管理、PortfolioContextとの連携、認証フロー改善
- **context/PortfolioContext.js**: ポートフォリオ状態・ロジック管理、配当情報処理、通知自動消去機能、初期化の最適化
- **hooks/useAuth.js**: 認証状態管理フック
- **hooks/usePortfolioContext.js**: ポートフォリオコンテキスト使用フック
- **utils/fundUtils.js**: ファンドタイプ判定、手数料率推定、配当情報推定のユーティリティ関数
- **setupProxy.js**: 開発環境用APIプロキシ設定
- **services/api.js**: 市場データ取得とGoogle Drive API連携、配当データ取得
- **services/marketDataService.js**: 銘柄データと配当情報の取得、マルチデータソース対応（Alpha Vantage→Yahoo Finance→フォールバック値）
- **functions/alpha-vantage-proxy.js**: Alpha Vantage APIプロキシ
- **functions/yahoo-finance-proxy.js**: Yahoo Finance APIプロキシ（JavaScript実装・新規）
- **components/common/ErrorBoundary.jsx**: アプリケーションエラーのキャッチと表示
- **components/common/ToastNotification.jsx**: 通知メッセージ表示システム（自動消去機能付き）
- **components/dashboard/PortfolioSummary.jsx**: 資産概要と配当情報サマリーの表示
- **components/dashboard/AssetsTable.jsx**: 資産詳細と配当情報の表示
- **components/settings/HoldingsEditor.jsx**: 保有資産の編集と配当情報表示
- **public/index.html**: Google API Client Libraryを読み込み

## 4. データモデル（更新版）

### 4.1 Asset（保有資産）
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', 'ティッカー固有の情報', 'ファンドタイプからの推定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string; // 最終更新日時
  source?: string; // 'Alpha Vantage' | 'Yahoo Finance' | 'Fallback'
  // 配当情報の追加
  dividendYield: number; // 配当利回り（%）
  hasDividend: boolean; // 配当があるかどうか
  dividendFrequency: string; // 配当頻度 ('monthly', 'quarterly', 'semi-annual', 'annual')
  dividendIsEstimated: boolean; // 配当情報が推定値かどうか
}
```

### 4.2 TargetAllocation（目標配分）
```typescript
interface TargetAllocation {
  id: string;
  name: string;
  ticker: string;
  targetPercentage: number;
}
```

### 4.3 SimulationResult（シミュレーション結果）
```typescript
interface SimulationResult {
  id: string;
  name: string;
  ticker: string;
  price: number;
  currency: string;
  targetPercentage: number;
  currentAmount: number;
  targetAmount: number;
  additionalAmount: number;
  additionalUnits: number; // 小数点以下4桁対応
  purchaseAmount: number;
  remark?: string;
}
```

### 4.4 通知メッセージ
```typescript
interface Notification {
  id: number; // タイムスタンプをIDとして使用
  message: string; // 表示メッセージ
  type: 'info' | 'success' | 'warning' | 'error'; // 通知タイプ
}
```

### 4.5 FundTypes（ファンドタイプ）
```typescript
enum FundTypes {
  INDEX_JP = 'インデックス（日本）',
  INDEX_US = 'インデックス（米国）',
  INDEX_GLOBAL = 'インデックス（グローバル）',
  ACTIVE_JP = 'アクティブ（日本）',
  ACTIVE_US = 'アクティブ（米国）',
  ACTIVE_GLOBAL = 'アクティブ（グローバル）',
  ETF_JP = 'ETF（日本）',
  ETF_US = 'ETF（米国）',
  REIT_JP = 'REIT（日本）',
  REIT_US = 'REIT（米国）',
  CRYPTO = '暗号資産関連',
  BOND = '債券',
  STOCK = '個別株',
  UNKNOWN = '不明'
}
```

### 4.6 DividendFrequency（配当頻度）
```typescript
enum DividendFrequency {
  MONTHLY = 'monthly', // 毎月
  QUARTERLY = 'quarterly', // 四半期
  SEMI_ANNUAL = 'semi-annual', // 半年
  ANNUAL = 'annual', // 年1回
  UNKNOWN = 'unknown' // 不明
}
```

### 4.7 ローカルストレージデータ形式
```typescript
interface PortfolioData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: number;
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

## 5. データ永続化と認証連携

### 5.1 ローカルストレージによるデータ保持
- **データ暗号化**: URIエンコード + Base64エンコーディングによる安全な暗号化
- **保存タイミング**: 
  - ユーザーアクションによるデータ変更時（自動保存）
  - 明示的な保存操作時
  - Google Driveとの同期時
- **読み込みタイミング**:
  - アプリケーション初期化時
  - ユーザーによる明示的な読み込み操作時
- **フォールバック処理**: 新形式で復号化に失敗した場合、古い形式での復号化を試行
- **データ構造検証**: 復号化後のデータ構造を検証し、有効性を確認
- **重複初期化防止**: 初期化済みフラグによる重複実行の回避

```javascript
// 初期化処理の最適化（重複実行防止）
const initializeData = useCallback(() => {
  // 既に初期化済みなら処理をスキップ
  if (initialized) return;
  
  try {
    console.log('データの初期化を開始...');
    const localData = loadFromLocalStorage();
    
    // データ処理...
    
    // 初期化完了をマーク
    setInitialized(true);
  } catch (error) {
    console.error('データの初期化中にエラーが発生しました:', error);
    setInitialized(true); // エラーが発生しても初期化完了とマークする
  }
}, [loadFromLocalStorage, addNotification, validateAssetTypes, saveToLocalStorage, initialized]);
```

### 5.2 Google認証とデータ同期
- **認証フロー**: Google Identity Services APIを使用した最新のOAuth 2.0認証
- **認証情報の保存**: ローカルストレージにJWTトークンを保存
- **有効期限チェック**: トークン有効期限の確認と自動ログアウト
- **コンテキスト連携**: AuthContextとPortfolioContextの相互参照
- **アクセストークン管理**: Drive API用のアクセストークンを別途管理
- **データソース管理**:
  - ログイン時: クラウドデータを優先
  - ログアウト時: ローカルデータを使用
  - データ競合時: 最新のタイムスタンプを持つデータを優先

### 5.3 通知システムの実装
- **通知メッセージの構造**: ID、メッセージ内容、タイプ（情報、成功、警告、エラー）
- **表示位置**: 画面右下に固定表示（z-index: 50）
- **スタイリング**: タイプごとに異なる背景色とテキスト色
- **自動消去機能**: エラー以外の通知は5秒後に自動的に消去
- **手動消去ボタン**: すべての通知に×ボタンを表示
- **通知スタック**: 新しい通知が下に追加されるスタック表示

```javascript
// 通知を追加する関数（タイムアウト付き）
const addNotification = useCallback((message, type = 'info') => {
  const id = Date.now();
  setNotifications(prev => [...prev, { id, message, type }]);
  
  // 情報・成功・警告通知は自動消去（5秒後）
  if (type !== 'error') {
    setTimeout(() => {
      removeNotification(id);
    }, 5000);
  }
  
  return id;
}, []);

// 通知を削除する関数
const removeNotification = useCallback((id) => {
  setNotifications(prev => prev.filter(notification => notification.id !== id));
}, []);
```

## 6. 市場データ取得と配当情報管理（更新版）

### 6.1 マルチデータソース対応（更新版）
- **データソースの優先順位**:
  1. Alpha Vantage API（プライマリソース）
  2. Yahoo Finance API（フォールバックソース）
  3. フォールバック値（両方のAPIが失敗した場合）

- **データソース切り替え条件**:
  - Alpha Vantageがレート制限に達した場合
  - Alpha Vantageからデータが正しく取得できない場合
  - Alpha Vantageへのリクエストがエラーになった場合

- **データソース表示**:
  - 各銘柄データにソース情報を付加（'Alpha Vantage', 'Yahoo Finance', 'Fallback'）
  - 全体の統計情報を通知でユーザーに表示

```javascript
// データソースの統計を計算
const sourceCounts = validatedAssets.reduce((acc, asset) => {
  acc[asset.source] = (acc[asset.source] || 0) + 1;
  return acc;
}, {});

// 通知メッセージを作成
let message = '市場データを更新しました';
if (sourceCounts['Alpha Vantage']) {
  message += ` (Alpha Vantage: ${sourceCounts['Alpha Vantage']}件`;
}
if (sourceCounts['Yahoo Finance']) {
  message += `, Yahoo Finance: ${sourceCounts['Yahoo Finance']}件`;
}
if (sourceCounts['Fallback']) {
  message += `, フォールバック: ${sourceCounts['Fallback']}件`;
}
message += ')';
```

### 6.2 Yahoo Finance API連携（更新）
- **プロキシエンドポイント**: `/api/yahoo-finance-proxy`
- **Netlify Function**: `functions/yahoo-finance-proxy.js`
- **Yahoo Finance非公式API**: `https://query1.finance.yahoo.com/v7/finance/quote`
- **機能**: 株価データと為替レートの取得
- **パラメータ**:
  - 株価データ取得: `symbols=AAPL,MSFT,1301.T`
  - 為替レート取得: `exchange_rate=USDJPY`
- **日本株対応**: 4桁数字の銘柄に自動的に`.T`を追加
- **タイムアウト設定**: 15秒
- **エラーハンドリング**: API障害時のフォールバック値生成機能

**Yahoo Finance Proxy実装例**:
```javascript
// functions/yahoo-finance-proxy.js の主要部分
async function handleStockData(symbols, headers) {
  // 日本株の場合は.Tを追加
  const formattedSymbols = symbols.split(',').map(symbol => {
    if (/^\d{4}$/.test(symbol) && !symbol.includes('.T')) {
      return `${symbol}.T`;
    }
    return symbol.trim();
  });
  
  try {
    // Yahoo Finance APIを呼び出す
    const yahooUrl = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${formattedSymbols.join(',')}`;
    const response = await axios.get(yahooUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    // 結果を整形
    const result = {};
    response.data.quoteResponse.result.forEach(quote => {
      const ticker = quote.symbol;
      result[ticker] = {
        ticker: ticker,
        price: quote.regularMarketPrice,
        name: quote.shortName || quote.longName || ticker,
        currency: quote.currency,
        lastUpdated: new Date().toISOString()
      };
    });
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        data: result
      })
    };
  } catch (error) {
    // エラー処理とフォールバック値の生成
  }
}
```

### 6.3 銘柄タイプ判定ロジック
銘柄のティッカーシンボルや名前からファンドタイプを判定する機能を実装しています：

- **個別株の判定**:
  - 日本株: 4桁+.T形式でないもの
  - 米国株: 1-5文字のティッカーで、既知のETFやファンドに該当しないもの
  - ETF、インデックスファンド、REIT、債券ファンド、暗号資産などに該当しないもの

- **ETFの判定**:
  - 日本ETF: 1から始まる4桁の数字 + .T形式（例: 1306.T）
  - 米国ETF: 既知のETFリストに含まれる、または名前にETFを含む

- **インデックスファンドの判定**:
  - 名前に「index」「インデックス」「日経」「topix」「S&P」などを含む

- **REITの判定**:
  - 名前に「REIT」「リート」「不動産投資」などを含む

### 6.4 手数料率推定ロジック
銘柄タイプに基づいて年間手数料率を推定します：

- 個別株: 常に0%（ユーザーによる変更不可）
- インデックスファンド（日本）: 0.3%
- インデックスファンド（米国）: 0.15%
- インデックスファンド（グローバル）: 0.25%
- アクティブファンド（日本）: 1.5%
- アクティブファンド（米国）: 0.75%
- アクティブファンド（グローバル）: 1.0%
- ETF（日本）: 0.22%
- ETF（米国）: 0.12%
- REIT: 0.5-0.6%
- その他: 0.5%（デフォルト値）

### 6.5 配当情報推定ロジック
銘柄タイプや名前から配当情報を推定します：

- **配当利回り推定**:
  - 既知の銘柄: データベースから正確な値を取得
  - 高配当ETF: 3.0-4.0%
  - 米国ETF: 1.5%（平均）
  - 日本ETF: 1.8%（平均）
  - 米国REITs: 4.0%（平均）
  - 日本REITs: 3.5%（平均）
  - 債券ファンド: 2.5%（平均）
  - 個別株: 0%（情報不足のため）

- **配当の有無判定**:
  - 金ETF（GLD）など一部の銘柄: 配当なし
  - 暗号資産関連: 配当なし
  - ETF、インデックスファンド、REIT、債券: 通常配当あり
  - 名前に「dividend」「配当」「yield」「income」を含む: 配当あり
  - その他: 個別判断

- **配当頻度推定**:
  - 名前に基づいて推定（「monthly」「quarterly」など）
  - デフォルト: 四半期（quarterly）

### 6.6 年間配当金の計算
保有資産ごとの年間配当金を計算し、合計します：

```javascript
// 年間配当金の計算
const annualDividends = currentAssets.reduce((sum, asset) => {
  // 配当がない場合はスキップ
  if (!asset.hasDividend) {
    return sum;
  }
  
  let assetValue = asset.price * asset.holdings;
  
  // 通貨換算
  if (asset.currency !== baseCurrency) {
    if (baseCurrency === 'JPY' && asset.currency === 'USD') {
      assetValue *= exchangeRate.rate;
    } else if (baseCurrency === 'USD' && asset.currency === 'JPY') {
      assetValue /= exchangeRate.rate;
    }
  }
  
  return sum + (assetValue * (asset.dividendYield || 0) / 100);
}, 0);
```

## 7. エラー処理とフォールバックメカニズム（更新版）

### 7.1 マルチレベルフォールバック（更新版）
- **フォールバックレベル1**: Alpha Vantage APIが失敗した場合、Yahoo Finance APIを試行
- **フォールバックレベル2**: Yahoo Finance APIも失敗した場合、フォールバック値を使用
- **使用状況の通知**: 各データソースの使用状況をユーザーに通知
- **フォールバック詳細の記録**: 各銘柄ごとにフォールバックの使用状況を記録

```javascript
// Yahoo Financeの利用状況に関する通知
if (yahooFinanceTriedCount > 0) {
  const yahooFinanceMessage = `Alpha Vantageでの取得に失敗した${yahooFinanceTriedCount}銘柄について、Yahoo Financeを使用しました（成功: ${yahooFinanceSuccessCount}件）`;
  addNotification(yahooFinanceMessage, 'info');
}
```

### 7.2 API障害対応
- **エラータイプの識別**: レート制限、ネットワークエラー、認証エラーなど、異なるタイプのエラーを区別
- **エラー詳細のログ**: より詳細なエラー情報をコンソールに記録
- **タイムアウト設定**: 各APIリクエストに対して適切なタイムアウトを設定
  - Alpha Vantage API: 15秒
  - Yahoo Finance API: 30秒
- **レート制限の検出**: Alpha Vantage APIのレート制限を検出して自動切り替え

### 7.3 フォールバック値の生成ロジック
- **ファンドタイプ別のデフォルト価格**: 日本株・米国株・ETFなど、タイプに応じた適切なデフォルト価格を設定
- **特定銘柄のカスタマイズ**: 人気ETFなどに対しては、より現実的なデフォルト価格を設定
- **地域判定**: ティッカー形式（.Tの有無など）から地域と通貨を判定
- **フォールバック情報の明示**: データがフォールバック値であることを明示し、投資判断の際に注意を促す

```javascript
// フォールバックデータを使用している場合は通知
if (fallbackCount > 0) {
  addNotification(
    `${fallbackCount}銘柄の株価情報は最新データを取得できず、前回保存した価格データを使用しています。実際の市場価格と異なる可能性があります。`,
    'warning'
  );
}
```

### 7.4 ユーザー通知メカニズム
- **ソース別詳細情報**: データソースごとの成功・失敗件数を通知
- **フォールバック使用の警告**: フォールバック値を使用している銘柄について警告
- **自動消去タイマー**: 情報・成功・警告通知は5秒後に自動消去
- **エラー永続表示**: エラー通知のみ手動消去まで表示を維持
- **タイプ別視覚表示**: 通知の種類に応じた色分け表示

## 8. 主要コンポーネントの実装詳細（更新版）

### 8.1 市場データサービス（marketDataService.js）（更新版）
- マルチソースのデータ取得（Alpha Vantage→Yahoo Finance→フォールバック）
- 日本株・米国株に対応したティッカーフォーマット処理
- API障害時のフォールバックメカニズム
- 取得結果の詳細な記録と統計
- データソース情報の付加と表示

### 8.2 Yahoo Finance API連携（更新）
- **JavaScript実装**: axios を使用した Yahoo Finance API の呼び出し
- **クエリパラメータ**: シンボルに基づいたデータ取得
- **レスポンス処理**: JSON形式のレスポンスを整形して返却
- **データフォーマット**: 銘柄ごとのティッカー、価格、名前、通貨などの情報を整形
- **日本市場対応**: 4桁数字の銘柄に.Tを自動付加
- **エラーハンドリング**: タイムアウトやネットワークエラーに対応するフォールバック

### 8.3 ポートフォリオコンテキスト（PortfolioContext.js）（更新版）
- データソース統計の記録と通知機能強化
- Yahoo Finance利用状態の追跡と詳細表示
- 障害発生時のエラー通知改善
- より詳細な通知メッセージの生成

### 8.4 日本株対応の強化
- 4桁数字のティッカーに.Tを自動付加
- 日本市場と米国市場の違いを考慮した処理
- 通貨変換処理の調整（JPY⇔USD）
- 日本株ETFの特別処理（1で始まる4桁コード）

## 9. UI操作フロー（更新版）

### 9.1 市場データ更新フロー（更新版）
1. ユーザーが更新ボタンをクリック
2. Alpha Vantage APIからデータ取得を試行
3. 失敗またはレート制限の場合、自動的にYahoo Finance APIを試行
4. それも失敗した場合はフォールバック値を使用
5. 銘柄ごとに最新の価格、手数料情報、配当情報を取得
6. 個別株は常に手数料率0%を維持
7. データソースの統計情報を計算（各ソースの使用銘柄数）
8. 使用したデータソースを通知メッセージとして表示
9. Yahoo Finance APIの使用状況を別途通知
10. 手数料情報や配当情報に変更があった場合は通知
11. フォールバック値を使用している場合は警告通知
12. データをローカルストレージに自動保存
13. 通知は5秒後に自動消去（エラー以外）

```javascript
// データソースの統計を表示
let message = '市場データを更新しました';
if (sourceCounts['Alpha Vantage']) {
  message += ` (Alpha Vantage: ${sourceCounts['Alpha Vantage']}件`;
}
if (sourceCounts['Yahoo Finance']) {
  message += `, Yahoo Finance: ${sourceCounts['Yahoo Finance']}件`;
}
if (sourceCounts['Fallback']) {
  message += `, フォールバック: ${sourceCounts['Fallback']}件`;
}
message += ')';
addNotification(message, 'success');

// Yahoo Financeの利用状況に関する通知
if (yahooFinanceTriedCount > 0) {
  const yahooFinanceMessage = `Alpha Vantageでの取得に失敗した${yahooFinanceTriedCount}銘柄について、Yahoo Financeを使用しました（成功: ${yahooFinanceSuccessCount}件）`;
  addNotification(yahooFinanceMessage, 'info');
}
```

### 9.2 銘柄追加フロー（更新版）
1. ユーザーが銘柄シンボルを入力
2. addTicker関数を呼び出し
3. Alpha Vantage APIからデータ取得
4. 取得失敗時はYahoo Finance APIを自動試行
5. それも失敗した場合はフォールバック値を使用
6. 銘柄タイプを判定し、手数料情報を推定
7. 配当情報を推定
8. 個別株の場合は手数料を0%に設定
9. 保有資産と目標配分リストに追加
10. データソースや使用状況を通知
11. データをローカルストレージに自動保存

### 9.3 エラーおよびフォールバック通知フロー（更新版）
1. データ更新または銘柄追加時にエラーが発生
2. エラータイプを判別（レート制限、認証エラー、ネットワークエラーなど）
3. 次のフォールバックデータソースを自動試行
4. すべてのソースが失敗した場合はフォールバック値を生成
5. エラーの詳細をコンソールに記録
6. ユーザーに適切な通知を表示（エラーの内容に応じて）
7. フォールバック値を使用している場合は警告通知
8. 使用したデータソースの統計情報を表示

```javascript
// エラーがあった場合は通知
if (errorCount > 0) {
  const errorMessage = rateLimit 
    ? `APIリクエスト制限のため、${errorCount}銘柄のデータが正しく更新できませんでした` 
    : `${errorCount}銘柄のデータ更新でエラーが発生しました`;
  
  addNotification(errorMessage, 'error');
  
  // 最大3件までエラー詳細を表示
  errorDetails.slice(0, 3).forEach(error => {
    addNotification(
      `「${error.name || error.ticker}」: ${error.message}`,
      'warning'
    );
  });
}
```

## 10. 廃止予定の機能とコンポーネント（新規）

以下の機能やコンポーネントは、Netlify環境での実行制約のため廃止予定ですが、互換性のために残されています：

### 10.1 Python yfinance関連コンポーネント
- **functions/yfinance-proxy.js**: Python実行サポート用プロキシ
- **functions/python/**: Pythonスクリプトとその依存関係が含まれるディレクトリ
- **functions/python/yfinance_fetcher.py**: yfinanceライブラリを使用するPythonスクリプト
- **functions/python/requirements.txt**: Python依存関係定義ファイル

これらの代わりに、**functions/yahoo-finance-proxy.js** を使用して、JavaScript実装でYahoo Finance APIにアクセスします。

### 10.2 移行計画
これらの廃止予定コンポーネントは現在も含まれていますが、今後のアップデートでは完全に削除される可能性があります。すべてのデータ取得ロジックは、JavaScript実装に移行されています。新たな開発では、Python依存のコードを使用しないでください。

## 改訂履歴
| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/6 | 初版作成 |  |
| 2.0 | 2025/03/7 | 環境設定と依存関係の更新 |  |
| 3.0 | 2025/03/8 | jwt-decode対応・プロキシ設定・ESLint設定の改訂 |  |
| 4.0 | 2025/03/08 14:25 | Alpha Vantage API連携強化・環境変数名統一・データフォールバック機構拡充 |  |
| 5.0 | 2025/03/10 11:20 | 銘柄タイプ自動判定と年間手数料の自動推定機能追加 |  |
| 6.0 | 2025/03/11 13:35 | 個別株の手数料固定（0%）とファンド手数料計算ロジックの修正 |  |
| 7.0 | 2025/03/12 16:50 | 人気銘柄リストの更新 |  |
| 8.0 | 2025/03/14 09:30 | ローカルストレージによるデータ保持機能とGoogle認証連携強化 |  |
| 9.0 | 2025/03/17 14:45 | データ暗号化/復号化処理の強化、Google Drive API連携改善、エラーバウンダリ導入、認証フロー更新 |  |
| 10.0 | 2025/03/18 15:30 | 配当情報の管理機能追加、銘柄タイプ判定ロジック強化、PortfolioSummaryとAssetsTableの配当情報表示追加、Google Drive API連携の安定性向上 |  |
| 3.1 | 2025/03/19 15:15 | 通知システムの自動消去機能追加（タイプ別）、初期化処理の重複実行防止機能追加、通知表示フローの詳細定義追加 |  |
| 3.2 | 2025/03/20 10:00 | Yahoo Finance APIフォールバック機能の追加、マルチデータソース対応の実装、API障害時の詳細通知機能強化、日本株ティッカー変換改善 |  |
| 3.3 | 2025/03/22 12:00 | Python yfinanceライブラリを使用したマルチデータソース対応の実装、Python yfinanceプロセス実行方式への変更、為替および株価データの取得方法を改善、Netlify Functionsでのランタイム変更 |  |
| 3.4 | 2025/03/23 10:15 | Python依存をなくすためYahoo Finance APIをJavaScript実装に変更、Yahoo Finance APIの技術詳細を追加、データソース名と優先順位の更新、廃止予定機能の明記 |  |

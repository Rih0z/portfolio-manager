# 株価取得システム仕様書（マルチ通貨シミュレーション対応版）

**バージョン:** 7.0  
**最終更新日時:** 2025/03/30

## 1. 概要

本仕様書は、ポートフォリオマネージャーアプリケーションで使用する株価取得システムの設計と実装について定義します。このシステムは複数のデータソースを組み合わせて株価情報を効率的かつ信頼性高く取得します。銘柄タイプに応じて最適なデータ取得方法を選択し、主要ソースが失敗した場合は代替ソースを試行する堅牢な仕組みを採用しています。また、複数通貨（円/ドル）対応の資金配分シミュレーションをサポートするため、為替レート管理機能も強化されています。

## 2. データソース構成

### 2.1 プライマリソース
- **米国株**: Alpaca API
- **日本株**: スクレイピング（複数サイト）
- **投資信託**: スクレイピング（複数サイト）

### 2.2 セカンダリソース（バックアップ）
- **米国株**: スクレイピング（複数サイト）
- **全銘柄共通**: Yahoo Finance API

### 2.3 為替レート取得（更新）
- **主要ソース**: exchangerate.host API
- **バックアップ**: デフォルト値（環境変数）
- **用途の拡張**: 銘柄価格表示に加え、マルチ通貨シミュレーションでの通貨変換にも使用
- **取得頻度**: 
  - アプリケーション起動時
  - 通貨切替時
  - 明示的なデータ更新ボタンクリック時
  - シミュレーション実行前（前回取得から15分以上経過している場合）
- **キャッシュ**: 取得した為替レートは最大15分間キャッシュし、頻繁なAPI呼び出しを回避

```javascript
// 為替レート取得関数（更新版）
async function fetchExchangeRate(forceRefresh = false) {
  // 現在のレート情報を取得
  const currentRate = getStoredExchangeRate();
  
  // 以下の場合に新しいレートを取得
  // 1. 強制更新フラグが立っている
  // 2. 現在のレートが存在しない
  // 3. 前回取得から15分以上経過している
  const shouldRefresh = forceRefresh || 
                       !currentRate || 
                       isRateExpired(currentRate.lastUpdated, 15);
  
  if (!shouldRefresh) {
    return currentRate;
  }
  
  try {
    const response = await axios.get('/api/exchangerate-proxy', {
      timeout: 10000
    });
    
    if (response.data && response.data.success) {
      const newRate = {
        rate: response.data.rate,
        source: response.data.source,
        lastUpdated: new Date().toISOString()
      };
      
      // レート情報をストレージに保存
      storeExchangeRate(newRate);
      return newRate;
    }
    
    throw new Error('Invalid exchange rate data');
  } catch (error) {
    console.error('Failed to fetch exchange rate:', error);
    
    // エラー発生時の処理
    if (currentRate) {
      // 既存のレートがある場合は、それを使用し有効期限を延長
      const extendedRate = {
        ...currentRate,
        source: `${currentRate.source} (延長)`,
      };
      storeExchangeRate(extendedRate);
      return extendedRate;
    }
    
    // フォールバック値を使用
    const fallbackRate = {
      rate: 150.0, // JPY/USD デフォルト値
      source: 'Fallback',
      lastUpdated: new Date().toISOString()
    };
    storeExchangeRate(fallbackRate);
    return fallbackRate;
  }
}
```

## 3〜13. (省略 - 既存の内容と同じ)

## 14. マルチ通貨シミュレーション対応（新規追加）

### 14.1 為替レート管理
- **目的**: 複数通貨（円/ドル）対応のシミュレーション計算をサポート
- **通貨変換**: 円⇔ドルの通貨変換を正確に行い、購入金額と購入株数を計算
- **エラーハンドリング**: 為替レート取得失敗時も、フォールバック値を使用して機能を継続
- **表示**: 為替レート情報（レート値、ソース、更新日時）をUI上に明示

```javascript
// 通貨変換関数
function convertCurrency(amount, fromCurrency, toCurrency, exchangeRate) {
  if (fromCurrency === toCurrency) {
    return amount;
  }
  
  // 円→ドル
  if (fromCurrency === 'JPY' && toCurrency === 'USD') {
    return amount / exchangeRate.rate;
  }
  
  // ドル→円
  if (fromCurrency === 'USD' && toCurrency === 'JPY') {
    return amount * exchangeRate.rate;
  }
  
  throw new Error(`Unsupported currency conversion: ${fromCurrency} to ${toCurrency}`);
}

// 安全な通貨変換関数（エラーハンドリング付き）
function safeCurrencyConversion(amount, fromCurrency, toCurrency, exchangeRate) {
  try {
    return convertCurrency(amount, fromCurrency, toCurrency, exchangeRate);
  } catch (error) {
    console.error('Currency conversion error:', error);
    
    // エラー時のフォールバック処理
    // JPY → USD のフォールバック
    if (fromCurrency === 'JPY' && toCurrency === 'USD') {
      return amount / 150.0;
    }
    
    // USD → JPY のフォールバック
    if (fromCurrency === 'USD' && toCurrency === 'JPY') {
      return amount * 150.0;
    }
    
    // それ以外はそのまま返す
    return amount;
  }
}
```

### 14.2 通貨関連UI表示
- **通貨記号**: 円は¥、ドルは$と表示
- **金額フォーマット**: 円は整数表示、ドルは小数点以下2桁表示
- **為替レート表示**: シミュレーション画面で為替レート情報を明示

```javascript
// 通貨に応じた金額フォーマット関数
function formatCurrencyValue(value, currency) {
  if (currency === 'JPY') {
    return Math.round(value).toLocaleString(); // 円は整数
  } else {
    return value.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','); // ドルは小数点2桁
  }
}

// 通貨記号付き表示関数
function formatCurrencyWithSymbol(value, currency) {
  const symbol = currency === 'JPY' ? '¥' : '$';
  return `${symbol}${formatCurrencyValue(value, currency)}`;
}
```

### 14.3 購入株数計算
- **機能**: シミュレーション結果に購入可能株数を表示
- **計算方法**: 購入金額 ÷ 株価（通貨変換を考慮）
- **表示フォーマット**: 投資信託は小数点3桁（口数表示）、株式・ETFは小数点2桁（株数表示）

```javascript
// 購入株数計算関数
function calculatePurchaseShares(purchaseAmount, price, isMutualFund = false) {
  // 安全性チェック
  if (price <= 0 || purchaseAmount <= 0) {
    return 0;
  }
  
  // 購入可能株数を計算
  const shares = purchaseAmount / price;
  
  // 投資信託は小数点3桁、それ以外は小数点2桁で丸める
  const precision = isMutualFund ? 1000 : 100;
  return Math.floor(shares * precision) / precision;
}

// 表示用フォーマット関数
function formatSharesWithUnit(shares, isMutualFund) {
  const precision = isMutualFund ? 3 : 2;
  const unit = isMutualFund ? '口' : '株';
  return `${shares.toFixed(precision)}${unit}`;
}
```

## 15. 留意事項

### 15.1 スクレイピングの制約
- ウェブサイトの構造変更に脆弱
- サイト側の防止機構（CAPTCHA等）に対応不能
- 過度な使用によるIPブロック可能性あり
- ランダムなユーザーエージェントと適切な間隔が必要

### 15.2 倫理的・法的考慮事項
- 対象サイトの利用規約を尊重
- 商用利用に関する制限を確認
- 過度な負荷をかけない配慮
- データの正確性に関する免責事項を明記

### 15.3 通貨関連の注意点（新規追加）
- 為替レートは変動するため、シミュレーション結果は実際の金額と異なる可能性がある
- 為替レート取得失敗時はフォールバック値を使用するため、精度が低下する
- 通貨変換を伴うシミュレーションでは、その旨をユーザーに明示する
- 複数通貨で購入する場合、実際のブローカーでの手数料や取引条件が異なる場合がある

### 15.4 代替手段
- 公式APIの登場に備え適宜実装を見直し
- データプロバイダ契約の検討
- ユーザー手動入力機能の提供

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/15 | 初版作成 |  |
| 2.0 | 2025/03/18 | Alpha Vantage API追加 |  |
| 3.0 | 2025/03/21 | Alpaca APIへの変更 |  |
| 4.0 | 2025/03/23 | Yahoo Finance APIをバックアップとして追加 |  |
| 5.0 | 2025/03/25 | 日本株および投資信託スクレイピング対応追加 |  |
| 6.0 | 2025/03/28 | 米国株・ETFスクレイピング対応追加 |  |
| 7.0 | 2025/03/30 | マルチ通貨シミュレーション対応機能追加（円/ドル対応と購入株数表示）、為替レート管理機能強化 |  |

# ポートフォリオマネージャー コード規約書（更新版3.4）

**バージョン:** 3.4  
**最終更新日時:** 2025/03/23 09:30

## 1. 概要

このドキュメントは、ポートフォリオマネージャーアプリケーションの開発に関する一貫したコーディング規約を定義します。すべての貢献者は、コードの品質、一貫性、保守性を確保するためにこれらの規約に従うものとします。

## 2. ファイル構造とプロジェクト編成

### 2.1 ディレクトリ構造

```
src/
├── components/      # UIコンポーネント
│   ├── auth/        # 認証関連コンポーネント 
│   ├── common/      # 共通UIコンポーネント
│   ├── dashboard/   # ダッシュボード画面コンポーネント
│   ├── data/        # データ連携コンポーネント
│   ├── layout/      # レイアウト関連コンポーネント
│   ├── settings/    # 設定画面コンポーネント
│   └── simulation/  # シミュレーション画面コンポーネント
├── context/         # React Context定義
├── hooks/           # カスタムReact Hooks
├── pages/           # ページコンポーネント
├── services/        # APIサービスとデータ処理
├── utils/           # ユーティリティ関数
└── App.jsx          # アプリケーションルート

functions/
├── alpha-vantage-proxy.js       # Alpha Vantage APIプロキシ
├── mof-exchange-rate-proxy.js   # 為替レートプロキシ
├── yahoo-finance-proxy.js       # Yahoo Finance APIプロキシ（JavaScript実装・新規）
├── yfinance-proxy.js            # Python yfinance実行プロキシ（廃止予定）
└── python/                     # Pythonスクリプト（廃止予定）
    ├── requirements.txt        # Python依存関係定義
    └── yfinance_fetcher.py     # yfinanceデータ取得スクリプト
```

### 2.2 ファイル命名規則

- **コンポーネントファイル**: PascalCase を使用（例: `PortfolioSummary.jsx`）
- **ユーティリティファイル**: camelCase を使用（例: `formatters.js`, `fundUtils.js`）
- **テストファイル**: `.test.js` または `.spec.js` を追加（例: `PortfolioSummary.test.jsx`）
- **CSS/SCSS**: コンポーネントと同じ名前で `.module.css` サフィックス（例: `Button.module.css`）
- **サーバーレス関数**: camelCase を使用し、機能を表す名前（例: `alpha-vantage-proxy.js`, `yahoo-finance-proxy.js`, `exchange-rate-proxy.js`）
- **Pythonファイル**: snake_case を使用（例: `yfinance_fetcher.py`）

## 3. 命名規則

### 3.1 JSX コンポーネント

- **コンポーネント名**: PascalCase を使用
  ```jsx
  // 良い例
  function UserProfile() {...}
  const PortfolioChart = () => {...}
  
  // 悪い例
  function userProfile() {...}
  const portfolioChart = () => {...}
  ```

### 3.2 変数・関数名

- **変数・関数名**: camelCase を使用
  ```javascript
  // 良い例
  const userData = {...}
  function calculateTotal() {...}
  
  // 悪い例
  const UserData = {...}
  function CalculateTotal() {...}
  ```

- **boolean変数**: `is`, `has`, `should` などのプレフィックスを使用
  ```javascript
  // 良い例
  const isLoading = true;
  const hasError = false;
  const shouldRefresh = true;
  const isStock = true; // 個別株かどうかのフラグ
  const isInitialized = true; // 初期化完了フラグ
  const hasDividend = true; // 配当があるかどうかのフラグ
  const isDividendEstimated = true; // 配当情報が推定値かどうか
  const isYahooFinanceTried = true; // Yahoo Financeを試行したかどうか（更新）
  const isYahooFinanceSuccess = true; // Yahoo Financeからのデータ取得に成功したかどうか（更新）
  ```

### 3.3 定数

- **定数**: 大文字のSNAKE_CASEを使用
  ```javascript
  // 良い例
  const MAX_RETRY_COUNT = 3;
  const DEFAULT_CURRENCY = 'JPY';
  const ALPHA_VANTAGE_URL = '/api/alpha-vantage-proxy';
  const YAHOO_FINANCE_URL = '/api/yahoo-finance-proxy'; // 更新
  const FUND_TYPES = {
    STOCK: '個別株',
    ETF_JP: 'ETF（日本）',
    ETF_US: 'ETF（米国）'
  };
  // 配当頻度定数
  const DIVIDEND_FREQUENCY = {
    MONTHLY: 'monthly',
    QUARTERLY: 'quarterly',
    SEMI_ANNUAL: 'semi-annual',
    ANNUAL: 'annual',
    UNKNOWN: 'unknown'
  };
  // 通知タイプ定数
  const NOTIFICATION_TYPES = {
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    ERROR: 'error'
  };
  // 通知自動消去時間
  const NOTIFICATION_AUTO_DISMISS_TIME = 5000; // 5秒
  // データソース定数（更新）
  const DATA_SOURCES = {
    ALPHA_VANTAGE: 'Alpha Vantage',
    YAHOO_FINANCE: 'Yahoo Finance', // 更新
    FALLBACK: 'Fallback'
  };
  // データソース優先順位（更新）
  const SOURCE_PRIORITY = [
    DATA_SOURCES.ALPHA_VANTAGE,
    DATA_SOURCES.YAHOO_FINANCE, // 更新
    DATA_SOURCES.FALLBACK
  ];
  // Yahoo Finance API利用可能フラグ（新規）
  const ENABLE_YAHOO_FINANCE_API = true;
  ```

### 3.4 コンテキストとフック

- **コンテキスト**: `XxxContext` の形式を使用し、デフォルトエクスポート
  ```javascript
  // 良い例
  const AuthContext = createContext();
  export default AuthContext;
  export const AuthProvider = ({ children }) => {...};
  ```

- **カスタムフック**: `use` プレフィックスを使用し、両方のエクスポート形式を提供
  ```javascript
  // 良い例 - 両方のエクスポート形式
  export const useAuth = () => {...}
  export default useAuth;
  ```

### 3.5 イベントハンドラ

- **イベントハンドラ関数**: `handle` プレフィックスを使用
  ```javascript
  // 良い例
  const handleSubmit = () => {...}
  const handleInputChange = (e) => {...}
  const handleIncrementFee = (asset, amount) => {...}
  const handleSaveToLocalStorage = () => {...} // ローカルストレージ保存ハンドラ
  const handleUpdateDividendInfo = (asset, yield) => {...} // 配当情報更新ハンドラ
  const handleRemoveNotification = (id) => {...} // 通知削除ハンドラ
  const handleRefreshMarketPrices = () => {...} // 市場データ更新ハンドラ
  ```

### 3.6 ユーティリティ関数

- **ユーティリティ関数**: 目的が明確な名前を使用
  ```javascript
  // 良い例
  const formatCurrency = (amount, currency) => {...}
  const estimateAnnualFee = (ticker, name) => {...}
  const guessFundType = (ticker, name) => {...}
  const encryptData = (data) => {...} // データ暗号化関数
  const decryptData = (encrypted) => {...} // データ復号化関数
  const estimateDividendYield = (ticker, name) => {...} // 配当利回り推定関数
  const calculateAnnualDividend = (asset, exchangeRate, baseCurrency) => {...} // 年間配当金計算関数
  const formatDividendFrequency = (frequency) => {...} // 配当頻度の表示変換関数
  const determineHasDividend = (ticker, fundType) => {...} // 配当の有無判定関数
  const addNotificationWithTimeout = (message, type) => {...} // タイムアウト付き通知追加関数
  const fetchFromYahooFinance = (ticker) => {...} // Yahoo Financeからデータを取得する関数（更新）
  const formatTickerForYahooFinance = (ticker) => {...} // ティッカーをYahoo Finance用にフォーマットする関数（更新）
  ```

### 3.7 データソース関連（更新）

- **データソース変数**: 明確な名前と意図を表す命名を使用
  ```javascript
  // 良い例
  const dataSource = 'Alpha Vantage'; // データソースを文字列で表現
  const sourceCounts = { 'Alpha Vantage': 5, 'Yahoo Finance': 3, 'Fallback': 2 }; // ソース別の統計
  const yahooFinanceTriedCount = 5; // Yahoo Financeを試行した回数
  const yahooFinanceSuccessCount = 3; // Yahoo Financeでの成功回数
  const fallbackCount = 2; // フォールバック値の使用回数
  ```

- **フォールバック関連フラグ**: 各データソースの試行・成功状態を追跡
  ```javascript
  // 良い例
  const yahooFinanceTried = true; // Yahoo Financeを試行したかどうか
  const yahooFinanceSuccess = true; // Yahoo Financeからのデータ取得に成功したかどうか
  const isFallback = result.data.source === 'Fallback'; // フォールバック値かどうか
  ```

## 4. コードフォーマット

### 4.1 基本ルール

- **インデント**: 2スペースを使用
- **行の長さ**: 最大100文字（例外：URLs、長い文字列）
- **セミコロン**: すべての文の末尾にセミコロンを使用
- **括弧のスタイル**: 開始括弧は同じ行に配置

### 4.2 JSX フォーマット

- **要素の属性が多い場合**: 複数行に分割
  ```jsx
  // 良い例 (少数の属性)
  <Button type="primary" onClick={handleClick}>提出</Button>
  
  // 良い例 (多数の属性)
  <Button
    type="button"
    className={`px-4 py-2 rounded-md ${
      importFormat === 'json' ? 'bg-primary text-white' : 'bg-gray-200'
    }`}
    onClick={() => setImportFormat('json')}
    role="radio"
    aria-checked={importFormat === 'json'}
    disabled={isStock} // 個別株の場合は無効化
  >
    JSON
  </Button>
  ```

- **バッジコンポーネント**:
  ```jsx
  // ファンドタイプバッジ
  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
    asset.fundType === FUND_TYPES.STOCK
      ? 'bg-gray-100 text-gray-800'
      : 'bg-blue-100 text-blue-800'
  }`}>
    {asset.fundType}
  </span>
  
  // 手数料情報バッジ
  <span className={`text-xs px-1.5 py-0.5 rounded ${
    asset.feeSource === '個別株'
      ? 'bg-gray-100 text-gray-800'
      : asset.feeSource === 'ユーザー設定' 
        ? 'bg-purple-100 text-purple-800' 
        : asset.feeIsEstimated 
          ? 'bg-yellow-100 text-yellow-800'
          : 'bg-green-100 text-green-800'
  }`}>
    {asset.feeSource}
  </span>
  
  // データソースバッジ（更新）
  <span className={`text-xs px-1.5 py-0.5 rounded ${
    asset.source === 'Alpha Vantage'
      ? 'bg-green-100 text-green-800'
      : asset.source === 'Yahoo Finance'
        ? 'bg-blue-100 text-blue-800'
        : 'bg-yellow-100 text-amber-800'
  }`}>
    {asset.source}
  </span>
  
  // 配当情報バッジ
  <span className={`text-xs px-1.5 py-0.5 rounded ${
    !asset.hasDividend
      ? 'bg-gray-100 text-gray-800'
      : asset.dividendIsEstimated 
        ? 'bg-yellow-100 text-yellow-800'
        : 'bg-green-100 text-green-800'
  }`}>
    {!asset.hasDividend 
      ? '配当なし' 
      : formatDividendFrequency(asset.dividendFrequency) + (asset.dividendIsEstimated ? '（推定）' : '')}
  </span>
  ```

- **通知コンポーネント**:
  ```jsx
  // 通知メッセージ
  <div 
    key={notification.id}
    className={`p-3 rounded-md shadow-md text-sm ${
      notification.type === 'error' ? 'bg-red-100 text-red-700' :
      notification.type === 'warning' ? 'bg-yellow-100 text-yellow-700' :
      notification.type === 'success' ? 'bg-green-100 text-green-700' :
      'bg-blue-100 text-blue-700'
    }`}
  >
    <div className="flex justify-between items-start">
      <span>{notification.message}</span>
      <button 
        onClick={() => removeNotification(notification.id)}
        className="ml-2 text-gray-500 hover:text-gray-700"
      >
        &times;
      </button>
    </div>
  </div>
  ```

- **アクセシビリティ属性**:
  ```jsx
  // ラベルとコントロールの関連付け
  <label htmlFor="budget-input">追加予算</label>
  <input id="budget-input" type="number" />
  
  // ラジオグループ
  <div role="radiogroup" aria-labelledby="format-label">
    <span id="format-label">形式:</span>
    <button role="radio" aria-checked={true}>JSON</button>
    <button role="radio" aria-checked={false}>CSV</button>
  </div>
  ```

### 4.3 インポート文の整理

- **インポートの順序**:
  1. React関連（React, React Router）
  2. サードパーティライブラリ
  3. プロジェクト内モジュール（相対パス）
  4. ユーティリティとタイプ
  5. スタイル・アセット

  ```javascript
  // 良い例
  import React, { useState, useCallback, useRef } from 'react';
  import { useNavigate } from 'react-router-dom';
  
  import jwtDecode from 'jwt-decode';
  import { formatCurrency } from 'accounting';
  
  import { usePortfolioContext } from '../../hooks/usePortfolioContext';
  import Header from '../layout/Header';
  
  import { FUND_TYPES, DIVIDEND_FREQUENCY, NOTIFICATION_TYPES, DATA_SOURCES } from '../../utils/fundUtils';
  
  import './styles.css';
  ```

## 5. React固有の規則

### 5.1 コンポーネント定義

- **関数コンポーネント**: アロー関数よりも関数宣言を優先
  ```jsx
  // 推奨
  function MyComponent() {
    return <div>...</div>;
  }
  ```

- **Props分割代入**: コンポーネント内で使用
  ```jsx
  // 良い例
  function UserCard({ name, email, avatar, isStock, hasDividend, source }) {
    return (
      <div>
        <img src={avatar} alt={name} />
        <h2>{name}</h2>
        <p>{email}</p>
        {isStock && <span className="badge">個別株</span>}
        {hasDividend && <span className="badge">配当あり</span>}
        <span className="source-badge">{source}</span> {/* データソースを表示 */}
      </div>
    );
  }
  ```

### 5.2 Hooks の使用

- **useCallback, useMemo**: 適切に依存配列を定義
  ```jsx
  // 良い例
  const handleSubmit = useCallback(() => {
    submitData(formData);
  }, [formData, submitData]);
  
  // 良い例 - 初期化完了後のみ実行
  useEffect(() => {
    if (initialized) {
      updateExchangeRate();
    }
  }, [initialized, updateExchangeRate]);
  
  // 良い例 - 重複初期化防止
  const initializeData = useCallback(() => {
    // 既に初期化済みなら何もしない
    if (initialized) return;
    
    // 初期化処理...
    setInitialized(true);
  }, [loadFromLocalStorage, addNotification, validateAssetTypes, saveToLocalStorage, initialized]);
  ```

- **カスタムフックの命名**: 明確な目的を表す名前を使用
  ```javascript
  // 良い例
  export const usePortfolioContext = () => {...}
  export const useAuth = () => {...}
  export const useFundUtils = () => {...}
  export const useLocalStorage = () => {...} // ローカルストレージ操作フック
  export const useDividendCalculation = () => {...} // 配当計算フック
  export const useNotifications = () => {...} // 通知管理フック
  export const useDataSources = () => {...} // データソース管理フック
  export const useMarketData = () => {...} // 市場データ取得フック（更新）
  ```

### 5.3 環境依存のライブラリ対応

- **jwt-decode v4の対応**: デフォルトインポートを使用
  ```javascript
  // jwt-decode v3/v4対応
  import jwtDecode from 'jwt-decode';
  
  // 使用例
  const decodedToken = jwtDecode(token);
  ```

### 5.4 コンテキスト間の連携

- **循環参照の回避**: useRefを使用して一方向参照を実装
  ```javascript
  // 良い例
  const portfolioContextRef = useRef(null);
  
  // 参照設定関数
  const setPortfolioContextRef = useCallback((context) => {
    portfolioContextRef.current = context;
  }, []);
  
  // 参照使用
  if (portfolioContextRef.current?.handleAuthStateChange) {
    portfolioContextRef.current.handleAuthStateChange(true, user);
  }
  ```

### 5.5 エラーバウンダリの使用

- **アプリケーション全体を保護**: エラーバウンダリでラップしてクラッシュ耐性を向上
  ```javascript
  // 良い例
  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false, error: null };
    }
    
    static getDerivedStateFromError(error) {
      return { hasError: true, error };
    }
    
    componentDidCatch(error, errorInfo) {
      console.error('アプリケーションエラー:', error, errorInfo);
    }
    
    render() {
      if (this.state.hasError) {
        return <エラー表示コンポーネント error={this.state.error} />;
      }
      return this.props.children;
    }
  }
  
  // 使用方法
  function App() {
    return (
      <ErrorBoundary>
        <アプリケーションコンポーネント />
      </ErrorBoundary>
    );
  }
  ```

## 6. 状態管理

### 6.1 Context API の使用

- **コンテキスト分離**: 関連する状態ごとに別々のコンテキストを使用
  - AuthContext: 認証関連
  - PortfolioContext: ポートフォリオデータ関連

- **Provider のカプセル化**: 専用のProviderコンポーネントを作成
  ```jsx
  export const AuthProvider = ({ children }) => {
    // 状態と関数の定義
    return (
      <AuthContext.Provider value={...}>
        {children}
      </AuthContext.Provider>
    );
  };
  ```

### 6.2 状態更新関数

- **イミュータブルな更新**: 常に新しいオブジェクトを返す
  ```javascript
  // 良い例
  setCurrentAssets(prev => 
    prev.map(item => 
      item.id === id 
      ? { ...item, holdings: parseFloat(parseFloat(holdings).toFixed(4)) || 0 } 
      : item
    )
  );
  ```

- **小数点位置の処理**: 数値の精度を保つために適切な方法を使用
  ```javascript
  // 小数点以下4桁まで保存するケース
  const value = parseFloat(parseFloat(rawValue).toFixed(4));
  
  // 小数点以下2桁まで保存するケース（手数料率など）
  const fee = parseFloat(parseFloat(rawValue).toFixed(2));
  
  // 小数点以下2桁まで保存するケース（配当利回りなど）
  const yield = parseFloat(parseFloat(rawValue).toFixed(2));
  ```

- **条件付き状態更新**: 条件に基づいて異なる更新を行う
  ```javascript
  // 個別株判定に基づく状態更新
  setCurrentAssets(prev => 
    prev.map(item => {
      if (item.id === id) {
        if (item.fundType === FUND_TYPES.STOCK || item.isStock) {
          // 個別株の場合は手数料を強制的に0に設定
          return {
            ...item,
            annualFee: 0,
            feeSource: '個別株',
            feeIsEstimated: false
          };
        } else {
          // その他のファンドの場合はユーザー指定の値を使用
          return {
            ...item,
            annualFee: parseFloat(parseFloat(fee).toFixed(2)) || 0,
            userSetFee: true,
            feeSource: 'ユーザー設定',
            feeIsEstimated: false
          };
        }
      }
      return item;
    })
  );
  ```

- **状態更新後の処理**: setTimeout を使用して順序を確保
  ```javascript
  // 良い例
  setTargetPortfolio(prev => {
    const updated = prev.map(item => 
      item.id === id ? { ...item, targetPercentage: parseFloat(percentage) } : item
    );
    // 変更後に自動保存
    setTimeout(() => saveToLocalStorage(), 100);
    return updated;
  });
  ```

### 6.3 ローカルストレージとの連携

- **データの暗号化**: URIエンコーディングを含むBase64エンコーディングによる安全な暗号化
  ```javascript
  // 改良版 - 特殊文字にも対応
  const encryptData = (data) => {
    try {
      const jsonString = JSON.stringify(data);
      return btoa(encodeURIComponent(jsonString)); // URI化してからBase64エンコード
    } catch (error) {
      console.error('データの暗号化に失敗しました', error);
      return null;
    }
  };
  
  const decryptData = (encryptedData) => {
    try {
      const jsonString = decodeURIComponent(atob(encryptedData)); // Base64デコードしてからURI復号
      return JSON.parse(jsonString);
    } catch (error) {
      console.error('データの復号化に失敗しました', error);
      // フォールバック処理 - 古い形式を試行
      try {
        const jsonString = atob(encryptedData);
        return JSON.parse(jsonString);
      } catch (fallbackError) {
        console.error('フォールバック復号化も失敗しました', fallbackError);
        return null;
      }
    }
  };
  ```

### 6.4 Google Drive連携

- **アクセストークン管理**: 認証トークンとアクセストークンの管理
  ```javascript
  // アクセストークンの保存用変数
  let accessToken = null;
  
  // アクセストークンを設定する関数
  export function setGoogleAccessToken(token) {
    console.log('[API] Setting Google access token');
    if (token) {
      accessToken = token;
      console.log('[API] Access token set successfully');
    }
  }
  
  // 新しいアクセストークンを取得する関数
  async function getGoogleAccessToken() {
    return new Promise((resolve, reject) => {
      try {
        if (window.google && window.google.accounts && window.google.accounts.oauth2) {
          const tokenClient = window.google.accounts.oauth2.initTokenClient({
            client_id: GOOGLE_CLIENT_ID,
            scope: 'https://www.googleapis.com/auth/drive.file',
            callback: (tokenResponse) => {
              if (tokenResponse && tokenResponse.access_token) {
                console.log('[API] New access token acquired');
                resolve(tokenResponse.access_token);
              } else {
                console.warn('[API] No access token in response');
                resolve(null);
              }
            },
            error_callback: (error) => {
              console.error('[API] Error getting token:', error);
              reject(error);
            }
          });
          
          // トークンをリクエスト
          tokenClient.requestAccessToken({ prompt: '' });
        } else {
          console.warn('[API] Google OAuth API not available');
          resolve(null);
        }
      } catch (error) {
        console.error('[API] Error in getGoogleAccessToken:', error);
        reject(error);
      }
    });
  }
  ```

## 7. エラー処理

### 7.1 マルチレベルのフォールバック処理（更新）

- **段階的フォールバック**: プライマリ→セカンダリ→最終フォールバックの順で処理
  ```javascript
  // 良い例
  try {
    // プライマリソース（Alpha Vantage）からデータ取得を試行
    const alphaVantageResult = await fetchFromAlphaVantage(ticker);
    if (alphaVantageResult.success) {
      return alphaVantageResult; // 成功した場合はそのまま返す
    }
    
    // プライマリソースが失敗した場合はセカンダリソース（Yahoo Finance）を試行
    console.log(`Alpha Vantage failed for ${ticker}, trying Yahoo Finance`);
    const yahooFinanceResult = await fetchFromYahooFinance(ticker);
    if (yahooFinanceResult.success) {
      return yahooFinanceResult; // 成功した場合はそのまま返す
    }
    
    // セカンダリソースも失敗した場合はフォールバック値を使用
    console.log(`Yahoo Finance also failed for ${ticker}, using fallback data`);
    return generateFallbackData(ticker);
  } catch (error) {
    // 全体的なエラー処理
    console.error(`Error in fetching data for ${ticker}:`, error);
    return generateFallbackData(ticker);
  }
  ```

- **データソースの切り替え条件**: 明確な条件で次のソースに切り替え
  ```javascript
  // レート制限の検出
  if (response.data && response.data.Note && response.data.Note.includes('API call frequency')) {
    console.warn(`Alpha Vantage API rate limit reached for ${ticker}, trying Yahoo Finance`);
    return await fetchFromYahooFinance(ticker);
  }
  
  // データ取得失敗の検出
  if (!response.data || !response.data['Global Quote'] || !response.data['Global Quote']['05. price']) {
    console.warn(`No valid data from Alpha Vantage for ${ticker}, trying Yahoo Finance`);
    return await fetchFromYahooFinance(ticker);
  }
  ```

- **データソース追跡**: 各銘柄のデータソースを記録
  ```javascript
  // 銘柄データにソース情報を追加
  return {
    success: true,
    data: {
      // ...データフィールド
      source: 'Alpha Vantage', // または 'Yahoo Finance', 'Fallback'
    },
    message: '正常に取得しました'
  };
  ```

### 7.2 エラーキャッチと表示

- **try/catch**: 非同期処理では常に使用
  ```javascript
  try {
    const data = await fetchData();
    processData(data);
  } catch (error) {
    console.error('データ取得エラー:', error);
    setError('データの取得に失敗しました');
  }
  ```

- **ログ出力の強化**: デバッグ情報を十分に提供
  ```javascript
  try {
    console.log(`Attempting to fetch data for ${ticker} from Alpha Vantage`);
    const response = await axios.get(ALPHA_VANTAGE_URL, {
      params: { symbols: ticker },
      timeout: 15000 // タイムアウト設定
    });
    // 処理
  } catch (error) {
    console.error(`Error fetching ${ticker} from Alpha Vantage:`, error);
    console.log(`Trying Yahoo Finance for ${ticker}`);
    try {
      const yahooFinanceResponse = await axios.get(YAHOO_FINANCE_URL, {
        params: { symbols: ticker },
        timeout: 30000
      });
      // Yahoo Financeからのデータ処理
    } catch (yahooFinanceError) {
      console.error(`Yahoo Finance also failed for ${ticker}:`, yahooFinanceError);
      // 最終フォールバック
    }
  }
  ```

### 7.3 入力バリデーション

- **早期リターン**: エラーケースを最初に処理
  ```javascript
  const submitForm = (data) => {
    if (!data.email) {
      setError('メールアドレスは必須です');
      return;
    }
    
    // 正常処理を続行
  };
  ```

- **特殊条件のチェック**:
  ```javascript
  // 個別株の手数料編集防止
  const handleIncrementFee = (asset, amount) => {
    // 個別株は手数料の変更不可
    if (asset.fundType === FUND_TYPES.STOCK || asset.isStock) {
      showMessage('個別株の手数料率は変更できません（常に0%）', 'warning');
      return;
    }
    
    // 通常の処理を続行
    const newValue = Math.max(0, (asset.annualFee || 0) + amount);
    updateAnnualFee(asset.id, parseFloat(newValue.toFixed(2)));
  };
  ```

- **初期化状態のチェック**:
  ```javascript
  // 良い例 - 初期化前は保存しない、重複初期化の防止
  const saveToLocalStorage = useCallback(() => {
    if (!initialized) return false;
    
    // 保存処理を続行
  }, [initialized, /* その他の依存関係 */]);
  
  // 初期化関数の重複実行防止
  const initializeData = useCallback(() => {
    // 既に初期化済みなら処理をスキップ
    if (initialized) return;
    
    // 初期化処理...
  }, [/* 依存関係 */, initialized]);
  ```

### 7.4 API呼び出しのフォールバック処理（更新）

- **段階的フォールバック処理**: プライマリ→セカンダリ→最終フォールバックの順で試行
  ```javascript
  // プライマリソースからのデータ取得を試みる
  try {
    const alphaVantageResult = await fetchFromAlphaVantage(ticker);
    return alphaVantageResult;
  } catch (error) {
    console.error('Alpha Vantage API error:', error);
    
    // セカンダリソースを試行
    try {
      console.log(`Trying Yahoo Finance for ${ticker}`);
      const yahooFinanceResult = await fetchFromYahooFinance(ticker);
      return yahooFinanceResult;
    } catch (yahooFinanceError) {
      console.error('Yahoo Finance error:', yahooFinanceError);
      
      // すべてのソースが失敗した場合はフォールバック値を使用
      return generateFallbackData(ticker);
    }
  }
  ```

- **タイムアウト設定**:
  ```javascript
  // タイムアウト付きの呼び出し
  const response = await axios.get(apiUrl, {
    params: { /* パラメータ */ },
    timeout: 15000 // 15秒タイムアウト
  });
  
  // Yahoo Finance APIのタイムアウト
  const yahooFinanceResponse = await axios.get(YAHOO_FINANCE_URL, {
    params: { symbols: ticker },
    timeout: 30000 // 30秒タイムアウト
  });
  ```

### 7.5 データ永続化エラー処理

- **暗号化/復号化エラー**:
  ```javascript
  // データの復号化 - 改良版エラーハンドリング
  const decryptData = (encryptedData) => {
    try {
      const jsonString = decodeURIComponent(atob(encryptedData));
      return JSON.parse(jsonString);
    } catch (error) {
      console.error('データの復号化に失敗しました', error);
      
      // フォールバック処理 - 古い形式を試行
      try {
        const jsonString = atob(encryptedData);
        return JSON.parse(jsonString);
      } catch (fallbackError) {
        console.error('フォールバック復号化も失敗しました', fallbackError);
        return null;
      }
    }
  };
  ```

### 7.6 通知システムの実装（更新）

- **通知の追加と自動消去**:
  ```javascript
  // 通知を追加する関数（タイムアウト付き）
  const addNotification = useCallback((message, type = 'info') => {
    const id = Date.now();
    setNotifications(prev => [...prev, { id, message, type }]);
    
    // 情報・成功・警告通知は自動消去（5秒後）
    if (type !== 'error') {
      setTimeout(() => {
        removeNotification(id);
      }, NOTIFICATION_AUTO_DISMISS_TIME);
    }
    
    return id;
  }, [removeNotification]);
  
  // 通知を削除する関数
  const removeNotification = useCallback((id) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  }, []);
  ```

- **データソース通知の追加（更新）**:
  ```javascript
  // データソースの統計を計算
  const sourceCounts = validatedAssets.reduce((acc, asset) => {
    acc[asset.source] = (acc[asset.source] || 0) + 1;
    return acc;
  }, {});
  
  // 通知メッセージを作成
  let message = '市場データを更新しました';
  if (sourceCounts['Alpha Vantage']) {
    message += ` (Alpha Vantage: ${sourceCounts['Alpha Vantage']}件`;
  }
  if (sourceCounts['Yahoo Finance']) {
    message += `, Yahoo Finance: ${sourceCounts['Yahoo Finance']}件`;
  }
  if (sourceCounts['Fallback']) {
    message += `, フォールバック: ${sourceCounts['Fallback']}件`;
  }
  message += ')';
  
  // 成功通知を表示（5秒後に自動消去）
  addNotification(message, 'success');
  
  // Yahoo Financeの使用状況に関する通知
  if (yahooFinanceTriedCount > 0) {
    const yahooFinanceMessage = `Alpha Vantageでの取得に失敗した${yahooFinanceTriedCount}銘柄について、Yahoo Financeを使用しました（成功: ${yahooFinanceSuccessCount}件）`;
    addNotification(yahooFinanceMessage, 'info');
  }
  ```

### 7.7 エラーバウンダリの導入

- **コンポーネントレベルのエラー処理**:
  ```javascript
  // アプリケーション全体のエラーバウンダリ
  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false, error: null };
    }
    
    static getDerivedStateFromError(error) {
      return { hasError: true, error };
    }
    
    componentDidCatch(error, errorInfo) {
      console.error('アプリケーションエラー:', error, errorInfo);
    }
    
    render() {
      if (this.state.hasError) {
        return (
          <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="bg-white p-6 rounded-lg shadow-md max-w-md">
              <h2 className="text-red-600 text-xl mb-4">エラーが発生しました</h2>
              <p className="mb-2">申し訳ありませんが、アプリケーションにエラーが発生しました。</p>
              <p className="text-gray-700 mb-4">詳細: {this.state.error?.message || '不明なエラー'}</p>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                onClick={() => window.location.reload()}
              >
                リロードする
              </button>
            </div>
          </div>
        );
      }
      
      return this.props.children;
    }
  }
  ```

## 8. マルチデータソース対応（更新）

### 8.1 データソース優先順位の設定

- **データソース優先順位の定義**:
  ```javascript
  // データソース定数
  const DATA_SOURCES = {
    ALPHA_VANTAGE: 'Alpha Vantage',
    YAHOO_FINANCE: 'Yahoo Finance', // 更新
    FALLBACK: 'Fallback'
  };
  
  // データソース優先順位
  const SOURCE_PRIORITY = [
    DATA_SOURCES.ALPHA_VANTAGE, // プライマリソース
    DATA_SOURCES.YAHOO_FINANCE, // セカンダリソース（更新）
    DATA_SOURCES.FALLBACK // 最終フォールバック
  ];
  ```

- **切り替え条件の設定**:
  ```javascript
  // レート制限の検出
  if (response.data && response.data.Note && response.data.Note.includes('API call frequency')) {
    console.warn(`Rate limit reached for ${ticker}, switching to ${SOURCE_PRIORITY[1]}`);
    return getDataFromSource(ticker, SOURCE_PRIORITY[1]);
  }
  
  // データがない場合の検出
  if (!response.data || !response.data['Global Quote'] || !response.data['Global Quote']['05. price']) {
    console.warn(`No data for ${ticker} from ${SOURCE_PRIORITY[0]}, switching to ${SOURCE_PRIORITY[1]}`);
    return getDataFromSource(ticker, SOURCE_PRIORITY[1]);
  }
  ```

### 8.2 データソース取得関数の実装（更新）

- **一般化されたデータソース取得関数**:
  ```javascript
  // 指定されたデータソースからデータを取得する関数
  async function getDataFromSource(ticker, source) {
    switch(source) {
      case DATA_SOURCES.ALPHA_VANTAGE:
        return fetchFromAlphaVantage(ticker);
      case DATA_SOURCES.YAHOO_FINANCE:
        return fetchFromYahooFinance(ticker);
      case DATA_SOURCES.FALLBACK:
      default:
        return generateFallbackData(ticker);
    }
  }
  ```

- **各データソース固有の取得関数**:
  ```javascript
  // Alpha Vantageからデータを取得する関数
  async function fetchFromAlphaVantage(ticker) {
    try {
      // Alpha Vantageからのデータ取得ロジック
      // ...
    } catch (error) {
      console.error(`Alpha Vantage error for ${ticker}:`, error);
      throw error; // エラーを上位へ伝播
    }
  }
  
  // Yahoo Financeからデータを取得する関数
  async function fetchFromYahooFinance(ticker) {
    try {
      // Yahoo Financeからのデータ取得ロジック
      // ...
    } catch (error) {
      console.error(`Yahoo Finance error for ${ticker}:`, error);
      throw error; // エラーを上位へ伝播
    }
  }
  ```

### 8.3 データソース情報の表示（更新）

- **データソースバッジの実装**:
  ```jsx
  // データソースバッジコンポーネント
  function DataSourceBadge({ source }) {
    let badgeClass = 'text-xs px-1.5 py-0.5 rounded ';
    
    switch(source) {
      case 'Alpha Vantage':
        badgeClass += 'bg-green-100 text-green-800';
        break;
      case 'Yahoo Finance':
        badgeClass += 'bg-blue-100 text-blue-800';
        break;
      case 'Fallback':
      default:
        badgeClass += 'bg-yellow-100 text-amber-800';
    }
    
    return (
      <span className={badgeClass}>
        {source}
      </span>
    );
  }
  ```

- **データソース統計の表示**:
  ```jsx
  // データソース統計コンポーネント
  function DataSourceStats({ assets }) {
    // データソースごとに集計
    const sourceCounts = assets.reduce((acc, asset) => {
      acc[asset.source] = (acc[asset.source] || 0) + 1;
      return acc;
    }, {});
    
    return (
      <div className="text-sm text-gray-600 mt-2">
        <span>データソース: </span>
        {Object.entries(sourceCounts).map(([source, count]) => (
          <span key={source} className="ml-2">
            {source}: {count}件
          </span>
        ))}
      </div>
    );
  }
  ```

### 8.4 ティッカーフォーマット関数（更新）

- **各データソース用のティッカーフォーマット関数**:
  ```javascript
  // Alpha Vantage用にティッカーをフォーマットする関数
  function formatTickerForAlphaVantage(ticker) {
    if (!ticker) return '';
    ticker = ticker.toUpperCase();
    
    // Alpha Vantageは日本株の.Tをそのまま使用
    return ticker;
  }
  
  // Yahoo Finance用にティッカーをフォーマットする関数
  function formatTickerForYahooFinance(ticker) {
    if (!ticker) return '';
    ticker = ticker.toUpperCase();
    
    // 4桁数字の場合は.Tを追加
    if (/^\d{4}$/.test(ticker) && !ticker.includes('.T')) {
      return `${ticker}.T`;
    }
    
    return ticker;
  }
  ```

## 9. Yahoo Finance API統合（更新）

### 9.1 Yahoo Finance API実装（新規）

- **プロキシエンドポイント**: `/api/yahoo-finance-proxy`
- **機能**: 株価データと為替レートの取得
- **Yahoo Finance非公式API**: `https://query1.finance.yahoo.com/v7/finance/quote`
- **パラメータ**:
  - 株価データ取得: `symbols=AAPL,MSFT,1301.T`
  - 為替レート取得: `exchange_rate=USDJPY`
- **レスポンス形式**: 標準化されたJSON形式

### 9.2 yahoo-finance-proxy.js の実装概要（新規）

- **サーバーレス関数**: JavaScript実装でYahoo Finance APIを呼び出し
- **株価データ取得ロジック**: 銘柄シンボルに基づいて株価情報を取得
- **為替レート取得ロジック**: 通貨ペアに基づいて為替レート情報を取得
- **日本株対応**: 4桁数字の銘柄に自動的に`.T`を追加
- **エラーハンドリング**: フォールバック値を生成する機能

```javascript
// yahoo-finance-proxy.js の主要部分
async function handleStockData(symbols, headers) {
  // 日本株の場合は.Tを追加
  const formattedSymbols = symbols.split(',').map(symbol => {
    if (/^\d{4}$/.test(symbol) && !symbol.includes('.T')) {
      return `${symbol}.T`;
    }
    return symbol.trim();
  });
  
  try {
    // Yahoo Finance APIを呼び出す
    const yahooUrl = `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${formattedSymbols.join(',')}`;
    const response = await axios.get(yahooUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    // 結果を整形
    const result = {};
    response.data.quoteResponse.result.forEach(quote => {
      const ticker = quote.symbol;
      result[ticker] = {
        ticker: ticker,
        price: quote.regularMarketPrice,
        name: quote.shortName || quote.longName || ticker,
        currency: quote.currency,
        lastUpdated: new Date().toISOString()
      };
    });
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        data: result
      })
    };
  } catch (error) {
    // エラー処理...
  }
}
```

## 改訂履歴

| バージョン | 日付 | 変更内容 | 担当者 |
|----------|-----|---------|-------|
| 1.0      | 2025/03/06 10:30 | 初版作成 | |
| 1.1      | 2025/03/08 13:45 | jwt-decode対応、アクセシビリティ対応、ESLint設定更新 | |
| 1.2      | 2025/03/10 09:15 | データ取得フォールバック機構、環境変数名統一、ログ出力強化 | |
| 1.3      | 2025/03/12 16:25 | ファンドタイプ判定と年間手数料計算に関する規約追加、個別株の取り扱い追加 | |
| 1.4      | 2025/03/15 10:50 | ローカルストレージによるデータ永続化、コンテキスト間連携、React Hooksルール強化 | |
| 2.0      | 2025/03/17 18:45 | 暗号化/復号化処理の強化、エラーハンドリング改善、Google Drive API連携機能の実装、エラーバウンダリ導入 | |
| 3.0      | 2025/03/18 16:00 | 配当情報関連の変数と関数の命名規則、配当情報の表示・計算機能の実装規則、コンポーネントスタイルの更新 | |
| 3.1      | 2025/03/19 15:30 | 通知システムの自動消去機能追加、通知コンポーネントとスタイルの規約追加、初期化処理の重複実行防止対策の規約追加 | |
| 3.2      | 2025/03/20 10:30 | マルチデータソース対応の規約追加、データソース表示コンポーネント、フォールバック処理の標準化、Yahoo Finance対応の命名規則追加 | |
| 3.3      | 2025/03/22 12:30 | Yahoo FinanceをPython yfinance形式に変更、Pythonスクリプト実行に関する命名規則の追加、Python関連の関数名・変数名の規約追加、データソース名の更新 | |
| 3.4      | 2025/03/23 09:30 | Yahoo Finance APIをJavaScript実装に変更、データソース名とフォールバック処理の更新、Python yfinance実装の廃止予定化、関連する命名規則の更新 | |

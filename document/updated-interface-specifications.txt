# ポートフォリオマネージャー インターフェース仕様書（更新版3.1）

**最終更新日時:** 2025/03/19 15:00

*本仕様書は、AIの別セッションでも開発を引き継げるよう設計されています。*

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。ブラウザのローカルストレージを活用したデータ永続化およびGoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンドなど）
- 年間手数料率の自動推定と計算（個別株は0%固定）
- 年間配当金の計算と配当情報の管理
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ永続化（URIエンコード+Base64による安全な暗号化）
- Google認証・Googleドライブ連携（OAuth 2.0対応）
- 市場データの自動取得（Alpha Vantageをプライマリソース、フォールバック値をバックアップとして使用）
- iOS風タブバーによるナビゲーション
- 自動消去機能付き通知システム
- エラーバウンダリによるアプリケーション耐障害性の向上

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x, Fetch API
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（URIエンコード+Base64暗号化）
- **クラウド連携**: Google Drive API v3

## 2. インターフェース構造

### 2.1 ページ構成
- **ダッシュボード** (`/`): 資産概要、グラフ、銘柄詳細
- **設定** (`/settings`): 銘柄追加、保有資産設定、目標配分設定
- **シミュレーション** (`/simulation`): 追加予算と購入シミュレーション
- **データ連携** (`/data`): インポート/エクスポート、データ同期、Googleドライブ連携

### 2.2 ナビゲーション
- 画面下部固定のiOS風タブナビゲーション
- 4つのタブ（ホーム、設定、シミュレーション、データ）
- アイコンとテキストの組み合わせUI
- アクティブタブの視覚的強調（青色ハイライト）
- セーフエリア対応（iPhoneのホームバーなど）

### 2.3 レイアウト構造
```
+----------------------------------------+
|              ヘッダー                  |
| (通貨切替、データ更新、ユーザープロフィール) |
+----------------------------------------+
|                                        |
|             メインコンテンツ             |
|                                        |
|                                        |
|                                        |
+----------------------------------------+
|             タブナビゲーション           |
| [ホーム] [設定] [シミュレーション] [データ] |
+----------------------------------------+
|         セーフエリア（ホームバー用）       |
+----------------------------------------+
```

### 2.4 エラーバウンダリ
- アプリケーション全体をエラーバウンダリでラップ
- 予期しないエラー発生時にアプリケーションのクラッシュを防止
- ユーザーフレンドリーなエラー表示画面
- リロードボタンによる復旧機能

### 2.5 通知システム（更新）
- 画面右下に固定表示される通知パネル
- 通知のタイプに応じた色分け表示
  - 成功：緑色背景
  - 警告：黄色背景
  - エラー：赤色背景
  - 情報：青色背景
- 自動消去機能付き
  - 情報、成功、警告通知：5秒後に自動消去
  - エラー通知：ユーザーによる手動消去が必要
- 各通知には手動で閉じるボタン（×）を表示
- 同時に複数の通知を表示可能
- スタック表示で新しい通知が下に追加される

## 3. 状態管理

### 3.1 コンテキスト設計
- **AuthContext**: 認証状態、ユーザー情報、Googleドライブ連携、PortfolioContextへの参照
- **PortfolioContext**: ポートフォリオデータ、資産情報、配当情報、シミュレーション計算、手数料管理、ローカルストレージ操作

### 3.2 コンテキスト間の連携
- **ContextConnector**: AuthContextとPortfolioContextの相互参照を管理するコンポーネント
- **setPortfolioContextRef**: AuthContextがPortfolioContextへの参照を保持するための関数
- **handleAuthStateChange**: 認証状態変更時にPortfolioContextに通知するための関数

### 3.3 主要な状態変数
- `baseCurrency`: 基準通貨 ('JPY' | 'USD')
- `exchangeRate`: 為替レート情報 ({ rate, source, lastUpdated })
- `currentAssets`: 保有資産の配列（配当情報を含む）
- `targetPortfolio`: 目標配分の配列
- `additionalBudget`: 追加投資予算
- `isAuthenticated`: 認証状態
- `user`: ユーザー情報
- `notifications`: 通知メッセージの配列
- `dataSource`: データソース ('local' | 'cloud')
- `lastSyncTime`: 最終同期時間
- `initialized`: 初期化完了フラグ
- `hasError`: エラー状態（エラーバウンダリ用）
- `totalAssets`: 総資産額
- `annualFees`: 年間手数料合計
- `annualDividends`: 年間配当金合計

### 3.4 データ構造
#### 保有資産 (Asset)
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', 'ティッカー固有の情報', 'ファンドタイプからの推定', 'ユーザー設定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string;
  source?: string; // 'Alpha Vantage' | 'Fallback'
  dividendYield: number; // 配当利回り（%）
  hasDividend: boolean; // 配当があるかどうか
  dividendFrequency: string; // 配当頻度（'monthly', 'quarterly', 'semi-annual', 'annual'）
  dividendIsEstimated: boolean; // 配当情報が推定値かどうか
}
```

#### 通知メッセージ（更新）
```typescript
interface Notification {
  id: number; // タイムスタンプをIDとして使用
  message: string; // 表示メッセージ
  type: 'info' | 'success' | 'warning' | 'error'; // 通知タイプ
}
```

#### ローカルストレージデータ
```typescript
interface StorageData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: number;
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

## 4. コンポーネント仕様

### 4.1 ダッシュボード画面コンポーネント
- **PortfolioSummary**: 総資産、銘柄数、年間手数料、年間配当金の表示
  - 最高/最低手数料率の銘柄を表示
  - 最高配当利回りの銘柄を表示
  - ファンドタイプ別の手数料統計を表示
  - ファンドタイプ別の配当金統計を表示
  - 手数料と配当についての説明を表示
- **PortfolioCharts**: 理想配分と現在配分の円グラフ
- **DifferenceChart**: 理想と現状の差分バーチャート
- **AssetsTable**: 保有資産の詳細テーブル
  - データソースと銘柄タイプの表示
  - 年間手数料の表示（個別株は0%）
  - 配当情報の表示（利回り、頻度、年間配当金）
  - 配当情報源のバッジ表示（推定値/確定値）
- **DataStatusBar**: データ更新状態と最終更新時刻の表示

### 4.2 設定画面コンポーネント
- **TickerSearch**: 銘柄検索と追加機能
- **PopularTickers**: 人気銘柄のワンクリック追加
  - インデックスファンド・ETFカテゴリ
  - 個別株カテゴリ
  - 日本市場カテゴリ
- **HoldingsEditor**: 保有資産の編集
  - 保有数量編集（小数点4桁対応）
  - 年間手数料率表示（個別株は編集不可）
  - 銘柄タイプの表示
  - 手数料情報源を表示（個別株、推定値、固有情報、ユーザー設定）
  - 配当情報の表示（利回り、頻度）
  - 配当情報源のバッジ表示
- **AllocationEditor**: 目標配分の編集

### 4.3 シミュレーション画面コンポーネント
- **BudgetInput**: 追加予算の入力と予算プリセット
  - 直接入力と増減ボタン
  - 予算プリセットボタン（10万、30万、50万、100万）
  - アクセシビリティ対応済み（ラベルと入力フィールドの関連付け）
- **SimulationResult**: シミュレーション結果表示と購入機能

### 4.4 データ連携画面コンポーネント
- **ExportOptions**: データエクスポート機能
  - JSON/CSV形式選択
  - ファイルダウンロードとクリップボードコピー
  - アクセシビリティ対応済み（ラジオグループの適切な構造化）
- **ImportOptions**: データインポート機能
  - JSON/CSV形式選択
  - ファイル/クリップボード/テキスト入力による取り込み
  - アクセシビリティ対応済み
- **GoogleDriveIntegration**: Googleドライブ連携機能
  - ログイン状態表示
  - クラウド保存/読み込みボタン
  - データ同期ステータス表示
  - 同期ボタン
- **DataErrorRecovery**: データ修復機能
  - ローカルストレージのクリア機能
  - データリセット機能
  - エラー報告表示

### 4.5 共通コンポーネント
- **Header**: アプリヘッダー（通貨切替、更新ボタン）
- **TabNavigation**: iOS風タブナビゲーション
- **LoginButton**: Googleログインボタン
- **UserProfile**: ユーザープロフィール表示
- **ToastNotification**: 通知メッセージ表示（更新）
  - 自動消去タイマー機能（情報/成功/警告通知は5秒後に自動消去）
  - 手動消去ボタン
  - 通知タイプ別のスタイリング
- **DataSourceBadge**: データソース表示バッジ
  - 各データソースに応じた表示（Alpha Vantage/Fallback）
  - ソースに応じた色分け（緑: Alpha Vantage, 赤: Fallback）
- **ErrorBoundary**: エラーバウンダリコンポーネント
  - エラー発生時の処理
  - リロード機能
  - エラー詳細表示

### 4.6 ユーティリティコンポーネント
- **FundTypeBadge**: ファンドタイプを表示するバッジ
  - 個別株: 灰色バッジ
  - ETF: 青色バッジ
  - インデックスファンド: 緑色バッジ
  - アクティブファンド: 紫色バッジ
- **FeeSourceBadge**: 手数料情報の出所を表示するバッジ
  - 個別株: 灰色バッジ
  - 推定値: 黄色バッジ
  - ティッカー固有の情報: 緑色バッジ
  - ユーザー設定: 紫色バッジ
- **DividendBadge**: 配当情報を表示するバッジ
  - 配当なし: 灰色バッジ
  - 配当あり（推定値）: 黄色バッジ
  - 配当あり（確定値）: 緑色バッジ
  - 配当頻度別のラベル表示
- **ContextConnector**: コンテキスト間の連携を管理するコンポーネント

## 5. API・外部連携仕様

### 5.1 Alpha Vantage API連携（プライマリソース）
- **エンドポイント**: `alpha-vantage-proxy` (Netlify Functions経由)
- **機能**: 市場データのプライマリソース
- **APIキー**: 環境変数 `ALPHA_VANTAGE_API_KEY` で設定
- **タイムアウト設定**: 15秒
- **レート制限**: 無料プランで1日25リクエストまで
- **フォールバック**: API失敗時のデフォルト値使用

### 5.2 ローカルストレージ連携（更新版）
- **ストレージキー**: `portfolioData`
- **暗号化方式**: URIエンコード + Base64エンコーディングによる安全な暗号化
- **保存データ**: ポートフォリオデータ、配当情報、設定情報、タイムスタンプ
- **保存タイミング**: データ変更時、明示的な保存操作時、同期時
- **読み込みタイミング**: アプリケーション初期化時、明示的な読み込み操作時
- **フォールバック処理**: 古い形式のデータ読み込みにも対応
- **データ構造検証**: 復号化後のデータ構造を検証し、整合性を確認
- **重複初期化防止**: 初期化済みフラグによる重複処理の回避

### 5.3 Google OAuth認証（更新版）
- **認証フロー**: Google Identity Services APIを使用した最新のOAuthフロー
- **スコープ**: ユーザー情報、Googleドライブアクセス（`https://www.googleapis.com/auth/drive.file`）
- **トークン管理**: localStorage保存、有効期限チェック
- **ライブラリ**: @react-oauth/google 0.11.0
- **トークン解析**: jwt-decode 3.x
- **スクリプト**: Google Identity Services API (`accounts.google.com/gsi/client`)

### 5.4 Googleドライブ連携（更新版）
- **機能**: ポートフォリオデータの保存・読み込み
- **ファイル形式**: JSON
- **アクセス権**: アプリ固有のファイル権限
- **同期ロジック**: タイムスタンプに基づく最新データの特定
- **API対応**: Fetch APIを使用した直接のドライブAPI呼び出し
- **エンドポイント**:
  - ファイル保存: `https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart`
  - ファイル検索: `https://www.googleapis.com/drive/v3/files?q=name='filename' and trashed=false`
  - ファイル読み込み: `https://www.googleapis.com/drive/v3/files/{fileId}?alt=media`
- **認証**: OAuth 2.0アクセストークン
- **エラーハンドリング**: 認証エラー、ネットワークエラー、APIエラーに対応

### 5.5 ファンド情報API（更新版）
- **機能**: 銘柄タイプ判定、手数料情報取得、配当情報取得
- **実装方法**: フロントエンドで実装（`fundUtils.js`）
- **データソース**: アプリ内DBとロジックによる判定
- **個別株判定**: ティッカーパターンと名前に基づく判定
- **配当情報データベース**: `TICKER_SPECIFIC_DIVIDENDS` による特定銘柄の配当情報
- **配当判定ロジック**: ファンドタイプと名前に基づく配当の有無を判定
- **配当頻度判定**: 名前に基づく配当頻度（monthly, quarterly, semi-annual, annual）の推定

## 6. イベントフロー

### 6.1 初期化フロー（更新版）
1. アプリケーション起動
2. `PortfolioProvider` と `AuthProvider` の初期化
3. ContextConnectorによるコンテキスト間連携の確立
4. `initialized`フラグのチェック（既に初期化済みの場合は処理をスキップ）
5. ローカルストレージからのデータ読み込み（エラーハンドリング強化）
6. トークンストレージからの認証情報読み込み
7. データがあれば状態を更新し、UIに反映
8. 配当情報が欠けている場合は初期値を設定
9. 自動消去機能付き通知の表示（「前回のデータを読み込みました」）
10. 初期化完了のフラグを設定
11. エラー発生時はエラーバウンダリでキャッチ

```javascript
// 初期化処理の主要部分（更新版）
const initializeData = useCallback(() => {
  try {
    // 既に初期化済みなら何もせず終了
    if (initialized) return;
    
    console.log('データの初期化を開始...');
    const localData = loadFromLocalStorage();
    
    if (localData) {
      // 各状態を更新
      // ...
      
      // 通知を表示（5秒後に自動消去）
      addNotification('前回のデータを読み込みました', 'info');
    } else {
      console.log('ローカルストレージにデータがありませんでした。初期状態を使用します。');
    }
    
    // 初期化完了をマーク
    setInitialized(true);
  } catch (error) {
    console.error('データの初期化中にエラーが発生しました:', error);
    addNotification(`データの初期化中にエラーが発生しました: ${error.message}`, 'error');
    setInitialized(true); // エラーが発生しても初期化完了とマークする
  }
}, [loadFromLocalStorage, addNotification, validateAssetTypes, saveToLocalStorage, initialized]);
```

### 6.2 通知フロー（新規）
1. 通知表示関数（`addNotification`）が呼び出される
2. タイムスタンプをIDとして使用
3. 通知タイプに応じた表示（info, success, warning, error）
4. 通知タイプが error 以外の場合は5秒後に自動消去するタイマーを設定
5. 通知がUIに表示される
6. 自動または手動消去時に通知を配列から削除

```javascript
// 通知を追加する関数（タイムアウト付き）
const addNotification = useCallback((message, type = 'info') => {
  const id = Date.now();
  setNotifications(prev => [...prev, { id, message, type }]);
  
  // 情報・成功・警告通知は自動消去（5秒後）
  if (type !== 'error') {
    setTimeout(() => {
      removeNotification(id);
    }, 5000);
  }
  
  return id;
}, []);

// 通知を削除する関数
const removeNotification = useCallback((id) => {
  setNotifications(prev => prev.filter(notification => notification.id !== id));
}, []);
```

### 6.3 データ保存フロー（更新版）
1. データ変更（銘柄追加、保有数量変更、目標配分変更など）
2. 状態更新関数（useState）による状態更新
3. 状態更新後のコールバックで `saveToLocalStorage` 呼び出し
4. 初期化完了フラグ（initialized）をチェック
5. データをURIエンコード後にBase64暗号化してローカルストレージに保存
6. 認証中の場合は必要に応じてクラウド同期
7. 保存結果に応じた通知（成功時は5秒後に自動消去）

### 6.4 市場データ更新フロー（更新版）
1. ユーザーがデータ更新ボタンをクリック
2. 銘柄ごとに最新の価格、手数料情報、配当情報を取得
3. 個別株は常に手数料率0%を維持
4. 手数料情報や配当情報に変更があった場合は通知
5. データをローカルストレージに自動保存
6. すべての通知は5秒後に自動消去（エラー以外）

### 6.5 データ同期フロー（更新版）
1. ユーザーが同期ボタンをクリック
2. 新しいアクセストークンをGoogle Identity Services APIから取得
3. ローカルデータとクラウドデータの取得
4. タイムスタンプを比較して最新データを特定
5. 最新データを状態に適用
6. 配当情報が欠けている場合は初期値を設定
7. 両方のストレージを最新状態に更新
8. 同期情報（日時、ソース）を更新
9. 自動消去機能付き通知の表示

## 7. スタイリング規則

### 7.1 カラーパレット（更新版）
- **プライマリ**: 青系 (#0088FE, #1E88E5, etc.)
- **アクセント**: 緑系 (#00C49F, #4CAF50, etc.)
- **警告**: 赤系 (#FF0000, #F44336, etc.)
- **背景**: 白/グレー系 (#FFFFFF, #F5F5F5, etc.)
- **テキスト**: 黒/グレー系 (#333333, #666666, etc.)
- **通知表示用**:
  - 情報: 青系 (#2196F3) - 背景: bg-blue-100, テキスト: text-blue-700
  - 成功: 緑系 (#4CAF50) - 背景: bg-green-100, テキスト: text-green-700
  - 警告: 黄色系 (#FFC107) - 背景: bg-yellow-100, テキスト: text-yellow-700
  - エラー: 赤系 (#F44336) - 背景: bg-red-100, テキスト: text-red-700
- **データソース表示用**:
  - Alpha Vantage: 緑系 (#4CAF50)
  - Fallback: 赤系 (#F44336)
- **ファンドタイプ表示用**:
  - 個別株: グレー系 (#9E9E9E)
  - ETF: 青系 (#2196F3)
  - インデックスファンド: 緑系 (#4CAF50)
  - アクティブファンド: 紫系 (#9C27B0)
- **手数料情報源表示用**:
  - 個別株: グレー系 (#9E9E9E)
  - ティッカー固有情報: 緑系 (#4CAF50)
  - 推定値: 黄色系 (#FFC107)
  - ユーザー設定: 紫系 (#9C27B0)
- **配当情報表示用**:
  - 配当なし: グレー系 (#9E9E9E)
  - 配当あり（確定値）: 緑系 (#4CAF50)
  - 配当あり（推定値）: 黄色系 (#FFC107)
  - 高配当: 深緑系 (#2E7D32)
- **データソース表示用**:
  - ローカル: 黄色系 (#FFC107)
  - クラウド: 青系 (#2196F3)
- **エラー処理用**:
  - エラー表示: 赤系 (#F44336)
  - エラーバウンダリ背景: 明るい赤 (#FFEBEE)
  - リカバリーボタン: 青系 (#2196F3)

### 7.2 タイポグラフィ
- **フォント**: システムフォント（sans-serif）
- **見出し**: 16-20px、太字（font-bold）
- **本文**: 14-16px、通常（font-normal）
- **小テキスト**: 12px、軽量（font-light）
- **エラーメッセージ**: 16px、太字（font-bold）、赤色
- **通知テキスト**: 14px（text-sm）、通常（font-normal）

### 7.3 コンポーネントスタイル（更新版）
- **通知コンポーネント**: 角丸（rounded-md）、影付き（shadow-md）、タイプ別の背景色
```jsx
<div 
  key={notification.id}
  className={`p-3 rounded-md shadow-md text-sm ${
    notification.type === 'error' ? 'bg-red-100 text-red-700' :
    notification.type === 'warning' ? 'bg-yellow-100 text-yellow-700' :
    notification.type === 'success' ? 'bg-green-100 text-green-700' :
    'bg-blue-100 text-blue-700'
  }`}
>
  <div className="flex justify-between items-start">
    <span>{notification.message}</span>
    <button 
      onClick={() => removeNotification(notification.id)}
      className="ml-2 text-gray-500 hover:text-gray-700"
    >
      &times;
    </button>
  </div>
</div>
```

- **カード**: 白背景、丸角、影付き
- **ボタン**: 背景色付き、丸角、ホバーエフェクト
- **入力フィールド**: 境界線付き、フォーカス時強調
- **テーブル**: 行の区切り線、隔行カラー、レスポンシブ
- **銘柄タイプバッジ**: 小さい丸型または角丸ラベル、タイプに応じた色
- **手数料情報バッジ**: 小さい丸型または角丸ラベル、情報源に応じた色
- **配当情報バッジ**: 小さい丸型または角丸ラベル、配当状況に応じた色
- **個別株行**: 灰色背景で視覚的に区別
- **同期ステータスインジケーター**: 丸いドット、色による状態表示
- **エラー表示コンポーネント**: 中央配置のモーダル風デザイン、明確なエラー詳細表示

### 7.4 レスポンシブデザイン
- **モバイル優先**: 基本はモバイル表示に最適化
- **ブレークポイント**: sm(640px), md(768px), lg(1024px)
- **iOS互換**: セーフエリア対応、タブバー設計
- **通知位置**: 画面右下固定（z-50）、モバイルでも適切に表示

## 8. エラー処理・通知

### 8.1 エラー種別
- **ネットワークエラー**: API接続失敗
- **認証エラー**: 認証失敗、トークン期限切れ
- **データエラー**: 不正なデータ形式、処理失敗
- **入力エラー**: バリデーション失敗
- **手数料設定エラー**: 個別株の手数料変更試行
- **ストレージエラー**: ローカルストレージ読み書き失敗
- **同期エラー**: データ同期失敗
- **アプリケーションエラー**: 予期しないJavaScriptエラー

### 8.2 通知表示（更新）
- **成功通知**: 緑色背景、自動消去（5秒）
- **警告通知**: 黄色背景、自動消去（5秒）
- **エラー通知**: 赤色背景、手動消去のみ
- **情報通知**: 青色背景、自動消去（5秒）
- **通知位置**: 画面右下に固定表示
- **通知スタック**: 新しい通知が下に追加
- **閉じるボタン**: すべての通知に手動で閉じるボタンを表示
- **自動消去**: エラー以外の通知は5秒後に自動消去

### 8.3 API障害対応
- 複数データソースの使用によるフォールバック機構
- タイムアウト設定による応答遅延の処理
- 詳細なエラーログによるデバッグ容易化
- ユーザーフレンドリーなエラーメッセージ表示
- データソースの表示によるユーザー通知

### 8.4 ストレージ障害対応（更新版）
- ローカルストレージ失敗時のエラー処理強化
- データ復号化失敗時のフォールバック処理追加
- 初期化完了フラグによる重複保存・初期化の防止
- データ構造検証による整合性確認
- 適切なエラーメッセージと通知
- ローカルストレージクリア機能による修復オプション

### 8.5 認証障害対応
- OAuth認証エラーの適切なハンドリング
- トークン失効時の再認証フロー
- アクセストークン取得エラーの処理
- ユーザーフレンドリーな認証エラーメッセージ

### 8.6 アプリケーションエラー対応
- エラーバウンダリによる予期しないエラーのキャッチ
- エラー発生時のUIフォールバック表示
- リロードボタンによる簡単な回復方法の提供
- 詳細なエラー情報のログ出力

## 9. 配当情報表示のUI

### 9.1 PortfolioSummaryでの配当表示
- 年間配当金の合計を表示（総資産の上部セクション）
- ポートフォリオ全体の配当利回りを表示
- 最高配当利回りの銘柄を表示（詳細セクション）
- ファンドタイプ別の配当金統計を表示（詳細セクション）

### 9.2 AssetsTableでの配当表示
- 保有資産テーブルに配当関連の列を追加
- 配当利回りと配当頻度の表示
- 配当情報源のバッジ表示（推定値/確定値）
- 年間配当金の表示（通貨換算対応）

### 9.3 HoldingsEditorでの配当表示
- 保有資産編集画面に配当情報の列を追加
- 配当利回りと配当頻度の表示
- 配当情報源のバッジ表示
- 年間配当金の表示

### 9.4 配当頻度の表示変換
```javascript
// 配当頻度の表示変換
const formatDividendFrequency = (frequency) => {
  switch (frequency) {
    case 'monthly': return '毎月';
    case 'quarterly': return '四半期';
    case 'semi-annual': return '半年';
    case 'annual': return '年1回';
    default: return '不明';
  }
};
```

## 10. データ永続化と同期（更新版）

### 10.1 データ永続化の仕組み（更新版）
- **保存対象データ**: ポートフォリオデータ、配当情報、設定値、タイムスタンプ
- **保存形式**: URIエンコード + Base64暗号化されたJSON
- **保存場所**: ブラウザのローカルストレージ
- **自動保存**: データ変更時に遅延付きで自動保存
- **重複保存防止**: 初期化フラグによる保存の制御
- **エラーリカバリ**: 復号化失敗時の適切な処理とフォールバック機能
- **データ構造検証**: 復号化後のデータ構造を検証し、整合性を確認

### 10.2 データ同期の仕組み（更新版）
- **同期対象**: ローカルストレージとGoogleドライブ
- **同期タイミング**: 
  - 明示的な同期ボタンクリック時
  - ログイン直後（オプション）
- **認証処理**: Google Identity Services APIを使用した最新のOAuth 2.0認証
- **アクセストークン管理**: Google Drive API用の適切なスコープを持つアクセストークン取得
- **競合解決**: タイムスタンプによる新しいデータの優先
- **配当情報の整合性**: 欠けている配当情報には初期値を設定
- **エラーリカバリ**: 同期失敗時の適切な通知と状態維持
- **通知表示**: 同期状態に関する通知（5秒後に自動消去）

### 10.3 認証連携の仕組み（更新版）
- **認証情報保存**: ローカルストレージにJWTトークン保存
- **認証状態復元**: アプリケーション起動時にトークン検証
- **権限スコープ**: ドライブAPI用の適切なスコープ設定
- **セキュリティ**: トークン有効期限の確認と自動ログアウト
- **API層連携**: 認証トークンをAPI層にも通知
- **アクセストークン取得**: Google Identity Services APIを使用した明示的なトークン取得
- **認証通知**: 認証状態の変更に関する通知（5秒後に自動消去）

### 10.4 エラー回復機能
- **ローカルストレージクリア**: データ損傷時にストレージをクリアする機能
- **エラーバウンダリ**: アプリケーションクラッシュを防止するエラーバウンダリ
- **リロードボタン**: エラー発生時にアプリケーションを再読み込みする機能
- **詳細なエラー情報**: エラー発生原因を特定しやすいログ出力
- **永続エラー通知**: エラー通知は手動で閉じるまで表示を維持

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/6 | 初版作成 |  |
| 2.0 | 2025/03/7 | jwt-decode対応、アクセシビリティ対応、プロキシ設定更新 |  |
| 3.0 | 2025/03/07 10:20 | Alpha Vantage API連携強化、環境変数名統一、マルチソースデータ取得フロー実装 |  |
| 4.0 | 2025/03/09 13:40 | Yahoo Finance API無効化、Alpha Vantageをプライマリソースに変更、401認証エラー問題対応 |  |
| 5.0 | 2025/03/10 14:35 | 銘柄タイプ自動判定と年間手数料の自動推定機能追加 |  |
| 6.0 | 2025/03/11 17:20 | 個別株の手数料固定（0%）とファンド手数料計算ロジックの修正 |  |
| 7.0 | 2025/03/12 10:45 | 人気銘柄リストの更新 |  |
| 8.0 | 2025/03/13 16:15 | ローカルストレージによるデータ永続化とGoogle認証連携強化 |  |
| 9.0 | 2025/03/16 19:20 | データ暗号化/復号化処理の強化、Google Drive API連携改善、エラーバウンダリ導入、認証フロー更新 |  |
| 10.0 | 2025/03/18 15:45 | 配当情報の管理機能追加、配当情報の表示UI実装、PortfolioSummaryとAssetsTableの配当情報表示追加、Google Drive API連携の安定性向上 |  |
| 3.1 | 2025/03/19 15:00 | 通知システムの自動消去機能追加（タイプ別）、初期化処理の重複実行防止機能追加、通知スタイルの詳細定義追加 |  |

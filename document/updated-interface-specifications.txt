# ポートフォリオマネージャー インターフェース仕様書（更新版）

*本仕様書は、AIの別セッションでも開発を引き継げるよう設計されています。*

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。GoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- Google認証・Googleドライブ連携
- 市場データの自動取得（複数ソース対応: Yahoo Finance → Alpha Vantage → フォールバック値）
- iOS風タブバーによるナビゲーション

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify

## 2. インターフェース構造

### 2.1 ページ構成
- **ダッシュボード** (`/`): 資産概要、グラフ、銘柄詳細
- **設定** (`/settings`): 銘柄追加、保有資産設定、目標配分設定
- **シミュレーション** (`/simulation`): 追加予算と購入シミュレーション
- **データ連携** (`/data`): インポート/エクスポート、Googleドライブ連携

### 2.2 ナビゲーション
- 画面下部固定のiOS風タブナビゲーション
- 4つのタブ（ホーム、設定、シミュレーション、データ）
- アイコンとテキストの組み合わせUI
- アクティブタブの視覚的強調（青色ハイライト）
- セーフエリア対応（iPhoneのホームバーなど）

### 2.3 レイアウト構造
```
+----------------------------------------+
|              ヘッダー                  |
| (通貨切替、データ更新、ユーザープロフィール) |
+----------------------------------------+
|                                        |
|             メインコンテンツ             |
|                                        |
|                                        |
|                                        |
+----------------------------------------+
|             タブナビゲーション           |
| [ホーム] [設定] [シミュレーション] [データ] |
+----------------------------------------+
|         セーフエリア（ホームバー用）       |
+----------------------------------------+
```

## 3. 状態管理

### 3.1 コンテキスト設計
- **AuthContext**: 認証状態、ユーザー情報、Googleドライブ連携
- **PortfolioContext**: ポートフォリオデータ、資産情報、シミュレーション計算

### 3.2 主要な状態変数
- `baseCurrency`: 基準通貨 ('JPY' | 'USD')
- `exchangeRate`: 為替レート情報 ({ rate, source, lastUpdated })
- `currentAssets`: 保有資産の配列
- `targetPortfolio`: 目標配分の配列
- `additionalBudget`: 追加投資予算
- `isAuthenticated`: 認証状態
- `user`: ユーザー情報
- `notifications`: 通知メッセージの配列

### 3.3 データ構造
#### 保有資産 (Asset)
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number;
  lastUpdated?: string;
  source?: string; // 'Yahoo Finance' | 'Alpha Vantage' | 'Fallback'
}
```

#### 目標配分 (TargetAllocation)
```typescript
interface TargetAllocation {
  id: string;
  name: string;
  ticker: string;
  targetPercentage: number;
}
```

#### シミュレーション結果 (SimulationResult)
```typescript
interface SimulationResult {
  id: string;
  name: string;
  ticker: string;
  price: number;
  currency: string;
  targetPercentage: number;
  currentAmount: number;
  targetAmount: number;
  additionalAmount: number;
  additionalUnits: number; // 小数点以下4桁対応
  purchaseAmount: number;
  remark?: string;
}
```

## 4. コンポーネント仕様

### 4.1 ダッシュボード画面コンポーネント
- **PortfolioSummary**: 総資産、銘柄数、年間手数料の表示
- **PortfolioCharts**: 理想配分と現在配分の円グラフ
- **DifferenceChart**: 理想と現状の差分バーチャート
- **AssetsTable**: 保有資産の詳細テーブル
  - データソースの表示（Yahoo Finance / Alpha Vantage / Fallback）
- **DataStatusBar**: データ更新状態と最終更新時刻の表示

### 4.2 設定画面コンポーネント
- **TickerSearch**: 銘柄検索と追加機能
- **PopularTickers**: 人気銘柄のワンクリック追加
- **HoldingsEditor**: 保有資産の編集（小数点4桁対応）
- **AllocationEditor**: 目標配分の編集

### 4.3 シミュレーション画面コンポーネント
- **BudgetInput**: 追加予算の入力と予算プリセット
  - 直接入力と増減ボタン
  - 予算プリセットボタン（10万、30万、50万、100万）
  - アクセシビリティ対応済み（ラベルと入力フィールドの関連付け）
- **SimulationResult**: シミュレーション結果表示と購入機能

### 4.4 データ連携画面コンポーネント
- **ExportOptions**: データエクスポート機能
  - JSON/CSV形式選択
  - ファイルダウンロードとクリップボードコピー
  - アクセシビリティ対応済み（ラジオグループの適切な構造化）
- **ImportOptions**: データインポート機能
  - JSON/CSV形式選択
  - ファイル/クリップボード/テキスト入力による取り込み
  - アクセシビリティ対応済み
- **GoogleDriveIntegration**: Googleドライブ連携機能

### 4.5 共通コンポーネント
- **Header**: アプリヘッダー（通貨切替、更新ボタン）
- **TabNavigation**: iOS風タブナビゲーション
- **LoginButton**: Googleログインボタン
- **UserProfile**: ユーザープロフィール表示
- **ToastNotification**: 通知メッセージ表示
- **DataSourceBadge**: データソース表示バッジ（更新）
  - 各データソースに応じた表示（Yahoo Finance/Alpha Vantage/Fallback）
  - ソースに応じた色分け（青: Yahoo, 緑: Alpha Vantage, 赤: Fallback）

## 5. API・外部連携仕様

### 5.1 Yahoo Finance API連携
- **エンドポイント**: `/v7/finance/quote` (Netlify Functions経由)
- **設定方法**: setupProxy.jsでのプロキシ設定
- **取得データ**: 銘柄情報、価格、為替レート
- **タイムアウト設定**: 15秒（延長）
- **認証対策**: Referer、Origin、User-Agentなどの本物のブラウザリクエストを模倣
- **エラーハンドリング**: 詳細なログ出力と適切なエラーステータスコード
- **フォールバック**: API失敗時にAlpha Vantage APIを試行

### 5.2 Alpha Vantage API（代替データソース）
- **エンドポイント**: `alpha-vantage-proxy`
- **機能**: Yahoo Finance APIのバックアップ
- **APIキー**: 環境変数 `REACT_APP_ALPHA_VANTAGE_API_KEY` (フロントエンド) と `ALPHA_VANTAGE_API_KEY` (サーバーレス関数) で設定
- **タイムアウト設定**: 8秒
- **フォールバック**: API失敗時のデフォルト値使用

### 5.3 Google OAuth認証
- **認証フロー**: ブラウザ上でのOAuth
- **スコープ**: ユーザー情報、Googleドライブアクセス
- **トークン管理**: localStorage保存、有効期限チェック
- **ライブラリ**: @react-oauth/google 0.11.0
- **トークン解析**: jwt-decode 3.x（更新対応済み）

### 5.4 Googleドライブ連携
- **機能**: ポートフォリオデータの保存・読み込み
- **ファイル形式**: JSON
- **アクセス権**: アプリ固有のフォルダ内に保存

## 6. イベントフロー

### 6.1 銘柄追加フロー
1. ユーザーが銘柄シンボル入力 (TickerSearch)
2. `addTicker`関数呼び出し (PortfolioContext)
3. Yahoo Finance APIデータ取得試行 (fetchTickerData)
4. 失敗時はAlpha Vantage APIを試行
5. それも失敗時はデフォルト値を使用
6. 保有資産と目標配分リストに追加
7. UI更新と結果通知（データソースを表示）

### 6.2 保有数量更新フロー
1. ユーザーが保有数量変更 (HoldingsEditor)
2. `updateHoldings`関数呼び出し (PortfolioContext)
3. 小数点以下4桁までの精度で保有数量更新
   ```javascript
   holdings: parseFloat(parseFloat(holdings).toFixed(4)) || 0
   ```
4. 資産評価額再計算
5. UI更新と結果通知

### 6.3 シミュレーション計算フロー
1. ユーザーが予算入力 (BudgetInput)
2. `calculateSimulation`関数実行 (PortfolioContext)
3. 各銘柄の目標額・不足額計算
4. 購入必要株数算出（小数点4桁対応）
   ```javascript
   additionalUnits = parseFloat((additionalAmount / priceInBaseCurrency).toFixed(4));
   ```
5. シミュレーション結果表示 (SimulationResult)

### 6.4 購入実行フロー
1. ユーザーが購入ボタンクリック (SimulationResult)
2. 確認ダイアログ表示
3. `executePurchase`関数呼び出し (PortfolioContext)
4. 保有数量更新（現在値＋購入数）
   ```javascript
   holdings: parseFloat((asset.holdings + parseFloat(units)).toFixed(4))
   ```
5. UIの更新と結果通知

### 6.5 市場データ更新フロー（更新）
1. ユーザーがデータ更新ボタンクリック
2. `refreshMarketPrices`関数呼び出し（PortfolioContext）
3. 各銘柄について順次データ取得試行:
   - Yahoo Finance APIを最初に試行（タイムアウト: 5秒）
   - 失敗時はAlpha Vantage APIを試行（タイムアウト: 8秒）
   - それも失敗時はフォールバック値を使用
4. 各銘柄のデータソースを記録（source属性）
5. UI更新と結果通知（取得状況をサマリーで表示）

## 7. スタイリング規則

### 7.1 カラーパレット
- **プライマリ**: 青系 (#0088FE, #1E88E5, etc.)
- **アクセント**: 緑系 (#00C49F, #4CAF50, etc.)
- **警告**: 赤系 (#FF0000, #F44336, etc.)
- **背景**: 白/グレー系 (#FFFFFF, #F5F5F5, etc.)
- **テキスト**: 黒/グレー系 (#333333, #666666, etc.)
- **データソース表示用** (追加):
  - Yahoo Finance: 青系 (#1E88E5)
  - Alpha Vantage: 緑系 (#4CAF50)
  - Fallback: 赤系 (#F44336)

### 7.2 タイポグラフィ
- **フォント**: システムフォント（sans-serif）
- **見出し**: 16-20px、太字（font-bold）
- **本文**: 14-16px、通常（font-normal）
- **小テキスト**: 12px、軽量（font-light）

### 7.3 コンポーネントスタイル
- **カード**: 白背景、丸角、影付き
- **ボタン**: 背景色付き、丸角、ホバーエフェクト
- **入力フィールド**: 境界線付き、フォーカス時強調
- **テーブル**: 行の区切り線、隔行カラー、レスポンシブ
- **データソースバッジ**: 小さい丸型または角丸ラベル、ソースに応じた色

### 7.4 レスポンシブデザイン
- **モバイル優先**: 基本はモバイル表示に最適化
- **ブレークポイント**: sm(640px), md(768px), lg(1024px)
- **iOS互換**: セーフエリア対応、タブバー設計
  ```css
  .h-safe-bottom {
    height: env(safe-area-inset-bottom, 0);
  }
  
  .ios-content-margin {
    margin-bottom: calc(4rem + env(safe-area-inset-bottom, 0));
  }
  ```

## 8. エラー処理・通知

### 8.1 エラー種別
- **ネットワークエラー**: API接続失敗
- **認証エラー**: 認証失敗、トークン期限切れ
- **データエラー**: 不正なデータ形式、処理失敗
- **入力エラー**: バリデーション失敗

### 8.2 通知表示
- **成功通知**: 緑色背景、自動消去（5秒）
- **警告通知**: 黄色背景、自動消去（5秒）
- **エラー通知**: 赤色背景、手動消去可能
- **情報通知**: 青色背景、自動消去（5秒）

### 8.3 API障害対応（更新）
- 複数データソースの使用によるフォールバック機構
- タイムアウト設定による応答遅延の処理
- 詳細なエラーログによるデバッグ容易化
- ユーザーフレンドリーなエラーメッセージ表示
- データソースの表示によるユーザー通知

## 9. 開発環境設定

### 9.1 ローカル開発環境
1. リポジトリクローン
2. 依存パッケージインストール: `npm install`
3. 環境変数設定: `.env.local` 作成
   ```
   REACT_APP_GOOGLE_CLIENT_ID=あなたのGoogleクライアントID
   REACT_APP_ALPHA_VANTAGE_API_KEY=GC4EBI5YHFKOJEXY
   ```
4. 開発サーバー起動: `npm start`
5. ブラウザでアクセス: `http://localhost:3000`

### 9.2 必要な環境変数
- `REACT_APP_GOOGLE_CLIENT_ID`: Google OAuthクライアントID
- `REACT_APP_ALPHA_VANTAGE_API_KEY`: Alpha Vantage APIキー（フロントエンド用）

### 9.3 プロキシ設定
setupProxy.js を使用したAPI連携設定:
```javascript
const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function(app) {
  app.use(
    '/.netlify/functions/',
    createProxyMiddleware({
      target: 'http://localhost:9000',
      pathRewrite: {
        '^/\\.netlify/functions': ''
      },
      changeOrigin: true
    })
  );
};
```

## 10. ビルド・デプロイ手順

### 10.1 ビルド手順
1. 環境変数の設定確認
2. 本番ビルド実行: `npm run build`
3. `build` ディレクトリに成果物生成

### 10.2 Netlifyデプロイ
#### CLIを使用
1. Netlify CLIインストール: `npm install -g netlify-cli`
2. ログイン: `netlify login`
3. デプロイ: `netlify deploy --prod`

#### ドラッグ＆ドロップ
1. Netlifyダッシュボードにアクセス
2. 「Sites」→「New site from upload」
3. `build` フォルダをドロップ

### 10.3 環境変数設定（Netlify）
1. サイト設定画面に移動
2. 「Build & deploy」→「Environment」
3. 以下の環境変数を追加:
   - `REACT_APP_GOOGLE_CLIENT_ID`
   - `REACT_APP_ALPHA_VANTAGE_API_KEY`
   - `ALPHA_VANTAGE_API_KEY` (Functions用)

### 10.4 ビルド設定（Netlify）
netlify.toml 設定ファイル（強化版）:
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/.netlify/functions/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# Functions への直接アクセス用リダイレクト
[[redirects]]
  from = "/.netlify/functions/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

## 11. 既知の問題と解決策

### 11.1 既知の問題
1. **jwt-decode 互換性**: v4以降のjwt-decodeでインポート方法が変更
2. **ESLintアクセシビリティ警告**: デフォルト設定ではアクセシビリティ警告が多発
3. **APIレート制限**: Yahoo FinanceとAlpha Vantageのレート制限
4. **プロキシ設定複雑さ**: React Dev Serverでの詳細なプロキシ設定に制限あり

### 11.2 回避策・解決策
1. **jwt-decode対応**: 
   ```javascript
   import jwtDecode from 'jwt-decode';  // デフォルトインポートを使用
   ```

2. **ESLint設定調整**:
   ```json
   {
     "rules": {
       "jsx-a11y/label-has-associated-control": "off"
     }
   }
   ```

3. **API制限回避** (更新): 
   - フォールバック値の使用
   - 複数データソース順次試行（Yahoo Finance → Alpha Vantage → フォールバック）
   - タイムアウト設定による応答遅延対策
   - エラーリトライ処理の実装

4. **プロキシ設定**: 
   - package.jsonで基本設定: `"proxy": "http://localhost:9000"`
   - setupProxy.jsで詳細設定

## 12. 開発継続のためのリソース

### 12.1 コードリポジトリ
- GitHub/GitLabリポジトリURL（存在する場合）

### 12.2 デザインリソース
- Figma/Sketch設計URL（存在する場合）
- アイコンセット情報

### 12.3 APIドキュメント
- [Yahoo Finance API非公式ドキュメント](https://syncwith.com/yahoo-finance/yahoo-finance-api)
- [Alpha Vantage API公式ドキュメント](https://www.alphavantage.co/documentation/)
- [Google OAuth 2.0ドキュメント](https://developers.google.com/identity/protocols/oauth2)

### 12.4 ライブデモ
- デモサイトURL（存在する場合）

---

## 付録A: コンポーネント関係図

```
App
├── AuthProvider
│   └── PortfolioProvider
│       ├── Header
│       │   ├── CurrencyToggle
│       │   ├── RefreshButton
│       │   └── UserProfile/LoginButton
│       ├── Router
│       │   ├── Dashboard
│       │   │   ├── PortfolioSummary
│       │   │   ├── PortfolioCharts
│       │   │   ├── DifferenceChart
│       │   │   └── AssetsTable
│       │   ├── Settings
│       │   │   ├── TickerSearch
│       │   │   ├── PopularTickers
│       │   │   ├── HoldingsEditor
│       │   │   └── AllocationEditor
│       │   ├── Simulation
│       │   │   ├── BudgetInput
│       │   │   └── SimulationResult
│       │   └── DataIntegration
│       │       ├── ExportOptions
│       │       ├── ImportOptions
│       │       └── GoogleDriveIntegration
│       └── TabNavigation
```

## 付録B: ステート状態遷移図

```
初期状態
└── 銘柄追加
    ├── 目標配分設定
    │   └── 保有数量設定
    │       ├── シミュレーション実行
    │       │   └── 購入実行
    │       │       └── 更新された保有数量
    │       └── データエクスポート
    └── データインポート
        └── インポートされた状態
```

## 付録C: データフローダイアグラム（更新）

```
+------------------+     +------------------+     +------------------+
| Yahoo Finance API |     | Alpha Vantage API|     | フォールバック値   |
+------------------+     +------------------+     +------------------+
         │                       │                       │
         v                       v                       v
+------------------+     +------------------+     +------------------+
|  Netlify Functions|     | Netlify Functions|     |  クライアント内    |
+------------------+     +------------------+     +------------------+
         │                       │                       │
         └───────────────┬───────────────────┘
                         │
                         v
                +------------------+           +------------------+
                |   Context State  | <-------> |  UI Components  |
                +------------------+           +------------------+
                         ^                            │
                         │                            v
                         └────────────────┐    +------------------+
                                          └--> |   ユーザー表示    |
                                               +------------------+
```

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/12 | 初版作成 |  |
| 2.0 | 2025/03/17 | jwt-decode対応、アクセシビリティ対応、プロキシ設定更新 |  |
| 3.0 | 2025/03/18 | Alpha Vantage API連携強化、環境変数名統一、マルチソースデータ取得フロー実装 |  |

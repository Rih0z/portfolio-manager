# ポートフォリオマネージャー インターフェース仕様書（更新版）

*本仕様書は、AIの別セッションでも開発を引き継げるよう設計されています。*

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。ブラウザのローカルストレージを活用したデータ永続化およびGoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンド、アクティブファンドなど）
- 年間手数料率の自動推定と計算（個別株は0%固定）
- 理想ポートフォリオ配分設定
- 資金配分シミュレーション
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ永続化
- Google認証・Googleドライブ連携
- 市場データの自動取得（Alpha Vantageをプライマリソース、フォールバック値をバックアップとして使用）
- iOS風タブバーによるナビゲーション

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（Base64暗号化）

## 2. インターフェース構造

### 2.1 ページ構成
- **ダッシュボード** (`/`): 資産概要、グラフ、銘柄詳細
- **設定** (`/settings`): 銘柄追加、保有資産設定、目標配分設定
- **シミュレーション** (`/simulation`): 追加予算と購入シミュレーション
- **データ連携** (`/data`): インポート/エクスポート、データ同期、Googleドライブ連携

### 2.2 ナビゲーション
- 画面下部固定のiOS風タブナビゲーション
- 4つのタブ（ホーム、設定、シミュレーション、データ）
- アイコンとテキストの組み合わせUI
- アクティブタブの視覚的強調（青色ハイライト）
- セーフエリア対応（iPhoneのホームバーなど）

### 2.3 レイアウト構造
```
+----------------------------------------+
|              ヘッダー                  |
| (通貨切替、データ更新、ユーザープロフィール) |
+----------------------------------------+
|                                        |
|             メインコンテンツ             |
|                                        |
|                                        |
|                                        |
+----------------------------------------+
|             タブナビゲーション           |
| [ホーム] [設定] [シミュレーション] [データ] |
+----------------------------------------+
|         セーフエリア（ホームバー用）       |
+----------------------------------------+
```

## 3. 状態管理

### 3.1 コンテキスト設計
- **AuthContext**: 認証状態、ユーザー情報、Googleドライブ連携、PortfolioContextへの参照
- **PortfolioContext**: ポートフォリオデータ、資産情報、シミュレーション計算、手数料管理、ローカルストレージ操作

### 3.2 コンテキスト間の連携（新規）
- **ContextConnector**: AuthContextとPortfolioContextの相互参照を管理するコンポーネント
- **setPortfolioContextRef**: AuthContextがPortfolioContextへの参照を保持するための関数
- **handleAuthStateChange**: 認証状態変更時にPortfolioContextに通知するための関数

### 3.3 主要な状態変数
- `baseCurrency`: 基準通貨 ('JPY' | 'USD')
- `exchangeRate`: 為替レート情報 ({ rate, source, lastUpdated })
- `currentAssets`: 保有資産の配列
- `targetPortfolio`: 目標配分の配列
- `additionalBudget`: 追加投資予算
- `isAuthenticated`: 認証状態
- `user`: ユーザー情報
- `notifications`: 通知メッセージの配列
- `dataSource`: データソース ('local' | 'cloud')
- `lastSyncTime`: 最終同期時間
- `initialized`: 初期化完了フラグ（新規）

### 3.4 データ構造
#### 保有資産 (Asset)（更新版）
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', 'ティッカー固有の情報', 'ファンドタイプからの推定', 'ユーザー設定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string;
  source?: string; // 'Alpha Vantage' | 'Fallback'
}
```

#### ローカルストレージデータ（新規）
```typescript
interface StorageData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: number;
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

## 4. コンポーネント仕様

### 4.1 ダッシュボード画面コンポーネント
- **PortfolioSummary**: 総資産、銘柄数、年間手数料の表示
  - 最高/最低手数料率の銘柄を表示
  - ファンドタイプ別の手数料統計を表示
  - 手数料についての説明を表示
- **PortfolioCharts**: 理想配分と現在配分の円グラフ
- **DifferenceChart**: 理想と現状の差分バーチャート
- **AssetsTable**: 保有資産の詳細テーブル
  - データソースと銘柄タイプの表示
  - 年間手数料の表示（個別株は0%）
- **DataStatusBar**: データ更新状態と最終更新時刻の表示

### 4.2 設定画面コンポーネント
- **TickerSearch**: 銘柄検索と追加機能
- **PopularTickers**: 人気銘柄のワンクリック追加
  - インデックスファンド・ETFカテゴリ（新規）
  - 個別株カテゴリ（新規）
  - 日本市場カテゴリ
- **HoldingsEditor**: 保有資産の編集
  - 保有数量編集（小数点4桁対応）
  - 年間手数料率編集（個別株は編集不可）
  - 銘柄タイプの表示
  - 手数料情報源を表示（個別株、推定値、固有情報、ユーザー設定）
- **AllocationEditor**: 目標配分の編集

### 4.3 シミュレーション画面コンポーネント
- **BudgetInput**: 追加予算の入力と予算プリセット
  - 直接入力と増減ボタン
  - 予算プリセットボタン（10万、30万、50万、100万）
  - アクセシビリティ対応済み（ラベルと入力フィールドの関連付け）
- **SimulationResult**: シミュレーション結果表示と購入機能

### 4.4 データ連携画面コンポーネント
- **ExportOptions**: データエクスポート機能
  - JSON/CSV形式選択
  - ファイルダウンロードとクリップボードコピー
  - アクセシビリティ対応済み（ラジオグループの適切な構造化）
- **ImportOptions**: データインポート機能
  - JSON/CSV形式選択
  - ファイル/クリップボード/テキスト入力による取り込み
  - アクセシビリティ対応済み
- **GoogleDriveIntegration**: Googleドライブ連携機能
  - ログイン状態表示
  - クラウド保存/読み込みボタン
  - データ同期ステータス表示（新規）
  - 同期ボタン（新規）

### 4.5 共通コンポーネント
- **Header**: アプリヘッダー（通貨切替、更新ボタン）
- **TabNavigation**: iOS風タブナビゲーション
- **LoginButton**: Googleログインボタン
- **UserProfile**: ユーザープロフィール表示
- **ToastNotification**: 通知メッセージ表示
- **DataSourceBadge**: データソース表示バッジ
  - 各データソースに応じた表示（Alpha Vantage/Fallback）
  - ソースに応じた色分け（緑: Alpha Vantage, 赤: Fallback）

### 4.6 ユーティリティコンポーネント
- **FundTypeBadge**: ファンドタイプを表示するバッジ
  - 個別株: 灰色バッジ
  - ETF: 青色バッジ
  - インデックスファンド: 緑色バッジ
  - アクティブファンド: 紫色バッジ
- **FeeSourceBadge**: 手数料情報の出所を表示するバッジ
  - 個別株: 灰色バッジ
  - 推定値: 黄色バッジ
  - ティッカー固有の情報: 緑色バッジ
  - ユーザー設定: 紫色バッジ
- **ContextConnector**: コンテキスト間の連携を管理するコンポーネント（新規）

## 5. API・外部連携仕様

### 5.1 Alpha Vantage API連携（プライマリソース）
- **エンドポイント**: `alpha-vantage-proxy` (Netlify Functions経由)
- **機能**: 市場データのプライマリソース
- **APIキー**: 環境変数 `REACT_APP_ALPHA_VANTAGE_API_KEY` (フロントエンド) と `ALPHA_VANTAGE_API_KEY` (サーバーレス関数) で設定
- **タイムアウト設定**: 15秒
- **レート制限**: 無料プランで1日25リクエストまで
- **フォールバック**: API失敗時のデフォルト値使用

### 5.2 ローカルストレージ連携（新規）
- **ストレージキー**: `portfolioData`
- **暗号化方式**: Base64エンコーディングによる簡易暗号化
- **保存データ**: ポートフォリオデータ、設定情報、タイムスタンプ
- **保存タイミング**: データ変更時、明示的な保存操作時、同期時
- **読み込みタイミング**: アプリケーション初期化時、明示的な読み込み操作時

### 5.3 Google OAuth認証
- **認証フロー**: ブラウザ上でのOAuth
- **スコープ**: ユーザー情報、Googleドライブアクセス
- **トークン管理**: localStorage保存、有効期限チェック
- **ライブラリ**: @react-oauth/google 0.11.0
- **トークン解析**: jwt-decode 3.x

### 5.4 Googleドライブ連携
- **機能**: ポートフォリオデータの保存・読み込み
- **ファイル形式**: JSON
- **アクセス権**: アプリ固有のフォルダ内に保存
- **同期ロジック**: タイムスタンプに基づく最新データの特定

### 5.5 ファンド情報API
- **機能**: 銘柄タイプ判定と手数料情報取得
- **実装方法**: フロントエンドで実装（`fundUtils.js`）
- **データソース**: アプリ内DBとロジックによる判定
- **個別株判定**: ティッカーパターンと名前に基づく判定

## 6. イベントフロー

### 6.1 初期化フロー（新規）
1. アプリケーション起動
2. `PortfolioProvider` と `AuthProvider` の初期化
3. ContextConnectorによるコンテキスト間連携の確立
4. ローカルストレージからのデータ読み込み
5. トークンストレージからの認証情報読み込み
6. データがあれば状態を更新し、UIに反映

```javascript
// 初期化処理の主要部分
useEffect(() => {
  const localData = loadFromLocalStorage();
  if (localData) {
    // 各状態を更新
    setBaseCurrency(localData.baseCurrency);
    setExchangeRate(localData.exchangeRate);
    // その他のデータ適用
    setInitialized(true);
  }
}, []);
```

### 6.2 データ保存フロー（新規）
1. データ変更（銘柄追加、保有数量変更、目標配分変更など）
2. 状態更新関数（useState）による状態更新
3. 状態更新後のコールバックで `saveToLocalStorage` 呼び出し
4. データを暗号化してローカルストレージに保存
5. 認証中の場合は必要に応じてクラウド同期

```javascript
// データ保存処理の例
const saveToLocalStorage = useCallback(() => {
  const portfolioData = {
    baseCurrency,
    exchangeRate,
    lastUpdated,
    currentAssets,
    targetPortfolio,
    additionalBudget,
    version: '1.0.0',
    timestamp: new Date().toISOString()
  };
  
  const encryptedData = encryptData(portfolioData);
  localStorage.setItem('portfolioData', encryptedData);
  
  return true;
}, [baseCurrency, exchangeRate, lastUpdated, currentAssets, targetPortfolio, additionalBudget]);
```

### 6.3 認証連携フロー（新規）
1. ユーザーがGoogleログインボタンをクリック
2. OAuth認証フローを実行
3. 認証成功時、トークンをローカルストレージに保存
4. ユーザー情報を状態にセット
5. PortfolioContextに認証状態を通知
6. 必要に応じてクラウドデータを読み込み

```javascript
// 認証状態変更の通知
const handleAuthStateChange = useCallback((isAuthenticated, user) => {
  if (isAuthenticated && user) {
    setDataSource('cloud');
  } else {
    setDataSource('local');
  }
}, []);
```

### 6.4 データ同期フロー（新規）
1. ユーザーが同期ボタンをクリック
2. ローカルデータとクラウドデータの取得
3. タイムスタンプを比較して最新データを特定
4. 最新データを状態に適用
5. 両方のストレージを最新状態に更新
6. 同期情報（日時、ソース）を更新

## 7. スタイリング規則

### 7.1 カラーパレット
- **プライマリ**: 青系 (#0088FE, #1E88E5, etc.)
- **アクセント**: 緑系 (#00C49F, #4CAF50, etc.)
- **警告**: 赤系 (#FF0000, #F44336, etc.)
- **背景**: 白/グレー系 (#FFFFFF, #F5F5F5, etc.)
- **テキスト**: 黒/グレー系 (#333333, #666666, etc.)
- **データソース表示用**:
  - Alpha Vantage: 緑系 (#4CAF50)
  - Fallback: 赤系 (#F44336)
- **ファンドタイプ表示用**:
  - 個別株: グレー系 (#9E9E9E)
  - ETF: 青系 (#2196F3)
  - インデックスファンド: 緑系 (#4CAF50)
  - アクティブファンド: 紫系 (#9C27B0)
- **手数料情報源表示用**:
  - 個別株: グレー系 (#9E9E9E)
  - ティッカー固有情報: 緑系 (#4CAF50)
  - 推定値: 黄色系 (#FFC107)
  - ユーザー設定: 紫系 (#9C27B0)
- **データソース表示用**（新規）:
  - ローカル: 黄色系 (#FFC107)
  - クラウド: 青系 (#2196F3)

### 7.2 タイポグラフィ
- **フォント**: システムフォント（sans-serif）
- **見出し**: 16-20px、太字（font-bold）
- **本文**: 14-16px、通常（font-normal）
- **小テキスト**: 12px、軽量（font-light）

### 7.3 コンポーネントスタイル
- **カード**: 白背景、丸角、影付き
- **ボタン**: 背景色付き、丸角、ホバーエフェクト
- **入力フィールド**: 境界線付き、フォーカス時強調
- **テーブル**: 行の区切り線、隔行カラー、レスポンシブ
- **銘柄タイプバッジ**: 小さい丸型または角丸ラベル、タイプに応じた色
- **手数料情報バッジ**: 小さい丸型または角丸ラベル、情報源に応じた色
- **個別株行**: 灰色背景で視覚的に区別
- **同期ステータスインジケーター**（新規）: 丸いドット、色による状態表示

### 7.4 レスポンシブデザイン
- **モバイル優先**: 基本はモバイル表示に最適化
- **ブレークポイント**: sm(640px), md(768px), lg(1024px)
- **iOS互換**: セーフエリア対応、タブバー設計
  ```css
  .h-safe-bottom {
    height: env(safe-area-inset-bottom, 0);
  }
  
  .ios-content-margin {
    margin-bottom: calc(4rem + env(safe-area-inset-bottom, 0));
  }
  ```

## 8. エラー処理・通知

### 8.1 エラー種別
- **ネットワークエラー**: API接続失敗
- **認証エラー**: 認証失敗、トークン期限切れ
- **データエラー**: 不正なデータ形式、処理失敗
- **入力エラー**: バリデーション失敗
- **手数料設定エラー**: 個別株の手数料変更試行
- **ストレージエラー**（新規）: ローカルストレージ読み書き失敗
- **同期エラー**（新規）: データ同期失敗

### 8.2 通知表示
- **成功通知**: 緑色背景、自動消去（5秒）
- **警告通知**: 黄色背景、自動消去（5秒）
- **エラー通知**: 赤色背景、手動消去可能
- **情報通知**: 青色背景、自動消去（5秒）

### 8.3 API障害対応
- 複数データソースの使用によるフォールバック機構
- タイムアウト設定による応答遅延の処理
- 詳細なエラーログによるデバッグ容易化
- ユーザーフレンドリーなエラーメッセージ表示
- データソースの表示によるユーザー通知

### 8.4 ストレージ障害対応（新規）
- ローカルストレージ失敗時のエラー処理
- データ復号化失敗時のフォールバック
- 初期化完了フラグによる保存処理の制御
- 適切なエラーメッセージと通知

## 9. 開発環境設定

### 9.1 ローカル開発環境
1. リポジトリクローン
2. 依存パッケージインストール: `npm install`
3. 環境変数設定: `.env.local` 作成
   ```
REACT_APP_GOOGLE_CLIENT_ID: Google OAuthクライアントID
REACT_APP_ALPHA_VANTAGE_API_KEY: Alpha Vantage APIキー（フロントエンド用）
   ```
4. 開発サーバー起動: `npm start`
5. ブラウザでアクセス: `http://localhost:3000`

### 9.2 必要な環境変数
- `REACT_APP_GOOGLE_CLIENT_ID`: Google OAuthクライアントID
- `REACT_APP_ALPHA_VANTAGE_API_KEY`: Alpha Vantage APIキー（フロントエンド用）
- `ALPHA_VANTAGE_API_KEY`: Alpha Vantage APIキー（サーバーレス関数用）

### 9.3 プロキシ設定
setupProxy.js を使用したAPI連携設定:
```javascript
const { createProxyMiddleware } = require('http-proxy-middleware');

module.exports = function(app) {
  app.use(
    '/api',
    createProxyMiddleware({
      target: 'http://localhost:9000',
      pathRewrite: {
        '^/api': '/.netlify/functions'
      },
      changeOrigin: true
    })
  );
};
```

## 10. ビルド・デプロイ手順

### 10.1 ビルド手順
1. 環境変数の設定確認
2. 本番ビルド実行: `npm run build`
3. `build` ディレクトリに成果物生成

### 10.2 Netlifyデプロイ
#### CLIを使用
1. Netlify CLIインストール: `npm install -g netlify-cli`
2. ログイン: `netlify login`
3. デプロイ: `netlify deploy --prod`

#### ドラッグ＆ドロップ
1. Netlifyダッシュボードにアクセス
2. 「Sites」→「New site from upload」
3. `build` フォルダをドロップ

### 10.3 環境変数設定（Netlify）
1. サイト設定画面に移動
2. 「Build & deploy」→「Environment」
3. 以下の環境変数を追加:
   - `REACT_APP_GOOGLE_CLIENT_ID`
   - `REACT_APP_ALPHA_VANTAGE_API_KEY`
   - `ALPHA_VANTAGE_API_KEY` (Functions用)

### 10.4 ビルド設定（Netlify）
netlify.toml 設定ファイル（現在の最新版）:
```toml
[build]
  command = "CI= npm run build"
  publish = "build"
  functions = "functions"

[dev]
  command = "npm start"
  port = 3000
  targetPort = 3000
  publish = "build"
  functionsPort = 9000

# Functions へのアクセス許可設定
[[headers]]
  for = "/api/*"
    [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Headers = "Content-Type, Authorization"
    Access-Control-Allow-Methods = "GET, POST, OPTIONS"

# API経由でFunctionsにアクセス
[[redirects]]
  from = "/api/*"
  to = "/.netlify/functions/:splat"
  status = 200
  force = true

# SPAのためのリダイレクト
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Functions 設定
[functions]
  directory = "functions"
  node_bundler = "esbuild"
  included_files = ["functions/**"]
```

## 11. 既知の問題と解決策

### 11.1 既知の問題
1. **jwt-decode 互換性**: v4以降のjwt-decodeでインポート方法が変更
2. **ESLintアクセシビリティ警告**: デフォルト設定ではアクセシビリティ警告が多発
3. **APIレート制限**: Alpha Vantageのレート制限（1日25リクエスト）
4. **プロキシ設定複雑さ**: React Dev Serverでの詳細なプロキシ設定に制限あり
5. **銘柄タイプ判定精度**: ティッカーシンボルのみからの判定は完全な精度を保証できない
6. **React Hooks ルール違反**（新規）: useEffectやuseCallbackの依存配列管理に注意
7. **コンテキスト間の循環参照**（新規）: AuthContextとPortfolioContextの相互参照に注意

### 11.2 回避策・解決策
1. **jwt-decode対応**: 
   ```javascript
   import jwtDecode from 'jwt-decode';  // デフォルトインポートを使用
   ```

2. **ESLint設定調整**:
   ```json
   {
     "rules": {
       "jsx-a11y/label-has-associated-control": "off",
       "react-hooks/rules-of-hooks": "error",
       "react-hooks/exhaustive-deps": "warn"
     }
   }
   ```

3. **API制限回避**: 
   - フォールバック値の使用
   - 複数データソース順次試行
   - タイムアウト設定による応答遅延対策
   - エラーリトライ処理の実装

4. **プロキシ設定**: 
   - package.jsonで基本設定: `"proxy": "http://localhost:9000"`
   - setupProxy.jsで詳細設定

5. **銘柄タイプ判定精度向上**:
   - 特定ティッカーのデータベース拡充
   - 判定ロジックの継続的な改良
   - ユーザーによる手動調整機能の提供

6. **React Hooks ルール対応**（新規）:
   - カスタムHook内での適切な依存配列管理
   - 通常関数内でHookを使用しない
   - 条件付きHook呼び出しを避ける
   - Refによるコンテキスト参照の実装

7. **コンテキスト循環参照の解決**（新規）:
   - 専用コネクタコンポーネントの使用
   - useRefによる一方向参照の実装
   - 初期化順序の制御

## 12. データ永続化と同期（新規）

### 12.1 データ永続化の仕組み
- **保存対象データ**: ポートフォリオデータ、設定値、タイムスタンプ
- **保存形式**: 暗号化されたJSON
- **保存場所**: ブラウザのローカルストレージ
- **自動保存**: データ変更時に遅延付きで自動保存
- **エラーリカバリ**: 復号化失敗時の適切な処理

### 12.2 データ同期の仕組み
- **同期対象**: ローカルストレージとGoogleドライブ
- **同期タイミング**: 
  - 明示的な同期ボタンクリック時
  - ログイン直後（オプション）
  - 定期的な自動同期（未実装）
- **競合解決**: タイムスタンプによる新しいデータの優先
- **エラーリカバリ**: 同期失敗時の適切な通知と状態維持

### 12.3 認証連携の仕組み
- **認証情報保存**: ローカルストレージにJWTトークン保存
- **認証状態復元**: アプリケーション起動時にトークン検証
- **権限スコープ**: ドライブAPI用の適切なスコープ設定
- **セキュリティ**: トークン有効期限の確認と自動ログアウト

## 13. 将来の拡張計画

### 13.1 実装予定の機能
- **自動同期**: 定期的なバックグラウンド同期
- **プッシュ通知**: 重要なデータ更新の通知
- **複数デバイス間のリアルタイム同期**: WebSocketなどを使用
- **オフライン対応**: Service Workerによるオフライン機能強化

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/12 | 初版作成 |  |
| 2.0 | 2025/03/17 | jwt-decode対応、アクセシビリティ対応、プロキシ設定更新 |  |
| 3.0 | 2025/03/18 | Alpha Vantage API連携強化、環境変数名統一、マルチソースデータ取得フロー実装 |  |
| 4.0 | 2025/03/18 | Yahoo Finance API無効化、Alpha Vantageをプライマリソースに変更、401認証エラー問題対応 |  |
| 5.0 | 2025/03/19 | 銘柄タイプ自動判定と年間手数料の自動推定機能追加 |  |
| 6.0 | 2025/03/20 | 個別株の手数料固定（0%）とファンド手数料計算ロジックの修正 |  |
| 7.0 | 2025/03/21 | 人気銘柄リストの更新 |  |
| 8.0 | 2025/03/25 | ローカルストレージによるデータ永続化とGoogle認証連携強化 |  |

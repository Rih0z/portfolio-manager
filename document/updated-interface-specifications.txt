# ポートフォリオマネージャー インターフェース仕様書（シミュレーション機能拡張版）

**最終更新日時:** 2025/03/30 12:30

*本仕様書は、AIの別セッションでも開発を引き継げるよう設計されています。*

## 1. プロジェクト概要

「ポートフォリオマネージャー」は、資産管理を支援するWebアプリケーションです。ユーザーが保有資産と理想のポートフォリオ配分を比較・管理し、最適な資金配分のシミュレーションを実施できる環境を提供します。ブラウザのローカルストレージを活用したデータ永続化およびGoogleログインとGoogleドライブ連携機能を備え、複数デバイス間でのデータ共有をサポートします。

### 1.1 主要機能
- 資産管理（保有数の小数点以下4桁対応）
- 銘柄タイプ自動判定（個別株、ETF、インデックスファンド、投資信託など）
- 年間手数料率の自動推定と計算（個別株は0%固定、投資信託は信託報酬として表示）
- 年間配当金の計算と配当情報の管理
- 理想ポートフォリオ配分設定
- **複数通貨（円/ドル）対応の資金配分シミュレーション**（更新）
- データインポート/エクスポート
- ブラウザローカルストレージによるデータ永続化（URIエンコード+Base64による安全な暗号化）
- Google認証・Googleドライブ連携（Google Identity Services API対応）
- 市場データの自動取得（スクレイピングとマルチAPI連携）
  - 米国株：
    - プライマリ: Alpaca API
    - セカンダリ: Yahoo Finance API
    - 最終手段: 米国株スクレイピング
  - 日本株： 
    - プライマリ: スクレイピング（複数サイト）
    - バックアップ: Yahoo Finance API
  - 投資信託：
    - プライマリ: スクレイピング（複数サイト）
    - バックアップ: Yahoo Finance API
- iOS風タブバーによるナビゲーション
- 自動消去機能付き通知システム
- エラーバウンダリによるアプリケーション耐障害性の向上

### 1.2 技術スタック
- **フロントエンド**: React.js 18.x
- **認証**: Google OAuth 2.0 (@react-oauth/google 0.11.0)
- **スタイリング**: Tailwind CSS 3.x
- **ステート管理**: React Context API
- **ルーティング**: React Router 6.x
- **データ可視化**: Recharts 2.x
- **API通信**: Axios 1.x, Fetch API
- **ユーティリティ**: Lodash 4.x, Day.js 1.x, jwt-decode 3.x
- **データ処理**: PapaParse 5.x (CSV処理)
- **UI拡張**: @headlessui/react 1.x
- **サーバーレス関数**: Netlify Functions
- **スクレイピング**: 
  - Cheerio 1.x (日本株・投資信託)
  - JSDOM 22.x (米国株・ETF)
- **デプロイ**: Netlify
- **データ永続化**: ローカルストレージ（URIエンコード+Base64暗号化）
- **クラウド連携**: Google Drive API v3
- **市場データ取得**: 
  - 米国株: Alpaca API（プライマリ）+ スクレイピング（最終手段）
  - 日本株: スクレイピング（複数サイト）
  - 投資信託: スクレイピング（複数サイト）
  - バックアップ: Yahoo Finance API
  - 為替レート: exchangerate.host

## 2. インターフェース構造

### 2.1 ページ構成
- **ダッシュボード** (`/`): 資産概要、グラフ、銘柄詳細
- **設定** (`/settings`): 銘柄追加、保有資産設定、目標配分設定
- **シミュレーション** (`/simulation`): 追加予算と購入シミュレーション（複数通貨対応、購入株数表示）
- **データ連携** (`/data`): インポート/エクスポート、データ同期、Googleドライブ連携

### 2.2 ナビゲーション
- 画面下部固定のiOS風タブナビゲーション
- 4つのタブ（ホーム、設定、シミュレーション、データ）
- アイコンとテキストの組み合わせUI
- アクティブタブの視覚的強調（青色ハイライト）
- セーフエリア対応（iPhoneのホームバーなど）

### 2.3 レイアウト構造
```
+----------------------------------------+
|              ヘッダー                  |
| (通貨切替、データ更新、ユーザープロフィール) |
+----------------------------------------+
|                                        |
|             メインコンテンツ             |
|                                        |
|                                        |
|                                        |
+----------------------------------------+
|             タブナビゲーション           |
| [ホーム] [設定] [シミュレーション] [データ] |
+----------------------------------------+
|         セーフエリア（ホームバー用）       |
+----------------------------------------+
```

### 2.4 エラーバウンダリ
- アプリケーション全体をエラーバウンダリでラップ
- 予期しないエラー発生時にアプリケーションのクラッシュを防止
- ユーザーフレンドリーなエラー表示画面
- リロードボタンによる復旧機能

### 2.5 通知システム
- 画面右下に固定表示される通知パネル
- 通知のタイプに応じた色分け表示
  - 成功：緑色背景
  - 警告：黄色背景
  - エラー：赤色背景
  - 情報：青色背景
- 自動消去機能付き
  - 情報、成功、警告通知：5秒後に自動消去
  - エラー通知：ユーザーによる手動消去が必要
- 各通知には手動で閉じるボタン（×）を表示
- 同時に複数の通知を表示可能
- スタック表示で新しい通知が下に追加される

### 2.6 データソース表示
- 銘柄データのソースを明示的に表示
  - Alpaca：青色バッジ
  - 日本株・投資信託スクレイピングソース：緑色バッジ
  - 米国株スクレイピングソース：紫色バッジ
  - Yahoo Finance：紫色バッジ
  - Fallback：黄色バッジ
- 更新時に各データソースの利用状況を通知
- フォールバック使用時は注意喚起表示
- スクレイピングソースの詳細表示
- 株価情報の信頼性をユーザーが判断できるようサポート

## 3. 状態管理

### 3.1 コンテキスト設計
- **AuthContext**: 認証状態、ユーザー情報、Googleドライブ連携、PortfolioContextへの参照
- **PortfolioContext**: ポートフォリオデータ、資産情報、配当情報、シミュレーション計算、手数料管理、ローカルストレージ操作

### 3.2 コンテキスト間の連携
- **ContextConnector**: AuthContextとPortfolioContextの相互参照を管理するコンポーネント
- **setPortfolioContextRef**: AuthContextがPortfolioContextへの参照を保持するための関数
- **handleAuthStateChange**: 認証状態変更時にPortfolioContextに通知するための関数

### 3.3 主要な状態変数
- `baseCurrency`: 基準通貨 ('JPY' | 'USD')
- `exchangeRate`: 為替レート情報 ({ rate, source, lastUpdated })
- `currentAssets`: 保有資産の配列（配当情報を含む）
- `targetPortfolio`: 目標配分の配列
- `additionalBudget`: 追加投資予算情報（金額と通貨）（更新）
- `isAuthenticated`: 認証状態
- `user`: ユーザー情報
- `notifications`: 通知メッセージの配列
- `dataSource`: データソース ('local' | 'cloud')
- `lastSyncTime`: 最終同期時間
- `initialized`: 初期化完了フラグ
- `hasError`: エラー状態（エラーバウンダリ用）
- `totalAssets`: 総資産額
- `annualFees`: 年間手数料合計
- `annualDividends`: 年間配当金合計
- `scrapingStats`: スクレイピング統計情報

### 3.4 データ構造
#### 保有資産 (Asset)
```typescript
interface Asset {
  id: string;
  name: string;
  ticker: string;
  exchangeMarket: string;
  price: number;
  currency: string;
  holdings: number; // 小数点以下4桁対応
  annualFee: number; // 年間手数料率（%）- 個別株は常に0%
  fundType: string; // ファンドの種類 (ETF_JP, INDEX_US, STOCK など)
  isStock: boolean; // 個別株かどうかのフラグ
  isMutualFund: boolean; // 投資信託かどうかのフラグ
  feeSource: string; // 手数料情報の出所 ('個別株', '投資信託', 'ティッカー固有の情報', 'ファンドタイプからの推定', 'ユーザー設定')
  feeIsEstimated: boolean; // 手数料情報が推定値かどうか
  region?: string; // 対象地域 ('日本', '米国', 'グローバル', '不明')
  lastUpdated?: string;
  source?: string; // データソース名 ('Alpaca', 'Yahoo Finance Japan', 'Minkabu', 'Kabutan', '投資信託協会', 'Morningstar Japan', 'Yahoo Finance', 'Yahoo Finance Scraping', 'MarketWatch', 'Investing.com', 'Fallback')
  dividendYield: number; // 配当利回り（%）
  hasDividend: boolean; // 配当があるかどうか
  dividendFrequency: string; // 配当頻度（'monthly', 'quarterly', 'semi-annual', 'annual'）
  dividendIsEstimated: boolean; // 配当情報が推定値かどうか
  priceLabel?: string; // 価格表示ラベル ('株価' | '基準価額')
}
```

#### 追加予算（更新）
```typescript
// 変更前
// additionalBudget: number;

// 変更後
interface BudgetInfo {
  amount: number;      // 金額
  currency: string;    // 通貨 ('JPY' | 'USD')
}

additionalBudget: BudgetInfo;
```

#### シミュレーション結果（更新）
```typescript
// 変更前
// interface SimulationResult {
//   ticker: string;
//   name: string;
//   currentAllocation: number;
//   targetAllocation: number;
//   diff: number;
//   currentValue: number;
//   purchaseAmount: number;
// }

// 変更後
interface SimulationResult {
  ticker: string;         // 銘柄シンボル
  name: string;           // 銘柄名
  currentAllocation: number; // 現在の配分率（%）
  targetAllocation: number;  // 目標配分率（%）
  diff: number;           // 差分（%）
  currentValue: number;   // 現在の保有価値
  purchaseAmount: number; // 推奨購入金額
  purchaseShares: number; // 購入可能株数（新規追加）
  price: number;          // 現在の株価/基準価額（新規追加）
  currency: string;       // 通貨 ('JPY' | 'USD')（新規追加）
}
```

#### スクレイピング統計情報
```typescript
interface ScrapingStats {
  japaneseStocks: {
    tried: number; // 試行回数
    succeeded: number; // 成功回数
    sources: {
      yahooJapan: number;
      minkabu: number;
      kabutan: number;
    }
  };
  mutualFunds: {
    tried: number; // 試行回数
    succeeded: number; // 成功回数
    sources: {
      yahooJapan: number;
      toushinLib: number;
      morningstar: number;
      minkabu: number;
    }
  };
  usStocks: {
    tried: number; // 試行回数
    succeeded: number; // 成功回数
    sources: {
      yahooFinance: number;
      marketWatch: number;
      investingCom: number;
    }
  }
}
```

#### 通知メッセージ
```typescript
interface Notification {
  id: number; // タイムスタンプをIDとして使用
  message: string; // 表示メッセージ
  type: 'info' | 'success' | 'warning' | 'error'; // 通知タイプ
}
```

#### ローカルストレージデータ
```typescript
interface StorageData {
  baseCurrency: string;
  exchangeRate: object;
  lastUpdated: string;
  currentAssets: Asset[];
  targetPortfolio: TargetAllocation[];
  additionalBudget: BudgetInfo; // 更新
  version: string; // データバージョン管理用
  timestamp: string; // 保存日時
}
```

## 4. コンポーネント仕様

### 4.1 ダッシュボード画面コンポーネント
- **PortfolioSummary**: 総資産、銘柄数、年間手数料、年間配当金の表示
  - 最高/最低手数料率の銘柄を表示
  - 最高配当利回りの銘柄を表示
  - ファンドタイプ別の手数料統計を表示
  - ファンドタイプ別の配当金統計を表示
  - 投資信託の信託報酬を適切に表示
  - 手数料と配当についての説明を表示
- **PortfolioCharts**: 理想配分と現在配分の円グラフ
- **DifferenceChart**: 理想と現状の差分バーチャート
- **AssetsTable**: 保有資産の詳細テーブル
  - データソースと銘柄タイプの表示
  - 年間手数料の表示（個別株は0%、投資信託は信託報酬として表示）
  - 配当情報の表示（利回り、頻度、年間配当金）
  - 配当情報源のバッジ表示（推定値/確定値）
  - データソースのバッジ表示（スクレイピングソース別のバッジ）
  - 投資信託専用の表示（基準価額ラベル）
- **DataStatusBar**: データ更新状態と最終更新時刻の表示

### 4.2 設定画面コンポーネント
- **TickerSearch**: 銘柄検索と追加機能
  - 投資信託コードの自動認識と入力補助
- **PopularTickers**: 人気銘柄のワンクリック追加
  - インデックスファンド・ETFカテゴリ
  - 個別株カテゴリ
  - 日本市場カテゴリ
  - 投資信託カテゴリ
- **HoldingsEditor**: 保有資産の編集
  - 保有数量編集（小数点4桁対応）
  - 年間手数料率表示（個別株は編集不可）
  - 投資信託は信託報酬として表示
  - 銘柄タイプの表示
  - 手数料情報源を表示（個別株、投資信託、推定値、固有情報、ユーザー設定）
  - 配当情報の表示（利回り、頻度）
  - 配当情報源のバッジ表示
  - データソースのバッジ表示（スクレイピングソース別）
- **AllocationEditor**: 目標配分の編集

### 4.3 シミュレーション画面コンポーネント（更新）
- **BudgetInput**: 追加予算の入力と予算プリセット（更新）
  - 直接入力と増減ボタン
  - 通貨選択機能（円/ドル）（新規追加）
  - 通貨ごとの予算プリセットボタン（新規追加）
    - 円: 10万、30万、50万、100万
    - ドル: 1000、3000、5000、10000
  - 通貨に応じた入力の検証（最小値、最大値）（新規追加）
  - 現在の基本通貨設定をデフォルト値として使用（新規追加）
  - アクセシビリティ対応済み（ラベルと入力フィールドの関連付け）
  
  ```jsx
  // BudgetInput UI例（更新）
  <div className="p-4 bg-white rounded-lg shadow">
    <h2 className="text-lg font-bold mb-3">追加予算</h2>
    
    {/* 通貨選択ラジオボタン（新規追加） */}
    <div className="mb-3">
      <div className="flex space-x-4">
        <label className="inline-flex items-center">
          <input 
            type="radio" 
            name="currency" 
            value="JPY" 
            checked={currency === 'JPY'} 
            onChange={() => setCurrency('JPY')} 
            className="form-radio" 
          />
          <span className="ml-2">円 (¥)</span>
        </label>
        <label className="inline-flex items-center">
          <input 
            type="radio" 
            name="currency" 
            value="USD" 
            checked={currency === 'USD'} 
            onChange={() => setCurrency('USD')} 
            className="form-radio" 
          />
          <span className="ml-2">ドル ($)</span>
        </label>
      </div>
    </div>
    
    {/* 金額入力フィールド */}
    <div className="flex items-center mb-4">
      <span className="mr-2">{currency === 'JPY' ? '¥' : '$'}</span>
      <input 
        type="number" 
        id="budget-input" 
        value={amount} 
        onChange={handleAmountChange} 
        className="border rounded px-2 py-1 w-32" 
        min="0" 
      />
      <button 
        onClick={() => handleAmountChange({ target: { value: Number(amount) + step } })} 
        className="ml-2 px-3 py-1 bg-gray-200 rounded"
      >
        +
      </button>
      <button 
        onClick={() => handleAmountChange({ target: { value: Math.max(0, Number(amount) - step) } })} 
        className="ml-2 px-3 py-1 bg-gray-200 rounded"
      >
        -
      </button>
    </div>
    
    {/* 通貨に応じたプリセットボタン（更新） */}
    <div className="flex flex-wrap gap-2">
      {currency === 'JPY' ? (
        <>
          <button 
            onClick={() => setAmount(100000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            ¥10万
          </button>
          <button 
            onClick={() => setAmount(300000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            ¥30万
          </button>
          <button 
            onClick={() => setAmount(500000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            ¥50万
          </button>
          <button 
            onClick={() => setAmount(1000000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            ¥100万
          </button>
        </>
      ) : (
        <>
          <button 
            onClick={() => setAmount(1000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            $1,000
          </button>
          <button 
            onClick={() => setAmount(3000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            $3,000
          </button>
          <button 
            onClick={() => setAmount(5000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            $5,000
          </button>
          <button 
            onClick={() => setAmount(10000)} 
            className="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200"
          >
            $10,000
          </button>
        </>
      )}
    </div>
  </div>
  ```

- **SimulationResult**: シミュレーション結果表示と購入機能（更新）
  - 各銘柄の現在配分と目標配分の表示
  - 推奨購入金額の表示
  - 購入可能株数の表示（新規追加）
  - 株価/基準価額の表示（新規追加）
  - 銘柄ごとの通貨表示（新規追加）
  - 自動的な通貨換算結果の表示（新規追加）
  - 為替レートの明示的な表示（新規追加）
  
  ```jsx
  // SimulationResult UI例（更新）
  <div className="bg-white rounded-lg shadow p-4 mt-4">
    <h2 className="text-lg font-bold mb-3">シミュレーション結果</h2>
    
    {/* 為替レート表示（新規追加） */}
    {exchangeRate && (
      <div className="text-sm text-gray-600 mb-2">
        為替レート: 1 USD = {exchangeRate.rate.toFixed(2)} JPY
        <span className="text-xs ml-2">({exchangeRate.source}, {formatDate(exchangeRate.lastUpdated)})</span>
      </div>
    )}
    
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead>
          <tr>
            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">銘柄</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">現配分</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">目標</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">差分</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">購入額</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">株価</th>
            <th className="px-4 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">購入株数</th>
          </tr>
        </thead>
        <tbody className="divide-y divide-gray-200">
          {simulationResults.map((result) => (
            <tr key={result.ticker}>
              <td className="px-4 py-2 whitespace-nowrap">
                <div className="flex items-center">
                  <div className="text-sm font-medium text-gray-900">{result.ticker}</div>
                  <div className="ml-2">
                    <DataSourceBadge source={result.source} />
                  </div>
                </div>
                <div className="text-sm text-gray-500">{result.name}</div>
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm text-gray-500">
                {result.currentAllocation.toFixed(1)}%
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm text-gray-500">
                {result.targetAllocation.toFixed(1)}%
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm">
                <span className={
                  result.diff > 0 
                    ? 'text-green-600' 
                    : result.diff < 0 
                      ? 'text-red-600' 
                      : 'text-gray-500'
                }>
                  {result.diff > 0 ? '+' : ''}{result.diff.toFixed(1)}%
                </span>
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm text-gray-900">
                {result.currency === 'JPY' ? '¥' : '$'}
                {formatCurrency(result.purchaseAmount, result.currency)}
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm text-gray-900">
                {result.currency === 'JPY' ? '¥' : '$'}
                {formatCurrency(result.price, result.currency)}
              </td>
              <td className="px-4 py-2 whitespace-nowrap text-right text-sm text-gray-900">
                {result.purchaseShares > 0 
                  ? result.purchaseShares.toFixed(
                      result.isMutualFund ? 3 : 2
                    )
                  : 0}{result.isMutualFund ? '口' : '株'}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
  ```

### 4.4 データ連携画面コンポーネント
- **ExportOptions**: データエクスポート機能
  - JSON/CSV形式選択
  - ファイルダウンロードとクリップボードコピー
  - アクセシビリティ対応済み（ラジオグループの適切な構造化）
- **ImportOptions**: データインポート機能
  - JSON/CSV形式選択
  - ファイル/クリップボード/テキスト入力による取り込み
  - アクセシビリティ対応済み
- **GoogleDriveIntegration**: Googleドライブ連携機能
  - ログイン状態表示
  - クラウド保存/読み込みボタン
  - データ同期ステータス表示
  - 同期ボタン
- **DataErrorRecovery**: データ修復機能
  - ローカルストレージのクリア機能
  - データリセット機能
  - エラー報告表示

### 4.5 共通コンポーネント
- **Header**: アプリヘッダー（通貨切替、更新ボタン）
- **TabNavigation**: iOS風タブナビゲーション
- **LoginButton**: Googleログインボタン
- **UserProfile**: ユーザープロフィール表示
- **ToastNotification**: 通知メッセージ表示
  - 自動消去タイマー機能（情報/成功/警告通知は5秒後に自動消去）
  - 手動消去ボタン
  - 通知タイプ別のスタイリング
- **DataSourceBadge**: データソース表示バッジ
  - 各データソースに応じた表示（Alpaca、スクレイピングソース別、Yahoo Finance、Fallback）
  - ソースに応じた色分け
- **ErrorBoundary**: エラーバウンダリコンポーネント
  - エラー発生時の処理
  - リロード機能
  - エラー詳細表示

### 4.6 ユーティリティコンポーネント
- **FundTypeBadge**: ファンドタイプを表示するバッジ
- **FeeSourceBadge**: 手数料情報の出所を表示するバッジ
- **DividendBadge**: 配当情報を表示するバッジ
- **PriceDisplay**: 株価/基準価額を適切に表示するコンポーネント
- **ContextConnector**: コンテキスト間の連携を管理するコンポーネント

## 5. API・外部連携仕様

### 5.1 マルチソース対応
- **データソース優先順位**:
  1. 米国株: 
     - プライマリ: Alpaca API
     - セカンダリ: Yahoo Finance API
     - 最終手段: 米国株スクレイピング
     - フォールバック: デフォルト値
  2. 日本株: 
     - プライマリ: 日本株スクレイピング
     - セカンダリ: Yahoo Finance API
     - フォールバック: デフォルト値
  3. 投資信託: 
     - プライマリ: 投資信託スクレイピング
     - セカンダリ: Yahoo Finance API
     - フォールバック: デフォルト値

- **米国株スクレイピングサイト優先順位**:
  1. Yahoo Finance
  2. MarketWatch
  3. Investing.com

- **日本株スクレイピングサイト優先順位**:
  1. Yahoo Finance Japan
  2. Minkabu
  3. Kabutan

- **投資信託スクレイピングサイト優先順位**:
  1. Yahoo Finance Japan
  2. 投資信託協会
  3. Morningstar Japan
  4. Minkabu

## 6. イベントフロー

### 6.1 初期化フロー
1. アプリケーション起動
2. `PortfolioProvider` と `AuthProvider` の初期化
3. ContextConnectorによるコンテキスト間連携の確立
4. `initialized`フラグのチェック（既に初期化済みの場合は処理をスキップ）
5. ローカルストレージからのデータ読み込み（エラーハンドリング強化）
6. トークンストレージからの認証情報読み込み
7. データがあれば状態を更新し、UIに反映
8. 配当情報が欠けている場合は初期値を設定
9. 自動消去機能付き通知の表示（「前回のデータを読み込みました」）
10. 初期化完了のフラグを設定
11. エラー発生時はエラーバウンダリでキャッチ

### 6.2 シミュレーション計算フロー（更新）
1. ユーザーが入金額と通貨を選択（円またはドル）
2. 追加予算の通貨を確認
3. 必要に応じて銘柄の通貨に換算（為替レートを使用）
4. 購入金額の計算（現行ロジックと同様）
5. 購入株数の計算（購入金額 ÷ 株価）（新規追加）
6. 結果オブジェクトに購入株数、株価、通貨情報を追加（新規追加）
7. 計算結果を表示（購入株数列を追加）

```javascript
// 通貨換算処理（新規追加）
function convertCurrency(amount, fromCurrency, toCurrency, exchangeRate) {
  if (fromCurrency === toCurrency) {
    return amount;
  }
  
  // 円→ドル
  if (fromCurrency === 'JPY' && toCurrency === 'USD') {
    return amount / exchangeRate.rate;
  }
  
  // ドル→円
  if (fromCurrency === 'USD' && toCurrency === 'JPY') {
    return amount * exchangeRate.rate;
  }
  
  throw new Error(`Unsupported currency conversion: ${fromCurrency} to ${toCurrency}`);
}

// 購入株数の計算（新規追加）
function calculatePurchaseShares(purchaseAmount, price) {
  return Math.floor((purchaseAmount / price) * 100) / 100;
}

// シミュレーション計算のメイン処理（更新）
function calculateSimulation(assets, targetPortfolio, additionalBudget, exchangeRate) {
  const totalValue = calculateTotalValue(assets);
  const results = [];
  
  // 予算通貨の取得
  const budgetCurrency = additionalBudget.currency;
  const budgetAmount = additionalBudget.amount;
  
  for (const target of targetPortfolio) {
    const asset = assets.find(a => a.ticker === target.ticker);
    if (!asset) continue;
    
    const currentValue = asset.price * asset.holdings;
    const currentAllocation = (currentValue / totalValue) * 100;
    const targetAllocation = target.allocation;
    const diff = targetAllocation - currentAllocation;
    
    // 差分が正の場合（配分を増やす必要がある場合）のみ購入
    if (diff > 0) {
      // 予算から理想的に購入すべき金額を計算
      const idealPurchase = (diff / 100) * (totalValue + budgetAmount);
      
      // 通貨を考慮した購入金額の計算
      let purchaseAmount = idealPurchase;
      
      // 銘柄の通貨と予算の通貨が異なる場合は変換
      if (asset.currency !== budgetCurrency) {
        purchaseAmount = convertCurrency(
          idealPurchase,
          budgetCurrency,
          asset.currency,
          exchangeRate
        );
      }
      
      // 購入可能株数の計算
      const purchaseShares = calculatePurchaseShares(purchaseAmount, asset.price);
      
      results.push({
        ticker: asset.ticker,
        name: asset.name,
        currentAllocation,
        targetAllocation,
        diff,
        currentValue,
        purchaseAmount,
        purchaseShares, // 新規追加
        price: asset.price, // 新規追加
        currency: asset.currency, // 新規追加
        source: asset.source,
        isMutualFund: asset.isMutualFund
      });
    }
  }
  
  // 購入金額の大きい順にソート
  return results.sort((a, b) => b.purchaseAmount - a.purchaseAmount);
}
```

## 改訂履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/6 | 初版作成 |  |
| 2.0 | 2025/03/7 | jwt-decode対応、アクセシビリティ対応、プロキシ設定更新 |  |
| 3.0 | 2025/03/07 10:20 | Alpha Vantage API連携強化、環境変数名統一、マルチソースデータ取得フロー実装 |  |
| 3.4 | 2025/03/23 09:45 | Python依存をなくすためYahoo Finance APIをJavaScript実装に変更、Python yfinanceコードは残しつつ実際はyahoo-finance-proxyを使用、データソース名とフォールバック処理の更新 |  |
| 3.5 | 2025/03/27 18:00 | データソースをAlpaca API（米国株）、日本株スクレイピング、投資信託スクレイピングに変更、フォールバック処理の更新、デザインコンポーネントの追加 |  |
| 3.6 | 2025/03/28 14:00 | スクレイピングソース対応のインターフェース仕様の詳細化。スクレイピング統計情報データ構造の追加。データソースバッジのスクレイピングソース対応。スクレイピング特有のエラー処理追加。 |  |
| 3.7 | 2025/03/29 16:30 | 米国株スクレイピング機能の追加。データソース優先順位の更新。ユーザーインターフェースのデータソースバッジとスタイルの更新。マルチソースフローの更新。スクレイピング統計情報のデータ構造更新。|  |
| 4.0 | 2025/03/30 12:30 | 入金シミュレーション機能の複数通貨対応（円/ドル）、購入株数表示機能を追加。BudgetInputコンポーネントとSimulationResultコンポーネントの更新。通貨換算処理とシミュレーション計算処理の更新。 |  |

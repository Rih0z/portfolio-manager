# ポートフォリオマネージャー セットアップガイド（更新版）

**バージョン:** 1.4  
**最終更新日時:** 2025/03/27 18:30

このガイドでは、ポートフォリオマネージャーアプリケーションを実行するための手順を解説します。GitHubリポジトリからのクローン、ローカル環境でのセットアップ、およびNetlifyへのデプロイについて説明します。

## 1. 前提条件

- Node.js v16.x以上
- npm v8.x以上
- Git

## 2. ローカル環境でのセットアップ

### 2.1 リポジトリのクローン

```bash
# リポジトリをクローン
git clone https://github.com/your-organization/portfolio-manager.git
cd portfolio-manager
```

### 2.2 依存パッケージのインストール

```bash
npm install
```

### 2.3 環境変数の設定

プロジェクトのルートディレクトリに `.env.local` ファイルを作成し、必要な環境変数を設定します。

```
# Google OAuth認証用
REACT_APP_GOOGLE_CLIENT_ID=あなたのGoogleクライアントID
REACT_APP_GOOGLE_API_KEY=あなたのGoogle APIキー

# Alpaca API（米国株データ取得用）
ALPACA_API_KEY=あなたのAlpaca APIキー
ALPACA_API_SECRET=あなたのAlpaca API Secret

# デフォルト為替レート（API障害時のフォールバック用）
DEFAULT_EXCHANGE_RATE=150.0
```

### 2.4 開発サーバーの起動

```bash
npm start
```

ブラウザが自動的に開き、`http://localhost:3000` でアプリケーションにアクセスできます。

### 2.5 Netlify Functions のローカル実行

Netlify Functions をローカルで実行するには：

```bash
# Netlify CLI をインストール（初回のみ）
npm install -g netlify-cli

# Netlify 開発サーバーを起動
netlify dev
```

これにより、アプリケーションと Functions の両方が起動され、`http://localhost:8888` でアクセスできます。

## 3. クラウド環境へのデプロイ

### 3.1 Netlify へのデプロイ

#### 3.1.1 Netlify CLI を使用する方法

```bash
# Netlify CLIをインストール（まだの場合）
npm install -g netlify-cli

# Netlifyにログイン
netlify login

# プロジェクトの初期化（初回のみ）
netlify init

# 本番環境へのデプロイ
netlify deploy --prod
```

#### 3.1.2 Netlify ダッシュボードを使用する方法

1. [Netlify](https://app.netlify.com/)にログイン
2. 「Add new site」→「Import an existing project」をクリック
3. GitHubなどのリポジトリプロバイダを選択し、リポジトリを選択
4. 以下のビルド設定を行う：
   - Build command: `CI= npm run build`
   - Publish directory: `build`
   - Functions directory: `functions`
5. 「Show advanced」をクリックし、環境変数を設定：
   - `REACT_APP_GOOGLE_CLIENT_ID`: Google OAuthクライアントID
   - `REACT_APP_GOOGLE_API_KEY`: Google APIキー
   - `ALPACA_API_KEY`: Alpaca APIキー
   - `ALPACA_API_SECRET`: Alpaca API Secret
   - `DEFAULT_EXCHANGE_RATE`: デフォルト為替レート（例: 150.0）
6. 「Deploy site」をクリック

### 3.2 GitHubとの連携によるCI/CD

1. Netlify ダッシュボードの「Site settings」→「Build & deploy」→「Continuous Deployment」を開く
2. 「Build hooks」セクションで「Add build hook」をクリック
3. フック名を入力し、ブランチを選択（例：「main」）
4. 生成されたURLをコピー
5. GitHubリポジトリの「Settings」→「Webhooks」→「Add webhook」で設定
   - Payload URL: コピーしたURL
   - Content type: `application/json`
   - Secret: 空白でOK
   - 「Just the push event」を選択
   - 「Active」にチェック
6. 「Add webhook」をクリック

これで、main ブランチへのプッシュが発生するたびに、自動的にNetlifyでのビルドとデプロイが行われます。

## 4. APIキーの取得方法

### 4.1 Google OAuthクライアントIDとAPIキーの取得

1. [Google Cloud Console](https://console.cloud.google.com/)にアクセス
2. 新しいプロジェクトを作成またはプロジェクトを選択
3. 「APIとサービス」→「認証情報」に移動
4. 「認証情報を作成」→「OAuthクライアントID」をクリック
5. アプリケーションタイプとして「ウェブアプリケーション」を選択
6. 承認済みのJavaScriptオリジンとリダイレクトURIを設定
   - ローカル開発用: `http://localhost:3000` と `http://localhost:8888`
   - 本番環境用: `https://あなたのnetlifyドメイン.netlify.app`
7. クライアントIDとシークレットを取得
8. 同様に「APIキー」を作成し、必要に応じて制限を設定

### 4.2 Alpaca APIキーの取得

1. [Alpaca](https://alpaca.markets/)にアクセスしてアカウントを作成
2. Paper Trading（テスト用）または実環境のAPIキーを取得
3. APIキーとシークレットをコピー

## 5. トラブルシューティング

### 5.1 ローカル開発時の問題

#### APIリクエストの問題
- Netlify Functions へのリクエストが失敗する場合は、プロキシ設定を確認してください。
- `setupProxy.js` が正しく設定されていることを確認します。
- Netlify Dev を使用している場合は、`.netlify/functions/` パスが正しく機能していることを確認します。

#### 環境変数の問題
- `.env.local` ファイルが正しく設定されていることを確認します。
- 環境変数の変更後は、開発サーバーを再起動してください。

### 5.2 デプロイ時の問題

#### ビルド失敗
- Netlify のビルドログを確認してください。
- `CI=` フラグがビルドコマンドに含まれていることを確認します（警告をエラーとして扱わないため）。

#### API連携の問題
- Netlify環境変数が正しく設定されていることを確認します。
- Alpaca APIのレート制限（無料プランでは制限あり）に注意してください。
- Functions のログをNetlifyダッシュボードで確認します。

#### 認証の問題
- Google OAuth クライアントIDに正しいリダイレクトURIが設定されていることを確認します。
- 本番環境のURLをGoogle Cloud Consoleの承認済みオリジンとリダイレクトURIに追加します。

### 5.3 データソース関連の問題

#### Alpaca API（米国株）の問題
- APIキーとシークレットが正しく設定されていることを確認してください。
- API呼び出しの制限に達していないか確認してください。
- 米国株のティッカーシンボルが正しいことを確認してください。

#### Yahoo Finance API（日本株・投資信託）の問題
- 日本株の証券コードが4桁であることを確認してください。
- 投資信託のコードが正しいフォーマット（7-8桁+C）であることを確認してください。
- アクセス制限に達していないか確認してください。

#### 為替レート取得の問題
- exchangerate.hostが利用可能かどうか確認してください。
- フォールバック値（DEFAULT_EXCHANGE_RATE）が設定されていることを確認してください。

## 6. データの永続化と同期

### 6.1 ローカルストレージ

アプリケーションはブラウザのローカルストレージを使用して、次のデータを保存します：
- 保有資産情報
- 目標配分設定
- 追加予算設定
- 通貨設定と為替レート情報
- 投資信託情報を含む銘柄情報

データはURIエンコード+Base64エンコーディングによる簡易暗号化が施されています。

### 6.2 Googleドライブ連携

Google認証後に以下の機能が利用可能になります：
- クラウドへのデータ保存
- クラウドからのデータ読み込み
- データ同期（ローカルとクラウドの最新データを同期）

## 7. よくある質問

### Q: Alpaca APIのレート制限に達した場合はどうなりますか？
A: フォールバック機構が自動的に動作し、保存されている前回データまたはデフォルト値を使用してアプリケーションが継続して動作します。

### Q: 投資信託のコードはどのように入力すればよいですか？
A: 投資信託コードは通常7-8桁の数字+C（例: 8630042C）の形式で入力してください。システムが自動的に投資信託として認識します。

### Q: ブラウザを変更するとデータが失われますか？
A: ローカルストレージはブラウザごとに独立しているため、データは失われます。Google認証を行い、クラウド同期機能を使用することで、複数のブラウザ間でデータを共有できます。

### Q: 個別株の手数料はどのように計算されますか？
A: 個別株の年間手数料率は常に0%として固定されており、ユーザーによる編集はできません。

### Q: 投資信託の「基準価額」と株式の「株価」の違いは何ですか？
A: システムは投資信託コードを認識すると、自動的に「基準価額」として表示します。「基準価額」は投資信託の1口あたりの価格を表し、「株価」は株式の1株あたりの価格を表します。

## 8. 更新履歴

| バージョン | 日付 | 内容 | 担当者 |
|---|---|---|---|
| 1.0 | 2025/03/6 | 初版作成 |  |
| 1.1 | 2025/03/08 09:45 | Alpha Vantage API連携強化・環境変数名統一・トラブルシューティング追加 |  |
| 1.2 | 2025/03/12 16:40 | ローカルストレージによるデータ永続化機能・Google認証連携・コンテキスト連携の追加 |  |
| 1.3 | 2025/03/15 11:25 | GitHubコードの実行に特化した内容に更新 |  |
| 1.4 | 2025/03/27 18:30 | データソースをAlpaca API（米国株）とYahoo Finance API（日本株・投資信託）に変更、投資信託対応の強化、トラブルシューティング更新 |  |

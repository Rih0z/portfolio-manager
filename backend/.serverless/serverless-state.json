{
  "service": {
    "service": "pfwise-api",
    "serviceObject": {
      "name": "pfwise-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-west-2",
      "stage": "prod",
      "profile": "",
      "memorySize": 256,
      "timeout": 30,
      "environment": {
        "NODE_ENV": "prod",
        "ADMIN_EMAIL": "",
        "DAILY_REQUEST_LIMIT": "10000",
        "MONTHLY_REQUEST_LIMIT": "200000",
        "DISABLE_ON_LIMIT": "true",
        "ADMIN_IP_WHITELIST": "98.234.86.34",
        "IP_BLACKLIST": "",
        "BLOCKED_COUNTRIES": "",
        "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
        "CACHE_TIME_US_STOCK": "3600",
        "CACHE_TIME_JP_STOCK": "3600",
        "CACHE_TIME_MUTUAL_FUND": "10800",
        "CACHE_TIME_EXCHANGE_RATE": "3600",
        "SESSION_TABLE": "pfwise-api-prod-sessions",
        "CACHE_TABLE": "pfwise-api-prod-cache",
        "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
        "DRIVE_FOLDER_NAME": "PortfolioManagerData",
        "LOG_LEVEL": "warn",
        "BUDGET_CHECK_ENABLED": "true",
        "FREE_TIER_LIMIT": "25",
        "DEFAULT_EXCHANGE_RATE": "150.0",
        "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
        "USE_SECRETS_MANAGER": "true",
        "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
        "JP_STOCK_SCRAPING_TIMEOUT": "30000",
        "US_STOCK_SCRAPING_TIMEOUT": "20000",
        "MUTUAL_FUND_TIMEOUT": "30000",
        "SCRAPING_RATE_LIMIT_DELAY": "500",
        "SCRAPING_MAX_FAILURES": "3",
        "SCRAPING_COOLDOWN_DAYS": "7",
        "ENABLE_AUDIT_LOGGING": "true",
        "ENABLE_RATE_LIMITING": "true",
        "MAX_REQUESTS_PER_MINUTE": "100",
        "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
        "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeTable"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "MarketDataCacheTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "SessionsTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "ScrapingBlacklistTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "RateLimitTable",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            {
              "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:pfwise-api/credentials-*"
            },
            {
              "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:pfwise-api/google-oauth-*"
            },
            {
              "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:pfwise-api/github-token-*"
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "budgets:DescribeBudgetPerformanceHistory",
            "budgets:DescribeBudgets"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MarketDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-marketData"
            }
          },
          "PreWarmCacheLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-preWarmCache"
            }
          },
          "GetStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-getStatus"
            }
          },
          "ResetUsageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-resetUsage"
            }
          },
          "GetBudgetStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-getBudgetStatus"
            }
          },
          "GoogleLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-googleLogin"
            }
          },
          "GetSessionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-getSession"
            }
          },
          "LogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-logout"
            }
          },
          "GoogleDriveAuthInitiateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-googleDriveAuthInitiate"
            }
          },
          "GoogleDriveAuthCallbackLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-googleDriveAuthCallback"
            }
          },
          "SaveFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-saveFile"
            }
          },
          "LoadFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-loadFile"
            }
          },
          "ListFilesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-listFiles"
            }
          },
          "GetClientConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-getClientConfig"
            }
          },
          "DebugGoogleConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/pfwise-api-prod-debugGoogleConfig"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "pfwise-api",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pfwise-api-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/pfwise-api-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "pfwise-api",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MarketDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/marketData.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-marketData",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MarketDataLogGroup"
            ]
          },
          "PreWarmCacheLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/preWarmCache.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-preWarmCache",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreWarmCacheLogGroup"
            ]
          },
          "GetStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/admin/getStatus.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-getStatus",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetStatusLogGroup"
            ]
          },
          "ResetUsageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/admin/resetUsage.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-resetUsage",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResetUsageLogGroup"
            ]
          },
          "GetBudgetStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/admin/getBudgetStatus.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-getBudgetStatus",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetBudgetStatusLogGroup"
            ]
          },
          "GoogleLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/auth/googleLogin.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-googleLogin",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GoogleLoginLogGroup"
            ]
          },
          "GetSessionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/auth/getSession.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-getSession",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSessionLogGroup"
            ]
          },
          "LogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/auth/logout.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-logout",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LogoutLogGroup"
            ]
          },
          "GoogleDriveAuthInitiateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/auth/googleDriveAuth.initiateAuth",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-googleDriveAuthInitiate",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GoogleDriveAuthInitiateLogGroup"
            ]
          },
          "GoogleDriveAuthCallbackLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/auth/googleDriveAuth.callback",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-googleDriveAuthCallback",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GoogleDriveAuthCallbackLogGroup"
            ]
          },
          "SaveFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/drive/saveFile.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-saveFile",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveFileLogGroup"
            ]
          },
          "LoadFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/drive/loadFile.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-loadFile",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoadFileLogGroup"
            ]
          },
          "ListFilesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/drive/listFiles.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-listFiles",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListFilesLogGroup"
            ]
          },
          "GetClientConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/config/getClientConfig.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-getClientConfig",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClientConfigLogGroup"
            ]
          },
          "DebugGoogleConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z/pfwise-api.zip"
              },
              "Handler": "src/function/debug/googleConfig.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "pfwise-api-prod-debugGoogleConfig",
              "MemorySize": 256,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "prod",
                  "ADMIN_EMAIL": "",
                  "DAILY_REQUEST_LIMIT": "10000",
                  "MONTHLY_REQUEST_LIMIT": "200000",
                  "DISABLE_ON_LIMIT": "true",
                  "ADMIN_IP_WHITELIST": "98.234.86.34",
                  "IP_BLACKLIST": "",
                  "BLOCKED_COUNTRIES": "",
                  "RATE_LIMIT_TABLE": "pfwise-api-prod-rate-limits",
                  "CACHE_TIME_US_STOCK": "3600",
                  "CACHE_TIME_JP_STOCK": "3600",
                  "CACHE_TIME_MUTUAL_FUND": "10800",
                  "CACHE_TIME_EXCHANGE_RATE": "3600",
                  "SESSION_TABLE": "pfwise-api-prod-sessions",
                  "CACHE_TABLE": "pfwise-api-prod-cache",
                  "CORS_ALLOW_ORIGIN": "*.portfoliomanager.com",
                  "DRIVE_FOLDER_NAME": "PortfolioManagerData",
                  "LOG_LEVEL": "warn",
                  "BUDGET_CHECK_ENABLED": "true",
                  "FREE_TIER_LIMIT": "25",
                  "DEFAULT_EXCHANGE_RATE": "150.0",
                  "SECRETS_MANAGER_SECRET_NAME": "pfwise-api/credentials",
                  "USE_SECRETS_MANAGER": "true",
                  "YAHOO_FINANCE_API_HOST": "yh-finance.p.rapidapi.com",
                  "JP_STOCK_SCRAPING_TIMEOUT": "30000",
                  "US_STOCK_SCRAPING_TIMEOUT": "20000",
                  "MUTUAL_FUND_TIMEOUT": "30000",
                  "SCRAPING_RATE_LIMIT_DELAY": "500",
                  "SCRAPING_MAX_FAILURES": "3",
                  "SCRAPING_COOLDOWN_DAYS": "7",
                  "ENABLE_AUDIT_LOGGING": "true",
                  "ENABLE_RATE_LIMITING": "true",
                  "MAX_REQUESTS_PER_MINUTE": "100",
                  "DRIVE_AUTH_SUCCESS_URL": "https://portfolio-wise.com/drive-success",
                  "CORS_ALLOWED_ORIGINS": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DebugGoogleConfigLogGroup"
            ]
          },
          "MarketDataLambdaVersionrz2yW4XzBqJzksIlqwQ0EphO2pJOMskBSsVkofbKI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MarketDataLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "PreWarmCacheLambdaVersionaSXJuSFsqw6HVkxmu0t8fiTKlFoC6VRZ611l1zB0Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreWarmCacheLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GetStatusLambdaVersionFCFWJYVzCUZbDf6WbxujeMXLchXVNvrv65otp2QFY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetStatusLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "ResetUsageLambdaVersiontSZKQKRuCW4lpp9AIg8dpLbNVOdUy46fJgQEhL11NHs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResetUsageLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GetBudgetStatusLambdaVersion8CVJdp5j34L8Rm8ERfB2zsfsha8S4nsvKeod1jJDQ8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBudgetStatusLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GoogleLoginLambdaVersionXjYy3dfIxa2pzEg4crpVmNMjbtN1lYId2imWxrxscY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GoogleLoginLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GetSessionLambdaVersionbfBvINraGp7ZdQAmOLbBHGy4H8gUmtVIWCIUbtkU4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSessionLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "LogoutLambdaVersionnxng7UhwG9m921DzTdhVPGhCmNkXx65qYJfkhR7mUs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LogoutLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GoogleDriveAuthInitiateLambdaVersion30rRVuwXhXfBKwq6pri4ggImZkJVIZUQrb3Vjsp7Ig": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GoogleDriveAuthInitiateLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GoogleDriveAuthCallbackLambdaVersion5GjxK88v4j365vdSjFZdVOtqv3guOZ8f5L3aDuATqQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GoogleDriveAuthCallbackLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "SaveFileLambdaVersionXbqOKL9kJIDkuY8nSKTNq09b9yRsc09M8gPO0TFRs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveFileLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "LoadFileLambdaVersionIBg7LZRoCnHQr9rOR9F1Aavn8xcObqNEkwvnkjYjo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoadFileLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "ListFilesLambdaVersionlfP3ZZ3IcjMezFUjW821mZMq9gSbH03rnxVOPYnv16s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListFilesLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "GetClientConfigLambdaVersionvIKZCFBpAMKpXBCak9lu6Q0x4R0mRDG74f6fNvKuK8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClientConfigLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "DebugGoogleConfigLambdaVersionQcX2s9fgyDEXBrYc5JJfk5YjliDOrpvytP5ips9hdg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DebugGoogleConfigLambdaFunction"
              },
              "CodeSha256": "wZX/b6u+l38n9/3eITMzU3ErEB6+pTM981xczibQDrc="
            }
          },
          "PreWarmCacheEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(6 hours)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "PreWarmCacheLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "preWarmCacheSchedule"
                }
              ]
            }
          },
          "PreWarmCacheLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PreWarmCacheLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "PreWarmCacheEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-pfwise-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiMarketDashdata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "market-data",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdmin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "admin",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminStatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "status",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminReset": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "reset",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAdminGetbudgetstatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAdmin"
              },
              "PathPart": "getBudgetStatus",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthGoogle": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "google",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthGoogleLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthGoogle"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthGoogleDrive": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthGoogle"
              },
              "PathPart": "drive",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthGoogleDriveInitiate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthGoogleDrive"
              },
              "PathPart": "initiate",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthGoogleDriveCallback": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthGoogleDrive"
              },
              "PathPart": "callback",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthSession": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "session",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogout": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "logout",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDrive": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "drive",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDriveSave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDrive"
              },
              "PathPart": "save",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDriveLoad": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDrive"
              },
              "PathPart": "load",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDriveFiles": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDrive"
              },
              "PathPart": "files",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "config",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConfigClient": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceConfig"
              },
              "PathPart": "client",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebug": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "debug",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebugGoogleDashconfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDebug"
              },
              "PathPart": "google-config",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiMarketDashdataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiMarketDashdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminStatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminResetOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminReset"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAdminGetbudgetstatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminGetbudgetstatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthGoogleLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "AWS_PROXY",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ],
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GoogleLoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false
            },
            "DependsOn": [
              "GoogleLoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthSessionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSession"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLogoutOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogout"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthGoogleDriveInitiateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "AWS_PROXY",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ],
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GoogleDriveAuthInitiateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleDriveInitiate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false
            },
            "DependsOn": [
              "GoogleDriveAuthInitiateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthGoogleDriveCallbackOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleDriveCallback"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDriveSaveOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDriveLoadOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveLoad"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDriveFilesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveFiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConfigClientOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'http://localhost:3001'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Cookie'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\"http://localhost:3001\") || $origin.matches(\"http://localhost:3000\") || $origin.matches(\"https://portfolio-wise[.]com\") || $origin.matches(\"https://www[.]portfolio-wise[.]com\") || $origin.matches(\"https://app[.]portfolio-wise[.]com\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceConfigClient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDebugGoogleDashconfigOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugGoogleDashconfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiMarketDashdataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiMarketDashdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MarketDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MarketDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminStatusGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetStatusLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminResetPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminReset"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResetUsageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResetUsageLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAdminGetbudgetstatusGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAdminGetbudgetstatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBudgetStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetBudgetStatusLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthGoogleLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GoogleLoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GoogleLoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthSessionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthSession"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSessionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSessionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthLogoutPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogout"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LogoutLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LogoutLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthGoogleDriveInitiateGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleDriveInitiate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GoogleDriveAuthInitiateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GoogleDriveAuthInitiateLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthGoogleDriveCallbackGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthGoogleDriveCallback"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GoogleDriveAuthCallbackLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GoogleDriveAuthCallbackLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDriveSavePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveFileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDriveLoadGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveLoad"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoadFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoadFileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDriveFilesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDriveFiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListFilesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListFilesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodConfigClientGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConfigClient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClientConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetClientConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDebugGoogleDashconfigGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugGoogleDashconfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DebugGoogleConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DebugGoogleConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1748484561077": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodApiMarketDashdataOptions",
              "ApiGatewayMethodAdminStatusOptions",
              "ApiGatewayMethodAdminResetOptions",
              "ApiGatewayMethodAdminGetbudgetstatusOptions",
              "ApiGatewayMethodAuthGoogleLoginOptions",
              "ApiGatewayMethodAuthSessionOptions",
              "ApiGatewayMethodAuthLogoutOptions",
              "ApiGatewayMethodAuthGoogleDriveInitiateOptions",
              "ApiGatewayMethodAuthGoogleDriveCallbackOptions",
              "ApiGatewayMethodDriveSaveOptions",
              "ApiGatewayMethodDriveLoadOptions",
              "ApiGatewayMethodDriveFilesOptions",
              "ApiGatewayMethodConfigClientOptions",
              "ApiGatewayMethodDebugGoogleDashconfigOptions",
              "ApiGatewayMethodApiMarketDashdataGet",
              "ApiGatewayMethodAdminStatusGet",
              "ApiGatewayMethodAdminResetPost",
              "ApiGatewayMethodAdminGetbudgetstatusGet",
              "ApiGatewayMethodAuthGoogleLoginPost",
              "ApiGatewayMethodAuthGoogleLoginOptions",
              "ApiGatewayMethodAuthSessionGet",
              "ApiGatewayMethodAuthLogoutPost",
              "ApiGatewayMethodAuthGoogleDriveInitiateGet",
              "ApiGatewayMethodAuthGoogleDriveInitiateOptions",
              "ApiGatewayMethodAuthGoogleDriveCallbackGet",
              "ApiGatewayMethodDriveSavePost",
              "ApiGatewayMethodDriveLoadGet",
              "ApiGatewayMethodDriveFilesGet",
              "ApiGatewayMethodConfigClientGet",
              "ApiGatewayMethodDebugGoogleDashconfigGet"
            ]
          },
          "MarketDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MarketDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResetUsageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResetUsageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBudgetStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBudgetStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GoogleLoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GoogleLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSessionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSessionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LogoutLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GoogleDriveAuthInitiateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GoogleDriveAuthInitiateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GoogleDriveAuthCallbackLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GoogleDriveAuthCallbackLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveFileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveFileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoadFileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoadFileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListFilesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListFilesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClientConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClientConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DebugGoogleConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DebugGoogleConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MarketDataCacheTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "pfwise-api-prod-cache",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "key",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "key",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "SessionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "pfwise-api-prod-sessions",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "sessionId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "sessionId",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "ScrapingBlacklistTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "pfwise-api-prod-scraping-blacklist",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "symbol",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "symbol",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "RateLimitTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "pfwise-api-prod-rate-limits",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-ServerlessDeploymentBucketName"
            }
          },
          "MarketDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MarketDataLambdaVersionrz2yW4XzBqJzksIlqwQ0EphO2pJOMskBSsVkofbKI"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-MarketDataLambdaFunctionQualifiedArn"
            }
          },
          "PreWarmCacheLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreWarmCacheLambdaVersionaSXJuSFsqw6HVkxmu0t8fiTKlFoC6VRZ611l1zB0Y"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-PreWarmCacheLambdaFunctionQualifiedArn"
            }
          },
          "GetStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetStatusLambdaVersionFCFWJYVzCUZbDf6WbxujeMXLchXVNvrv65otp2QFY"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GetStatusLambdaFunctionQualifiedArn"
            }
          },
          "ResetUsageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResetUsageLambdaVersiontSZKQKRuCW4lpp9AIg8dpLbNVOdUy46fJgQEhL11NHs"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-ResetUsageLambdaFunctionQualifiedArn"
            }
          },
          "GetBudgetStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBudgetStatusLambdaVersion8CVJdp5j34L8Rm8ERfB2zsfsha8S4nsvKeod1jJDQ8"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GetBudgetStatusLambdaFunctionQualifiedArn"
            }
          },
          "GoogleLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GoogleLoginLambdaVersionXjYy3dfIxa2pzEg4crpVmNMjbtN1lYId2imWxrxscY"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GoogleLoginLambdaFunctionQualifiedArn"
            }
          },
          "GetSessionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSessionLambdaVersionbfBvINraGp7ZdQAmOLbBHGy4H8gUmtVIWCIUbtkU4"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GetSessionLambdaFunctionQualifiedArn"
            }
          },
          "LogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LogoutLambdaVersionnxng7UhwG9m921DzTdhVPGhCmNkXx65qYJfkhR7mUs"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-LogoutLambdaFunctionQualifiedArn"
            }
          },
          "GoogleDriveAuthInitiateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GoogleDriveAuthInitiateLambdaVersion30rRVuwXhXfBKwq6pri4ggImZkJVIZUQrb3Vjsp7Ig"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GoogleDriveAuthInitiateLambdaFunctionQualifiedArn"
            }
          },
          "GoogleDriveAuthCallbackLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GoogleDriveAuthCallbackLambdaVersion5GjxK88v4j365vdSjFZdVOtqv3guOZ8f5L3aDuATqQ"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GoogleDriveAuthCallbackLambdaFunctionQualifiedArn"
            }
          },
          "SaveFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveFileLambdaVersionXbqOKL9kJIDkuY8nSKTNq09b9yRsc09M8gPO0TFRs"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-SaveFileLambdaFunctionQualifiedArn"
            }
          },
          "LoadFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoadFileLambdaVersionIBg7LZRoCnHQr9rOR9F1Aavn8xcObqNEkwvnkjYjo"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-LoadFileLambdaFunctionQualifiedArn"
            }
          },
          "ListFilesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListFilesLambdaVersionlfP3ZZ3IcjMezFUjW821mZMq9gSbH03rnxVOPYnv16s"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-ListFilesLambdaFunctionQualifiedArn"
            }
          },
          "GetClientConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClientConfigLambdaVersionvIKZCFBpAMKpXBCak9lu6Q0x4R0mRDG74f6fNvKuK8"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-GetClientConfigLambdaFunctionQualifiedArn"
            }
          },
          "DebugGoogleConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DebugGoogleConfigLambdaVersionQcX2s9fgyDEXBrYc5JJfk5YjliDOrpvytP5ips9hdg"
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-DebugGoogleConfigLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-pfwise-api-prod-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "driveRedirectUri": {
        "dev": "https://x4scpbsuv2.execute-api.us-west-2.amazonaws.com/dev/auth/google/drive/callback",
        "prod": "https://api.portfolio-wise.com/auth/google/drive/callback"
      },
      "driveSuccessUrl": {
        "dev": "http://localhost:3001/drive-success",
        "prod": "https://portfolio-wise.com/drive-success"
      },
      "corsAllowedOrigins": {
        "dev": "http://localhost:3000,http://localhost:3001,https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com",
        "prod": "https://portfolio-wise.com,https://www.portfolio-wise.com,https://app.portfolio-wise.com"
      },
      "logRetentionInDays": {
        "dev": 7,
        "prod": 30
      },
      "reservedConcurrentExecutions": {
        "prod": 100,
        "dev": null
      },
      "limits": {
        "dev": {
          "daily": "5000",
          "monthly": "100000"
        },
        "prod": {
          "daily": "10000",
          "monthly": "200000"
        }
      },
      "logLevel": {
        "dev": "info",
        "prod": "warn"
      },
      "budgetCheck": {
        "dev": "false",
        "prod": "true"
      }
    },
    "plugins": [
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "marketData": {
        "handler": "src/function/marketData.handler",
        "events": [
          {
            "http": {
              "path": "api/market-data",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-marketData",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MarketDataLambdaVersionrz2yW4XzBqJzksIlqwQ0EphO2pJOMskBSsVkofbKI"
      },
      "preWarmCache": {
        "handler": "src/function/preWarmCache.handler",
        "events": [
          {
            "schedule": "rate(6 hours)"
          }
        ],
        "name": "pfwise-api-prod-preWarmCache",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PreWarmCacheLambdaVersionaSXJuSFsqw6HVkxmu0t8fiTKlFoC6VRZ611l1zB0Y"
      },
      "getStatus": {
        "handler": "src/function/admin/getStatus.handler",
        "events": [
          {
            "http": {
              "path": "admin/status",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-getStatus",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetStatusLambdaVersionFCFWJYVzCUZbDf6WbxujeMXLchXVNvrv65otp2QFY"
      },
      "resetUsage": {
        "handler": "src/function/admin/resetUsage.handler",
        "events": [
          {
            "http": {
              "path": "admin/reset",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-resetUsage",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ResetUsageLambdaVersiontSZKQKRuCW4lpp9AIg8dpLbNVOdUy46fJgQEhL11NHs"
      },
      "getBudgetStatus": {
        "handler": "src/function/admin/getBudgetStatus.handler",
        "events": [
          {
            "http": {
              "path": "admin/getBudgetStatus",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-getBudgetStatus",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetBudgetStatusLambdaVersion8CVJdp5j34L8Rm8ERfB2zsfsha8S4nsvKeod1jJDQ8"
      },
      "googleLogin": {
        "handler": "src/function/auth/googleLogin.handler",
        "events": [
          {
            "http": {
              "path": "auth/google/login",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "auth/google/login",
              "method": "options",
              "cors": {
                "methods": [
                  "OPTIONS"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-googleLogin",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GoogleLoginLambdaVersionXjYy3dfIxa2pzEg4crpVmNMjbtN1lYId2imWxrxscY"
      },
      "getSession": {
        "handler": "src/function/auth/getSession.handler",
        "events": [
          {
            "http": {
              "path": "auth/session",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-getSession",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSessionLambdaVersionbfBvINraGp7ZdQAmOLbBHGy4H8gUmtVIWCIUbtkU4"
      },
      "logout": {
        "handler": "src/function/auth/logout.handler",
        "events": [
          {
            "http": {
              "path": "auth/logout",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-logout",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LogoutLambdaVersionnxng7UhwG9m921DzTdhVPGhCmNkXx65qYJfkhR7mUs"
      },
      "googleDriveAuthInitiate": {
        "handler": "src/function/auth/googleDriveAuth.initiateAuth",
        "events": [
          {
            "http": {
              "path": "auth/google/drive/initiate",
              "method": "get",
              "integration": "AWS_PROXY",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              }
            }
          },
          {
            "http": {
              "path": "auth/google/drive/initiate",
              "method": "options",
              "cors": {
                "methods": [
                  "OPTIONS"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-googleDriveAuthInitiate",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GoogleDriveAuthInitiateLambdaVersion30rRVuwXhXfBKwq6pri4ggImZkJVIZUQrb3Vjsp7Ig"
      },
      "googleDriveAuthCallback": {
        "handler": "src/function/auth/googleDriveAuth.callback",
        "events": [
          {
            "http": {
              "path": "auth/google/drive/callback",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-googleDriveAuthCallback",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GoogleDriveAuthCallbackLambdaVersion5GjxK88v4j365vdSjFZdVOtqv3guOZ8f5L3aDuATqQ"
      },
      "saveFile": {
        "handler": "src/function/drive/saveFile.handler",
        "events": [
          {
            "http": {
              "path": "drive/save",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-saveFile",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SaveFileLambdaVersionXbqOKL9kJIDkuY8nSKTNq09b9yRsc09M8gPO0TFRs"
      },
      "loadFile": {
        "handler": "src/function/drive/loadFile.handler",
        "events": [
          {
            "http": {
              "path": "drive/load",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-loadFile",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoadFileLambdaVersionIBg7LZRoCnHQr9rOR9F1Aavn8xcObqNEkwvnkjYjo"
      },
      "listFiles": {
        "handler": "src/function/drive/listFiles.handler",
        "events": [
          {
            "http": {
              "path": "drive/files",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-listFiles",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ListFilesLambdaVersionlfP3ZZ3IcjMezFUjW821mZMq9gSbH03rnxVOPYnv16s"
      },
      "getClientConfig": {
        "handler": "src/function/config/getClientConfig.handler",
        "events": [
          {
            "http": {
              "path": "config/client",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "Cookie"
                ],
                "allowCredentials": true,
                "origins": [
                  "http://localhost:3001",
                  "http://localhost:3000",
                  "https://portfolio-wise.com",
                  "https://www.portfolio-wise.com",
                  "https://app.portfolio-wise.com"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-getClientConfig",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetClientConfigLambdaVersionvIKZCFBpAMKpXBCak9lu6Q0x4R0mRDG74f6fNvKuK8"
      },
      "debugGoogleConfig": {
        "handler": "src/function/debug/googleConfig.handler",
        "events": [
          {
            "http": {
              "path": "debug/google-config",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "pfwise-api-prod-debugGoogleConfig",
        "package": {},
        "memory": 256,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DebugGoogleConfigLambdaVersionQcX2s9fgyDEXBrYc5JJfk5YjliDOrpvytP5ips9hdg"
      }
    },
    "resources": {
      "Resources": {
        "MarketDataCacheTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "pfwise-api-prod-cache",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "key",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "key",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "SessionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "pfwise-api-prod-sessions",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "sessionId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "sessionId",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "ScrapingBlacklistTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "pfwise-api-prod-scraping-blacklist",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "symbol",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "symbol",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "RateLimitTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "pfwise-api-prod-rate-limits",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "pfwise-api",
      "package": {
        "exclude": [
          "__tests__/**",
          "test-results/**",
          "coverage/**",
          "document/**",
          "scripts/**",
          ".jest-cache/**",
          "dynamodb-local/**",
          "*.md",
          "*.bak*",
          "*.test.js",
          "*.spec.js",
          ".git/**",
          ".github/**",
          "node_modules/aws-sdk/**",
          "node_modules/jest/**",
          "node_modules/sinon/**",
          "node_modules/mock-fs/**",
          "node_modules/nock/**",
          "node_modules/supertest/**"
        ],
        "artifactsS3KeyDirname": "serverless/pfwise-api/prod/code-artifacts",
        "artifact": "/Users/kokiriho/Documents/Projects/pfwise/portfolio-manager/backend/.serverless/pfwise-api.zip",
        "artifactDirectoryName": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/kokiriho/Documents/Projects/pfwise/portfolio-manager/backend/.serverless/pfwise-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/pfwise-api/prod/1748484562603-2025-05-29T02:09:22.603Z",
    "artifact": "pfwise-api.zip"
  }
}
/**
 * „É≠„Éº„Ç´„É´ÈñãÁô∫Áî®„ÅÆ„Éû„Éº„Ç±„ÉÉ„Éà„Éá„Éº„Çø„Çµ„Éº„Éì„Çπ
 * ÂÆüÈöõ„ÅÆAWS„Çµ„Éº„Éê„Éº„Çí‰ΩøÁî®„Åó„Å™„Åå„Çâ„ÄÅ„Ç®„É©„ÉºÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÊèê‰æõ
 */

import { getApiEndpoint } from '../utils/envUtils';
import { fetchWithRetry, formatErrorResponse, generateFallbackData, TIMEOUT } from '../utils/apiUtils';

// „É¢„ÉÉ„ÇØAPI„Çí‰ΩøÁî®„Åô„Çã„Åã„Å©„ÅÜ„Åã
const USE_MOCK = process.env.REACT_APP_USE_MOCK_API === 'true';

// ÈñãÁô∫Áî®„ÅÆ„É≠„Ç∞Âá∫Âäõ
const logApiCall = (method, params, response, error = null) => {
  if (process.env.NODE_ENV === 'development') {
    console.group(`üì° API Call: ${method}`);
    console.log('Parameters:', params);
    if (error) {
      console.error('Error:', error);
    } else {
      console.log('Response:', response);
    }
    console.groupEnd();
  }
};

// ÈÄöË≤®ÊèõÁÆó„É¨„Éº„ÉàÂèñÂæóÔºàÈñãÁô∫Áî®Ôºâ
export const fetchExchangeRate = async (fromCurrency = 'USD', toCurrency = 'JPY', refresh = false) => {
  if (USE_MOCK) {
    const mockData = {
      success: true,
      rate: 150.0,
      source: 'Mock',
      lastUpdated: new Date().toISOString()
    };
    logApiCall('fetchExchangeRate', { fromCurrency, toCurrency }, mockData);
    return mockData;
  }

  try {
    const endpoint = getApiEndpoint('api/market-data');
    const params = {
      type: 'exchange-rate',
      base: fromCurrency,
      target: toCurrency,
      refresh: refresh ? 'true' : 'false'
    };
    
    const response = await fetchWithRetry(endpoint, params, TIMEOUT.EXCHANGE_RATE);
    logApiCall('fetchExchangeRate', params, response);
    return response;
  } catch (error) {
    logApiCall('fetchExchangeRate', { fromCurrency, toCurrency }, null, error);
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÄ§„ÇíËøî„Åô
    return {
      success: false,
      error: true,
      message: 'ÁÇ∫Êõø„É¨„Éº„Éà„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
      ...formatErrorResponse(error),
      rate: fromCurrency === 'USD' && toCurrency === 'JPY' ? 150.0 : 
            fromCurrency === 'JPY' && toCurrency === 'USD' ? 1/150.0 : 1.0,
      source: 'Fallback',
      lastUpdated: new Date().toISOString()
    };
  }
};

// Âçò‰∏ÄÈäòÊüÑ„Éá„Éº„ÇøÂèñÂæóÔºàÈñãÁô∫Áî®Ôºâ
export const fetchStockData = async (ticker, refresh = false) => {
  if (USE_MOCK) {
    const mockData = {
      success: true,
      data: {
        [ticker]: {
          ticker,
          price: /^\d{4}(\.T)?$/.test(ticker) ? 2500 : 150,
          currency: /^\d{4}(\.T)?$/.test(ticker) ? 'JPY' : 'USD',
          name: `${ticker} (Mock)`,
          source: 'Mock',
          lastUpdated: new Date().toISOString()
        }
      }
    };
    logApiCall('fetchStockData', { ticker }, mockData);
    return mockData;
  }

  let type = 'us-stock';
  let timeout = TIMEOUT.US_STOCK;
  
  if (/^\d{4}(\.T)?$/.test(ticker)) {
    type = 'jp-stock';
    timeout = TIMEOUT.JP_STOCK;
  } else if (/^\d{7}C(\.T)?$/.test(ticker)) {
    type = 'mutual-fund';
    timeout = TIMEOUT.MUTUAL_FUND;
  }
  
  try {
    const endpoint = getApiEndpoint('api/market-data');
    const params = {
      type,
      symbols: ticker,
      refresh: refresh ? 'true' : 'false'
    };
    
    const response = await fetchWithRetry(endpoint, params, timeout);
    logApiCall('fetchStockData', params, response);
    return response;
  } catch (error) {
    logApiCall('fetchStockData', { ticker }, null, error);
    
    return {
      success: false,
      ...formatErrorResponse(error, ticker),
      data: {
        [ticker]: generateFallbackData(ticker)
      },
      source: 'Fallback'
    };
  }
};

// „Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { fetchMultipleStocks, fetchApiStatus } from './marketDataService';

export default {
  fetchExchangeRate,
  fetchStockData,
  fetchMultipleStocks: require('./marketDataService').fetchMultipleStocks,
  fetchApiStatus: require('./marketDataService').fetchApiStatus
};